package generatedtest;

import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Queue;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.Vector;
import org.apache.commons.collections4.ArrayStack;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.BagUtils;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.EnumerationUtils;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.Get;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.IterableSortedMap;
import org.apache.commons.collections4.IterableUtils;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.KeyValue;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.collections4.ListValuedMap;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.collections4.MultiMap;
import org.apache.commons.collections4.MultiMapUtils;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.MultiSetUtils;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Put;
import org.apache.commons.collections4.QueueUtils;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.SetValuedMap;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.SplitMapUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.Trie;
import org.apache.commons.collections4.TrieUtils;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.keyvalue.AbstractKeyValue;
import org.apache.commons.collections4.keyvalue.AbstractMapEntry;
import org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator;
import org.apache.commons.collections4.keyvalue.DefaultKeyValue;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.apache.commons.collections4.map.MultiValueMap;

// Test case generated by GenerateFlowTestCase.ql
public class Test {

	static Object getArrayElement(Object[] container) { return container[0]; }
	static Object getElement(Iterable container) { return container.iterator().next(); }
	static Object getMapKey(AbstractKeyValue container) { return container.getKey(); }
	static Object getMapKeyFromEntry(Map.Entry container) { return container.getKey(); }
	static Object getMapKey(AbstractMapEntryDecorator container) { return container.getKey(); }
	static Object getMapKey(Map container) { return container.keySet().iterator().next(); }
	static Object getMapValue(AbstractKeyValue container) { return container.getValue(); }
	static Object getMapValueFromEntry(Map.Entry container) { return container.getValue(); }
	static Object getMapValue(AbstractMapEntryDecorator container) { return container.getValue(); }
	static Object getMapValue(Map container) { return container.get(null); }

	Object[] newWithArrayElement(Object element) { return new Object[] {element}; }
	Iterable<String> newWithElement(String element) { Vector<String> v = new Vector<String>(); v.add(element); return v; }

	MyAbstractKeyValue newMAKVWithMapKey(Object element) { return new MyAbstractKeyValue(element,null); }
	DefaultKeyValue newDKVWithMapKey(Object element) { return new DefaultKeyValue(element,null); }
	MyAbstractMapEntry newMAMEWithMapKey(Object element) { return new MyAbstractMapEntry(element,null); }
	MyAbstractMapEntryDecorator newMAMEDWithMapKey(Object element) { return new MyAbstractMapEntryDecorator(newMAMEWithMapKey(element)); }
	ResourceBundle newRBWithMapKey(Object element) { return (ResourceBundle)null; }
	SortedMap newTreeMapWithMapKey(Object element) { SortedMap m = new TreeMap(); m.put(element,null); return m; }
	TiedMapEntry newTMEWithMapKey(Object element) { return new TiedMapEntry(newTreeMapWithMapKey(element),element); }
	
	MyAbstractKeyValue newMAKVWithMapValue(Object element) { return new MyAbstractKeyValue(null,element); }
	DefaultKeyValue newDKVWithMapValue(Object element) { return new DefaultKeyValue(null,element); }
	MyAbstractMapEntry newMAMEWithMapValue(Object element) { return new MyAbstractMapEntry(null,element); }
	MyAbstractMapEntryDecorator newMAMEDWithMapValue(Object element) { return new MyAbstractMapEntryDecorator(newMAMEWithMapValue(element)); }
	ResourceBundle newRBWithMapValue(Object element) { return (ResourceBundle)null; }
	SortedMap newTreeMapWithMapValue(Object element) { SortedMap m = new TreeMap(); m.put(null,element); return m; }
	TiedMapEntry newTMEWithMapValue(Object element) { return new TiedMapEntry(newTreeMapWithMapValue(element),null); }
	UnmodifiableMapEntry newUMEWithMapValue(Object element) { return new UnmodifiableMapEntry(null,element); }
	
	Object source() { return null; }
	void sink(Object o) { }

	class MyAbstractKeyValue<K, V> extends AbstractKeyValue<K, V> {
		MyAbstractKeyValue(K key, V value) {
			super(key, value);
		}

		K mySetKey(final K key) {
			return super.setKey(key);
		}

		V mySetValue(final V value) {
			return super.setValue(value);
		}
	}

	class MyAbstractMapEntry<K, V> extends AbstractMapEntry<K, V> {
		MyAbstractMapEntry(final K key, final V value) {
			super(key, value);
		}
		@Override
		public K getKey() { return null; }
		@Override
		public V getValue() { return null; }
	}

	class MyAbstractMapEntryDecorator<K, V> extends AbstractMapEntryDecorator<K, V> {
		MyAbstractMapEntryDecorator(final Map.Entry<K, V> entry) {
			super(entry);
		}

		Map.Entry<K, V> myGetMapEntry() {
			return super.getMapEntry();
		}
	}

	public void test() {

		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[0];MapKey of Argument[-1];value"
			AbstractKeyValue out = null;
			Object in = source();
			out = new MyAbstractKeyValue(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[1];MapValue of Argument[-1];value"
			AbstractKeyValue out = null;
			Object in = source();
			out = new MyAbstractKeyValue(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;Argument[0];MapKey of Argument[-1];value"
			DefaultKeyValue out = null;
			Object in = source();
			out.setKey(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;Argument[0];MapKey of Argument[-1];value"
			MyAbstractKeyValue out = null;
			Object in = source();
			out.mySetKey(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			DefaultKeyValue in = newDKVWithMapValue(source());
			out = in.setKey(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MyAbstractKeyValue in = newMAKVWithMapValue(source());
			out = in.mySetKey(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MyAbstractKeyValue in = newMAKVWithMapValue(source());
			out = in.mySetKey((Object)null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			Object in = source();
			out.setValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];value"
			DefaultKeyValue out = null;
			Object in = source();
			out.setValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];value"
			AbstractMapEntry out = null;
			Object in = source();
			out.setValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];value"
			MyAbstractKeyValue out = null;
			Object in = source();
			out.mySetValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			UnmodifiableMapEntry in = newUMEWithMapValue(source());
			out = in.setValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			DefaultKeyValue in = newDKVWithMapValue(source());
			out = in.setValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			AbstractMapEntry in = newMAMEWithMapValue(source());
			out = in.setValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			AbstractMapEntry in = newMAMEWithMapValue(source());
			out = in.setValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MyAbstractKeyValue in = newMAKVWithMapValue(source());
			out = in.mySetValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MyAbstractKeyValue in = newMAKVWithMapValue(source());
			out = in.mySetValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;toString;;;MapKey of Argument[-1];ReturnValue;taint"
			String out = null;
			AbstractKeyValue in = newMAKVWithMapKey(source());
			out = in.toString();
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractKeyValue;true;toString;;;MapValue of Argument[-1];ReturnValue;taint"
			String out = null;
			AbstractKeyValue in = newMAKVWithMapValue(source());
			out = in.toString();
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[0];MapKey of Argument[-1];value"
			AbstractMapEntry out = null;
			Object in = source();
			out = new MyAbstractMapEntry(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[1];MapValue of Argument[-1];value"
			AbstractMapEntry out = null;
			Object in = source();
			out = new MyAbstractMapEntry(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];value"
			AbstractMapEntryDecorator out = null;
			Map.Entry<String,String> in = newMAMEWithMapKey(source());
			out = new MyAbstractMapEntryDecorator(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value"
			AbstractMapEntryDecorator out = null;
			Map.Entry<String,String> in = newMAMEWithMapValue(source());
			out = new MyAbstractMapEntryDecorator(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			Map.Entry<String,String> out = null;
			MyAbstractMapEntryDecorator in = newMAMEDWithMapKey(source());
			out = in.myGetMapEntry();
			sink(getMapKeyFromEntry(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			Map.Entry<String,String> out = null;
			MyAbstractMapEntryDecorator in = newMAMEDWithMapValue(source());
			out = in.myGetMapEntry();
			sink(getMapValueFromEntry(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;toString;;;MapKey of Argument[-1];ReturnValue;taint"
			String out = null;
			AbstractMapEntryDecorator in = newMAMEDWithMapKey(source());
			out = in.toString();
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;toString;;;MapValue of Argument[-1];ReturnValue;taint"
			String out = null;
			AbstractMapEntryDecorator in = newMAMEDWithMapValue(source());
			out = in.toString();
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value"
			DefaultKeyValue out = null;
			Map.Entry<String,String> in = newMAMEWithMapKey(source());
			out = new DefaultKeyValue(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value"
			DefaultKeyValue out = null;
			Map.Entry<String,String> in = newMAMEWithMapValue(source());
			out = new DefaultKeyValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value"
			DefaultKeyValue out = null;
			KeyValue in = newMAKVWithMapKey(source());
			out = new DefaultKeyValue(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value"
			DefaultKeyValue out = null;
			KeyValue in = newMAKVWithMapValue(source());
			out = new DefaultKeyValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[0];MapKey of Argument[-1];value"
			DefaultKeyValue out = null;
			Object in = source();
			out = new DefaultKeyValue(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[1];MapValue of Argument[-1];value"
			DefaultKeyValue out = null;
			Object in = source();
			out = new DefaultKeyValue(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			Map.Entry<String,String> out = null;
			DefaultKeyValue in = newDKVWithMapKey(source());
			out = in.toMapEntry();
			sink(getMapKeyFromEntry(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			Map.Entry<String,String> out = null;
			DefaultKeyValue in = newDKVWithMapValue(source());
			out = in.toMapEntry();
			sink(getMapValueFromEntry(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value"
			DefaultMapEntry out = null;
			Map.Entry<String,String> in = newMAMEWithMapKey(source());
			out = new DefaultMapEntry(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value"
			DefaultMapEntry out = null;
			Map.Entry<String,String> in = newMAMEWithMapValue(source());
			out = new DefaultMapEntry(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value"
			DefaultMapEntry out = null;
			KeyValue in = newMAKVWithMapKey(source());
			out = new DefaultMapEntry(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value"
			DefaultMapEntry out = null;
			KeyValue in = newMAKVWithMapValue(source());
			out = new DefaultMapEntry(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];value"
			DefaultMapEntry out = null;
			Object in = source();
			out = new DefaultMapEntry(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];value"
			DefaultMapEntry out = null;
			Object in = source();
			out = new DefaultMapEntry(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;TiedMapEntry;true;TiedMapEntry;;;Argument[1];MapKey of Argument[-1];value"
			TiedMapEntry out = null;
			Object in = source();
			out = new TiedMapEntry(null, in);
			sink(getMapKeyFromEntry(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;TiedMapEntry;true;TiedMapEntry;;;MapValue of Argument[0];MapValue of Argument[-1];value"
			TiedMapEntry out = null;
			Map in = newTreeMapWithMapValue(source());
			out = new TiedMapEntry(in, null);
			sink(getMapValueFromEntry(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			Map.Entry<String,String> in = newMAMEWithMapKey(source());
			out = new UnmodifiableMapEntry(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			Map.Entry<String,String> in = newMAMEWithMapValue(source());
			out = new UnmodifiableMapEntry(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			KeyValue in = newMAKVWithMapKey(source());
			out = new UnmodifiableMapEntry(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			KeyValue in = newMAKVWithMapValue(source());
			out = new UnmodifiableMapEntry(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			Object in = source();
			out = new UnmodifiableMapEntry(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];value"
			UnmodifiableMapEntry out = null;
			Object in = source();
			out = new UnmodifiableMapEntry(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			TiedMapEntry in = newTMEWithMapKey(source());
			out = in.getKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			KeyValue in = newMAKVWithMapKey(source());
			out = in.getKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			AbstractMapEntryDecorator in = newMAMEDWithMapKey(source());
			out = in.getKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			AbstractKeyValue in = newMAKVWithMapKey(source());
			out = in.getKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			TiedMapEntry in = newTMEWithMapValue(source());
			out = in.getValue();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			KeyValue in = newMAKVWithMapValue(source());
			out = in.getValue();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			AbstractMapEntryDecorator in = newMAMEDWithMapValue(source());
			out = in.getValue();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			AbstractKeyValue in = newMAKVWithMapValue(source());
			out = in.getValue();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value"
			Map out = null;
			Map in = (Map)source();
			out = MapUtils.emptyIfNull(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.fixedSizeMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.fixedSizeMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.fixedSizeSortedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.fixedSizeSortedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getMap;;;Argument[2];ReturnValue;value"
			Map out = null;
			Map in = (Map)source();
			out = MapUtils.getMap(null, null, in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getMap;;;MapValue of Argument[0];ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.getMap(in, null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getMap;;;MapValue of Argument[0];ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.getMap(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getObject;;;Argument[2];ReturnValue;value"
			Object out = null;
			Object in = source();
			out = MapUtils.getObject(null, null, in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getObject;;;MapValue of Argument[0];ReturnValue;value"
			Object out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.getObject(in, null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getObject;;;MapValue of Argument[0];ReturnValue;value"
			Object out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.getObject(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getString;;;Argument[2];ReturnValue;value"
			String out = null;
			String in = (String)source();
			out = MapUtils.getString(null, null, in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getString;;;MapValue of Argument[0];ReturnValue;value"
			String out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.getString(in, null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;getString;;;MapValue of Argument[0];ReturnValue;value"
			String out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.getString(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;invertMap;;;MapKey of Argument[0];MapValue of ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.invertMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;invertMap;;;MapValue of Argument[0];MapKey of ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.invertMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;iterableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.iterableMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;iterableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.iterableMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;iterableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableSortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.iterableSortedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;iterableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableSortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.iterableSortedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.lazyMap(in, (Transformer)null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.lazyMap(in, (Factory)null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.lazyMap(in, (Transformer)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.lazyMap(in, (Factory)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.lazySortedMap(in, (Transformer)null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.lazySortedMap(in, (Factory)null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.lazySortedMap(in, (Transformer)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.lazySortedMap(in, (Factory)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			MultiValueMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.multiValueMap(in, (Factory)null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			MultiValueMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.multiValueMap(in, (Class)null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			MultiValueMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.multiValueMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			MultiValueMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.multiValueMap(in, (Factory)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			MultiValueMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.multiValueMap(in, (Class)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			MultiValueMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.multiValueMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;orderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			OrderedMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.orderedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;orderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			OrderedMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.orderedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;populateMap;(Map,Iterable,Transformer);;Element of Argument[1];MapValue of Argument[0];value"
			Map out = null;
			Iterable in = newWithElement((String)source());
			MapUtils.populateMap(out, in, (Transformer)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// Note it is tricky to get this to compile - the compiler thinks it is ambiguous
			// which overload it should choose unless you put the generic types in correctly
			// "org.apache.commons.collections4;MapUtils;true;populateMap;(MultiMap,Iterable,Transformer);;Element of Argument[1];MapValue of Argument[0];value"
			MultiMap<Integer, String> out = null;
			Iterable<String> in = newWithElement((String)source());
			MapUtils.populateMap(out, in, (Transformer<String, Integer>)null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.predicatedMap(in, null, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.predicatedMap(in, null, null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.predicatedSortedMap(in, null, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.predicatedSortedMap(in, null, null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of Argument[0];value"
			Map out = null;
			Object[] in = newWithArrayElement(source());
			MapUtils.putAll(out, in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of ReturnValue;value"
			Map out = null;
			Object[] in = newWithArrayElement(source());
			out = MapUtils.putAll(null, in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of Argument[0];value"
			Map out = null;
			Object[] in = newWithArrayElement(source());
			MapUtils.putAll(out, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of ReturnValue;value"
			Map out = null;
			Object[] in = newWithArrayElement(source());
			out = MapUtils.putAll(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of Argument[0];value"
			Map out = null;
			Object[] in = newWithArrayElement(newWithArrayElement(source()));
			MapUtils.putAll(out, in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of ReturnValue;value"
			Map out = null;
			Object[] in = newWithArrayElement(newWithArrayElement(source()));
			out = MapUtils.putAll(null, in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of Argument[0];value"
			Map out = null;
			Object[] in = newWithArrayElement(newWithArrayElement(source()));
			MapUtils.putAll(out, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of ReturnValue;value"
			Map out = null;
			Object[] in = newWithArrayElement(newWithArrayElement(source()));
			out = MapUtils.putAll(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of Argument[0];value"
			Map out = null;
			Object[] in = newWithArrayElement(newMAKVWithMapKey(source()));
			MapUtils.putAll(out, in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of ReturnValue;value"
			Map out = null;
			Object[] in = newWithArrayElement(newMAKVWithMapKey(source()));
			out = MapUtils.putAll(null, in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of Argument[0];value"
			Map out = null;
			Object[] in = newWithArrayElement(newMAKVWithMapValue(source()));
			MapUtils.putAll(out, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of ReturnValue;value"
			Map out = null;
			Object[] in = newWithArrayElement(newMAKVWithMapValue(source()));
			out = MapUtils.putAll(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;safeAddToMap;;;Argument[1];MapKey of Argument[0];value"
			Map out = null;
			Object in = source();
			MapUtils.safeAddToMap(out, in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;safeAddToMap;;;Argument[2];MapValue of Argument[0];value"
			Map out = null;
			Object in = source();
			MapUtils.safeAddToMap(out, null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;synchronizedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.synchronizedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;synchronizedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.synchronizedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;synchronizedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.synchronizedSortedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;synchronizedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.synchronizedSortedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;toMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			Map out = null;
			ResourceBundle in = newRBWithMapKey(source());
			out = MapUtils.toMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;toMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			Map out = null;
			ResourceBundle in = newRBWithMapValue(source());
			out = MapUtils.toMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;transformedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.transformedMap(in, null, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;transformedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.transformedMap(in, null, null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;transformedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.transformedSortedMap(in, null, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;transformedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.transformedSortedMap(in, null, null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapKey(source());
			out = MapUtils.unmodifiableMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			Map out = null;
			Map in = newTreeMapWithMapValue(source());
			out = MapUtils.unmodifiableMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapKey(source());
			out = MapUtils.unmodifiableSortedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapUtils;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			SortedMap out = null;
			SortedMap in = newTreeMapWithMapValue(source());
			out = MapUtils.unmodifiableSortedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ArrayStack;true;peek;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			ArrayStack in = (ArrayStack)newWithElement(source());
			out = in.peek(0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ArrayStack;true;peek;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			ArrayStack in = (ArrayStack)newWithElement(source());
			out = in.peek();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ArrayStack;true;pop;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			ArrayStack in = (ArrayStack)newWithElement(source());
			out = in.pop();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ArrayStack;true;push;;;Argument[0];Element of Argument[-1];value"
			ArrayStack out = null;
			Object in = (Object)source();
			out.push(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Bag;true;add;;;Argument[0];Element of Argument[-1];value"
			Bag out = null;
			Object in = (Object)source();
			out.add(in, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Bag;true;add;;;Argument[0];Element of Argument[-1];value"
			Bag out = null;
			Object in = (Object)source();
			out.add(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Bag;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;value"
			Set out = null;
			Bag in = (Bag)newWithElement(source());
			out = in.uniqueSet();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;collectionBag;;;Element of Argument[0];Element of ReturnValue;value"
			Bag out = null;
			Bag in = (Bag)newWithElement(source());
			out = BagUtils.collectionBag(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;predicatedBag;;;Element of Argument[0];Element of ReturnValue;value"
			Bag out = null;
			Bag in = (Bag)newWithElement(source());
			out = BagUtils.predicatedBag(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;predicatedSortedBag;;;Element of Argument[0];Element of ReturnValue;value"
			SortedBag out = null;
			SortedBag in = (SortedBag)newWithElement(source());
			out = BagUtils.predicatedSortedBag(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;synchronizedBag;;;Element of Argument[0];Element of ReturnValue;value"
			Bag out = null;
			Bag in = (Bag)newWithElement(source());
			out = BagUtils.synchronizedBag(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;synchronizedSortedBag;;;Element of Argument[0];Element of ReturnValue;value"
			SortedBag out = null;
			SortedBag in = (SortedBag)newWithElement(source());
			out = BagUtils.synchronizedSortedBag(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;transformingBag;;;Element of Argument[0];Element of ReturnValue;value"
			Bag out = null;
			Bag in = (Bag)newWithElement(source());
			out = BagUtils.transformingBag(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;transformingSortedBag;;;Element of Argument[0];Element of ReturnValue;value"
			SortedBag out = null;
			SortedBag in = (SortedBag)newWithElement(source());
			out = BagUtils.transformingSortedBag(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;unmodifiableBag;;;Element of Argument[0];Element of ReturnValue;value"
			Bag out = null;
			Bag in = (Bag)newWithElement(source());
			out = BagUtils.unmodifiableBag(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BagUtils;true;unmodifiableSortedBag;;;Element of Argument[0];Element of ReturnValue;value"
			SortedBag out = null;
			SortedBag in = (SortedBag)newWithElement(source());
			out = BagUtils.unmodifiableSortedBag(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BidiMap;true;getKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			BidiMap in = (BidiMap)newWithMapKey(source());
			out = in.getKey(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BidiMap;true;inverseBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;value"
			BidiMap out = null;
			BidiMap in = (BidiMap)newWithMapKey(source());
			out = in.inverseBidiMap();
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BidiMap;true;inverseBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;value"
			BidiMap out = null;
			BidiMap in = (BidiMap)newWithMapValue(source());
			out = in.inverseBidiMap();
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;BidiMap;true;removeValue;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			BidiMap in = (BidiMap)newWithMapKey(source());
			out = in.removeValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Enumeration);;Element of Argument[1];Element of Argument[0];value"
			Collection out = null;
			Enumeration in = (Enumeration)newWithElement(source());
			CollectionUtils.addAll(out, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Iterable);;Element of Argument[1];Element of Argument[0];value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			CollectionUtils.addAll(out, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Iterator);;Element of Argument[1];Element of Argument[0];value"
			Collection out = null;
			Iterator in = (Iterator)newWithElement(source());
			CollectionUtils.addAll(out, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Object[]);;ArrayElement of Argument[1];Element of Argument[0];value"
			Collection out = null;
			C[] in = (C[])newWithArrayElement(source());
			CollectionUtils.addAll(out, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;addIgnoreNull;;;Argument[1];Element of Argument[0];value"
			Collection out = null;
			Object in = (Object)source();
			CollectionUtils.addIgnoreNull(out, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate(in, null, null, false);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate(in, (Iterable)null, false);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate(in, (Iterable)null, (Comparator)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate(null, in, null, false);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate((Iterable)null, in, false);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.collate((Iterable)null, in, (Comparator)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.disjunction(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.disjunction(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)source();
			out = CollectionUtils.emptyIfNull(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;extractSingleton;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.extractSingleton(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;find;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.find(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Iterator,int);;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = CollectionUtils.get(in, 0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Map,int);;MapKey of Argument[0];MapKey of ReturnValue;value"
			Map.Entry out = null;
			Map in = (Map)newWithMapKey(source());
			out = CollectionUtils.get(in, 0);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Map,int);;MapValue of Argument[0];MapValue of ReturnValue;value"
			Map.Entry out = null;
			Map in = (Map)newWithMapValue(source());
			out = CollectionUtils.get(in, 0);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;ArrayElement of Argument[0];ReturnValue;value"
			Object out = null;
			Object in = (Object)newWithArrayElement(source());
			out = CollectionUtils.get(in, 0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Object in = (Object)newWithElement(source());
			out = CollectionUtils.get(in, 0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;MapKey of Argument[0];MapKey of ReturnValue;value"
			Object out = null;
			Object in = (Object)newWithMapKey(source());
			out = CollectionUtils.get(in, 0);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;MapValue of Argument[0];MapValue of ReturnValue;value"
			Object out = null;
			Object in = (Object)newWithMapValue(source());
			out = CollectionUtils.get(in, 0);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;getCardinalityMap;;;Element of Argument[0];MapKey of ReturnValue;value"
			Map out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.getCardinalityMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.intersection(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.intersection(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;permutations;;;Element of Argument[0];Element of Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.permutations(in);
			sink(getElement(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.predicatedCollection(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.removeAll(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.removeAll(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.retainAll(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.retainAll(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;select;;;Element of Argument[0];Element of Argument[2];value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			CollectionUtils.select(in, null, out, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;select;;;Element of Argument[0];Element of Argument[2];value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			CollectionUtils.select(in, null, out);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;select;;;Element of Argument[0];Element of Argument[3];value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			CollectionUtils.select(in, null, null, out);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;select;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.select(in, null, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;select;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.select(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;select;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.select(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;selectRejected;;;Element of Argument[0];Element of Argument[2];value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			CollectionUtils.selectRejected(in, null, out);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;selectRejected;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.selectRejected(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;selectRejected;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.selectRejected(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.subtract(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.subtract(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.synchronizedCollection(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.transformingCollection(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;union;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.union(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;union;;;Element of Argument[1];Element of ReturnValue;value"
			Collection out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = CollectionUtils.union(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;CollectionUtils;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;value"
			Collection out = null;
			Collection in = (Collection)newWithElement(source());
			out = CollectionUtils.unmodifiableCollection(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;EnumerationUtils;true;get;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Enumeration in = (Enumeration)newWithElement(source());
			out = EnumerationUtils.get(in, 0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;EnumerationUtils;true;toList;(Enumeration);;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Enumeration in = (Enumeration)newWithElement(source());
			out = EnumerationUtils.toList(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;EnumerationUtils;true;toList;(StringTokenizer);;Argument[0];Element of ReturnValue;taint"
			List out = null;
			StringTokenizer in = (StringTokenizer)source();
			out = EnumerationUtils.toList(in);
			sink(getElement(out)); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;append;(Iterable);;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.append((Iterable)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;append;(Iterable);;Element of Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			FluentIterable instance = null;
			out = instance.append(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;append;(Object[]);;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.append();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;asEnumeration;;;Element of Argument[-1];Element of ReturnValue;value"
			Enumeration out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.asEnumeration();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;collate;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.collate(null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;collate;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.collate(null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;collate;;;Element of Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			FluentIterable instance = null;
			out = instance.collate(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;collate;;;Element of Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			FluentIterable instance = null;
			out = instance.collate(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;copyInto;;;Element of Argument[-1];Element of Argument[0];value"
			Collection out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			in.copyInto(out);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;eval;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.eval();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;filter;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.filter(null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;get;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.get(0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;limit;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.limit(0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;loop;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.loop();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;of;(Iterable);;Element of Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = FluentIterable.of(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;of;(Object);;Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			Object in = (Object)source();
			out = FluentIterable.of(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			T[] in = (T[])newWithArrayElement(source());
			out = FluentIterable.of(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;reverse;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.reverse();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;skip;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.skip(0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;toList;;;Element of Argument[-1];Element of ReturnValue;value"
			List out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.toList();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;toString;;;Element of Argument[-1];ReturnValue;taint"
			String out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.toString();
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;unique;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.unique();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;unmodifiable;;;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.unmodifiable();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;zip;(Iterable);;Element of Argument[-1];Element of ReturnValue;value"
			FluentIterable out = null;
			FluentIterable in = (FluentIterable)newWithElement(source());
			out = in.zip((Iterable)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;FluentIterable;true;zip;(Iterable);;Element of Argument[0];Element of ReturnValue;value"
			FluentIterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			FluentIterable instance = null;
			out = instance.zip(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;entrySet;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;value"
			Set out = null;
			Get in = (Get)newWithMapKey(source());
			out = in.entrySet();
			sink(getMapKey(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;entrySet;;;MapValue of Argument[-1];MapValue of Element of ReturnValue;value"
			Set out = null;
			Get in = (Get)newWithMapValue(source());
			out = in.entrySet();
			sink(getMapValue(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;get;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MultiMap in = (MultiMap)newWithMapValue(source());
			out = in.get(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;get;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			Get in = (Get)newWithMapValue(source());
			out = in.get(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;value"
			Set out = null;
			Get in = (Get)newWithMapKey(source());
			out = in.keySet();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MultiMap in = (MultiMap)newWithMapValue(source());
			out = in.remove(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			Get in = (Get)newWithMapValue(source());
			out = in.remove(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;values;();;MapValue of Argument[-1];Element of ReturnValue;value"
			Set out = null;
			BidiMap in = (BidiMap)newWithMapValue(source());
			out = in.values();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;values;();;MapValue of Argument[-1];Element of ReturnValue;value"
			Collection out = null;
			MultiMap in = (MultiMap)newWithMapValue(source());
			out = in.values();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Get;true;values;();;MapValue of Argument[-1];Element of ReturnValue;value"
			Collection out = null;
			Get in = (Get)newWithMapValue(source());
			out = in.values();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableGet;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;value"
			MapIterator out = null;
			IterableGet in = (IterableGet)newWithMapKey(source());
			out = in.mapIterator();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableGet;true;mapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			MapIterator out = null;
			IterableGet in = (IterableGet)newWithMapValue(source());
			out = in.mapIterator();
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;boundedIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.boundedIterable(in, 0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(null, in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(null, null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(in, null, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(null, in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(null, null, in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[3];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.chainedIterable(null, null, null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.collatedIterable(null, in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.collatedIterable(null, null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.collatedIterable(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.collatedIterable(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)source();
			out = IterableUtils.emptyIfNull(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;filteredIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.filteredIterable(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;find;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.find(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;first;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.first(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;get;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.get(in, 0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;loopingIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.loopingIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.partition(in, null, null);
			sink(getElement(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.partition(in, (Predicate<? super O>[])null);
			sink(getElement(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.partition(in, (Predicate)null);
			sink(getElement(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;reversedIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.reversedIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;skippingIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.skippingIterable(in, 0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.toList(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;toString;;;Element of Argument[0];ReturnValue;taint"
			String out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.toString(in, null, null, null, null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;toString;;;Element of Argument[0];ReturnValue;taint"
			String out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.toString(in, null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;toString;;;Element of Argument[0];ReturnValue;taint"
			String out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.toString(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;uniqueIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.uniqueIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;unmodifiableIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.unmodifiableIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;zippingIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.zippingIterable((Iterable)null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;zippingIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.zippingIterable(in, (Iterable)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IterableUtils;true;zippingIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterable in = (Iterable)newWithElement(source());
			out = IterableUtils.zippingIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;arrayIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			ResettableIterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.arrayIterator(in, 0, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;arrayIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			ResettableIterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.arrayIterator(in, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;arrayIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			ResettableIterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.arrayIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;arrayListIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			ResettableListIterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.arrayListIterator(in, 0, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;arrayListIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			ResettableListIterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.arrayListIterator(in, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;arrayListIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			ResettableListIterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.arrayListIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;asEnumeration;;;Element of Argument[0];Element of ReturnValue;value"
			Enumeration out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.asEnumeration(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;asIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.asIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;asIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Enumeration in = (Enumeration)newWithElement(source());
			out = IteratorUtils.asIterator(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;asIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Enumeration in = (Enumeration)newWithElement(source());
			out = IteratorUtils.asIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;asMultipleUseIterable;;;Element of Argument[0];Element of ReturnValue;value"
			Iterable out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.asMultipleUseIterable(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;boundedIterator;;;Element of Argument[0];Element of ReturnValue;value"
			BoundedIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.boundedIterator(in, 0L, 0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;boundedIterator;;;Element of Argument[0];Element of ReturnValue;value"
			BoundedIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.boundedIterator(in, 0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Collection);;Element of Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Collection in = (Collection)newWithElement(newWithElement(source()));
			out = IteratorUtils.chainedIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.chainedIterator(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.chainedIterator(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of ReturnValue;value"
			Iterator out = null;
			Collection in = (Collection)newWithElement(newWithElement(source()));
			out = IteratorUtils.collatedIterator((Comparator)null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.collatedIterator(null, in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.collatedIterator(null, null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;filteredIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.filteredIterator(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;filteredListIterator;;;Element of Argument[0];Element of ReturnValue;value"
			ListIterator out = null;
			ListIterator in = (ListIterator)newWithElement(source());
			out = IteratorUtils.filteredListIterator(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;find;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.find(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;first;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.first(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;get;;;Element of Argument[0];ReturnValue;value"
			Object out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.get(in, 0);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;getIterator;;;Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Object in = (Object)source();
			out = IteratorUtils.getIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;getIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Object in = (Object)newWithArrayElement(source());
			out = IteratorUtils.getIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;getIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Object in = (Object)newWithElement(source());
			out = IteratorUtils.getIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;getIterator;;;MapValue of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Object in = (Object)newWithMapValue(source());
			out = IteratorUtils.getIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;loopingIterator;;;Element of Argument[0];Element of ReturnValue;value"
			ResettableIterator out = null;
			Collection in = (Collection)newWithElement(source());
			out = IteratorUtils.loopingIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;loopingListIterator;;;Element of Argument[0];Element of ReturnValue;value"
			ResettableListIterator out = null;
			List in = (List)newWithElement(source());
			out = IteratorUtils.loopingListIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.peekingIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.pushbackIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;singletonIterator;;;Argument[0];Element of ReturnValue;value"
			ResettableIterator out = null;
			Object in = (Object)source();
			out = IteratorUtils.singletonIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;singletonListIterator;;;Argument[0];Element of ReturnValue;value"
			ListIterator out = null;
			Object in = (Object)source();
			out = IteratorUtils.singletonListIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;skippingIterator;;;Element of Argument[0];Element of ReturnValue;value"
			SkippingIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.skippingIterator(in, 0L);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toArray;;;Element of Argument[0];ArrayElement of ReturnValue;value"
			Object[] out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.toArray(in);
			sink(getArrayElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toList;;;Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterator in = (Iterator)source();
			out = IteratorUtils.toList(in, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toList;;;Argument[0];Element of ReturnValue;value"
			List out = null;
			Iterator in = (Iterator)source();
			out = IteratorUtils.toList(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toListIterator;;;Argument[0];Element of ReturnValue;value"
			ListIterator out = null;
			Iterator in = (Iterator)source();
			out = IteratorUtils.toListIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toString;;;Element of Argument[0];ReturnValue;taint"
			String out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.toString(in, null, null, null, null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toString;;;Element of Argument[0];ReturnValue;taint"
			String out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.toString(in, null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;toString;;;Element of Argument[0];ReturnValue;taint"
			String out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.toString(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;value"
			Iterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.unmodifiableIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;unmodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;value"
			ListIterator out = null;
			ListIterator in = (ListIterator)newWithElement(source());
			out = IteratorUtils.unmodifiableListIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;value"
			MapIterator out = null;
			MapIterator in = (MapIterator)newWithElement(source());
			out = IteratorUtils.unmodifiableMapIterator(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			MapIterator out = null;
			MapIterator in = (MapIterator)newWithMapValue(source());
			out = IteratorUtils.unmodifiableMapIterator(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;value"
			ZippingIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.zippingIterator(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value"
			ZippingIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.zippingIterator(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;value"
			ZippingIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.zippingIterator(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value"
			ZippingIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.zippingIterator(null, in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;value"
			ZippingIterator out = null;
			Iterator in = (Iterator)newWithElement(source());
			out = IteratorUtils.zippingIterator(null, null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;defaultIfNull;;;Argument[1];ReturnValue;value"
			List out = null;
			List in = (List)source();
			out = ListUtils.defaultIfNull(null, in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value"
			List out = null;
			List in = (List)source();
			out = ListUtils.emptyIfNull(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.intersection(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.intersection(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;lazyList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.lazyList(in, (Transformer)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;lazyList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.lazyList(in, (Factory)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[0];ReturnValue;taint"
			String out = null;
			CharSequence in = (CharSequence)source();
			out = ListUtils.longestCommonSubsequence(in, (CharSequence)null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[1];ReturnValue;taint"
			String out = null;
			CharSequence in = (CharSequence)source();
			out = ListUtils.longestCommonSubsequence((CharSequence)null, in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.longestCommonSubsequence(in, (List)null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.longestCommonSubsequence((List)null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.longestCommonSubsequence(in, null, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.longestCommonSubsequence(null, in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.partition(in, 0);
			sink(getElement(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.predicatedList(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Collection in = (Collection)newWithElement(source());
			out = ListUtils.removeAll(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Collection in = (Collection)newWithElement(source());
			out = ListUtils.retainAll(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;select;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Collection in = (Collection)newWithElement(source());
			out = ListUtils.select(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;selectRejected;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			Collection in = (Collection)newWithElement(source());
			out = ListUtils.selectRejected(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.subtract(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;sum;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.sum(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;sum;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.sum(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;synchronizedList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.synchronizedList(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;transformedList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.transformedList(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;union;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.union(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;union;;;Element of Argument[1];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.union(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;ListUtils;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;value"
			List out = null;
			List in = (List)newWithElement(source());
			out = ListUtils.unmodifiableList(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapIterator;true;getKey;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			MapIterator in = (MapIterator)newWithElement(source());
			out = in.getKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapIterator;true;getValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MapIterator in = (MapIterator)newWithMapValue(source());
			out = in.getValue();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapIterator;true;next;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			MapIterator in = (MapIterator)newWithElement(source());
			out = in.next();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapIterator;true;setValue;;;Argument[0];MapValue of Argument[-1];value"
			MapIterator out = null;
			Object in = (Object)source();
			out.setValue(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MapIterator;true;setValue;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MapIterator in = (MapIterator)newWithMapValue(source());
			out = in.setValue(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;value"
			Object out = null;
			MultiMap in = (MultiMap)newWithMapValue(newWithElement(source()));
			out = in.get(null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMap;true;put;;;Argument[0];MapKey of Argument[-1];value"
			MultiMap out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];value"
			MultiMap out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getElement(getMapValue(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;value"
			Collection out = null;
			MultiMap in = (MultiMap)newWithMapValue(newWithElement(source()));
			out = in.values();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)source();
			out = MultiMapUtils.emptyIfNull(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;getCollection;;;MapValue of Argument[0];ReturnValue;value"
			Collection out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(source());
			out = MultiMapUtils.getCollection(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;getValuesAsBag;;;MapValue of Argument[0];ReturnValue;value"
			Bag out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(source());
			out = MultiMapUtils.getValuesAsBag(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;getValuesAsList;;;MapValue of Argument[0];ReturnValue;value"
			List out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(source());
			out = MultiMapUtils.getValuesAsList(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;getValuesAsSet;;;MapValue of Argument[0];ReturnValue;value"
			Set out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(source());
			out = MultiMapUtils.getValuesAsSet(in, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;transformedMultiValuedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out = MultiMapUtils.transformedMultiValuedMap(in, null, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;transformedMultiValuedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(source());
			out = MultiMapUtils.transformedMultiValuedMap(in, null, null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;unmodifiableMultiValuedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out = MultiMapUtils.unmodifiableMultiValuedMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiMapUtils;true;unmodifiableMultiValuedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(source());
			out = MultiMapUtils.unmodifiableMultiValuedMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSet$Entry;true;getElement;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			MultiSet.Entry in = (MultiSet.Entry)newWithElement(source());
			out = in.getElement();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSet;true;add;;;Argument[0];Element of Argument[-1];value"
			MultiSet out = null;
			Object in = (Object)source();
			out.add(in, 0);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSet;true;add;;;Argument[0];Element of Argument[-1];value"
			MultiSet out = null;
			Object in = (Object)source();
			out.add(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSet;true;entrySet;;;Element of Argument[-1];Element of Element of ReturnValue;value"
			Set out = null;
			MultiSet in = (MultiSet)newWithElement(source());
			out = in.entrySet();
			sink(getElement(getElement(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSet;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;value"
			Set out = null;
			MultiSet in = (MultiSet)newWithElement(source());
			out = in.uniqueSet();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSetUtils;true;predicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;value"
			MultiSet out = null;
			MultiSet in = (MultiSet)newWithElement(source());
			out = MultiSetUtils.predicatedMultiSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSetUtils;true;synchronizedMultiSet;;;Element of Argument[0];Element of ReturnValue;value"
			MultiSet out = null;
			MultiSet in = (MultiSet)newWithElement(source());
			out = MultiSetUtils.synchronizedMultiSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiSetUtils;true;unmodifiableMultiSet;;;Element of Argument[0];Element of ReturnValue;value"
			MultiSet out = null;
			MultiSet in = (MultiSet)newWithElement(source());
			out = MultiSetUtils.unmodifiableMultiSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;asMap;;;Element of MapValue of Argument[-1];Element of MapValue of ReturnValue;value"
			Map out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(newWithElement(source()));
			out = in.asMap();
			sink(getElement(getMapValue(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			Map out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out = in.asMap();
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;value"
			Set out = null;
			SetValuedMap in = (SetValuedMap)newWithMapValue(newWithElement(source()));
			out = in.get(null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;value"
			List out = null;
			ListValuedMap in = (ListValuedMap)newWithMapValue(newWithElement(source()));
			out = in.get(null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;value"
			Collection out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(newWithElement(source()));
			out = in.get(null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;keySet;;;MapKey of Argument[-1];Element of ReturnValue;value"
			Set out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out = in.keySet();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;keys;;;MapKey of Argument[-1];Element of ReturnValue;value"
			MultiSet out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out = in.keys();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;mapIterator;;;Element of MapValue of Argument[-1];MapValue of ReturnValue;value"
			MapIterator out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(newWithElement(source()));
			out = in.mapIterator();
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;value"
			MapIterator out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out = in.mapIterator();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;put;;;Argument[0];MapKey of Argument[-1];value"
			MultiValuedMap out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];value"
			MultiValuedMap out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getElement(getMapValue(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			MultiValuedMap out = null;
			Map in = (Map)newWithMapKey(source());
			out.putAll(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];value"
			MultiValuedMap out = null;
			Map in = (Map)newWithMapValue(source());
			out.putAll(in);
			sink(getElement(getMapValue(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;putAll;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(newWithElement(source()));
			out.putAll(in);
			sink(getElement(getMapValue(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;putAll;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];value"
			MultiValuedMap out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapKey(source());
			out.putAll(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;putAll;(Object,Iterable);;Argument[0];MapKey of Argument[-1];value"
			MultiValuedMap out = null;
			Object in = (Object)source();
			out.putAll(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;putAll;(Object,Iterable);;Element of Argument[1];Element of MapValue of Argument[-1];value"
			MultiValuedMap out = null;
			Iterable in = (Iterable)newWithElement(source());
			out.putAll(null, in);
			sink(getElement(getMapValue(out))); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;MultiValuedMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;value"
			Collection out = null;
			MultiValuedMap in = (MultiValuedMap)newWithMapValue(newWithElement(source()));
			out = in.values();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;OrderedIterator;true;previous;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			OrderedMapIterator in = (OrderedMapIterator)newWithElement(source());
			out = in.previous();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;OrderedIterator;true;previous;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			OrderedIterator in = (OrderedIterator)newWithElement(source());
			out = in.previous();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;OrderedMap;true;firstKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			OrderedMap in = (OrderedMap)newWithMapKey(source());
			out = in.firstKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;OrderedMap;true;lastKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			OrderedMap in = (OrderedMap)newWithMapKey(source());
			out = in.lastKey();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;OrderedMap;true;nextKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			OrderedMap in = (OrderedMap)newWithMapKey(source());
			out = in.nextKey(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;OrderedMap;true;previousKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			OrderedMap in = (OrderedMap)newWithMapKey(source());
			out = in.previousKey(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;Argument[0];MapKey of Argument[-1];value"
			Put out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;Argument[0];MapKey of Argument[-1];value"
			MultiMap out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;Argument[0];MapKey of Argument[-1];value"
			BidiMap out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;Argument[1];MapValue of Argument[-1];value"
			Put out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;Argument[1];MapValue of Argument[-1];value"
			MultiMap out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;Argument[1];MapValue of Argument[-1];value"
			BidiMap out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			Put in = (Put)newWithMapValue(source());
			out = in.put(null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			MultiMap in = (MultiMap)newWithMapValue(source());
			out = in.put(null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;put;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			BidiMap in = (BidiMap)newWithMapValue(source());
			out = in.put(null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			Put out = null;
			Map in = (Map)newWithMapKey(source());
			out.putAll(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Put;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value"
			Put out = null;
			Map in = (Map)newWithMapValue(source());
			out.putAll(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;QueueUtils;true;predicatedQueue;;;Element of Argument[0];Element of ReturnValue;value"
			Queue out = null;
			Queue in = (Queue)newWithElement(source());
			out = QueueUtils.predicatedQueue(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;QueueUtils;true;synchronizedQueue;;;Element of Argument[0];Element of ReturnValue;value"
			Queue out = null;
			Queue in = (Queue)newWithElement(source());
			out = QueueUtils.synchronizedQueue(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;QueueUtils;true;transformingQueue;;;Element of Argument[0];Element of ReturnValue;value"
			Queue out = null;
			Queue in = (Queue)newWithElement(source());
			out = QueueUtils.transformingQueue(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;QueueUtils;true;unmodifiableQueue;;;Element of Argument[0];Element of ReturnValue;value"
			Queue out = null;
			Queue in = (Queue)newWithElement(source());
			out = QueueUtils.unmodifiableQueue(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils$SetView;true;copyInto;;;Element of Argument[-1];Element of Argument[0];value"
			Set out = null;
			SetUtils.SetView in = (SetUtils.SetView)newWithElement(source());
			in.copyInto(out);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils$SetView;true;createIterator;;;Element of Argument[-1];Element of ReturnValue;value"
			Iterator out = null;
			SetUtils.SetView in = (SetUtils.SetView)newWithElement(source());
			out = in.createIterator();
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;difference;;;Element of Argument[0];Element of ReturnValue;value"
			SetUtils.SetView out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.difference(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;difference;;;Element of Argument[1];Element of ReturnValue;value"
			SetUtils.SetView out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.difference(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value"
			Set out = null;
			Set in = (Set)source();
			out = SetUtils.emptyIfNull(in);
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;value"
			SetUtils.SetView out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.intersection(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;value"
			SetUtils.SetView out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.intersection(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;orderedSet;;;Element of Argument[0];Element of ReturnValue;value"
			Set out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.orderedSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			NavigableSet in = (NavigableSet)newWithElement(source());
			out = SetUtils.predicatedNavigableSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;value"
			Set out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.predicatedSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			SortedSet in = (SortedSet)newWithElement(source());
			out = SetUtils.predicatedSortedSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;synchronizedSet;;;Element of Argument[0];Element of ReturnValue;value"
			Set out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.synchronizedSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;synchronizedSortedSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			SortedSet in = (SortedSet)newWithElement(source());
			out = SetUtils.synchronizedSortedSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;transformedNavigableSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			NavigableSet in = (NavigableSet)newWithElement(source());
			out = SetUtils.transformedNavigableSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;transformedSet;;;Element of Argument[0];Element of ReturnValue;value"
			Set out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.transformedSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;transformedSortedSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			SortedSet in = (SortedSet)newWithElement(source());
			out = SetUtils.transformedSortedSet(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;union;;;Element of Argument[0];Element of ReturnValue;value"
			SetUtils.SetView out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.union(in, null);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;union;;;Element of Argument[1];Element of ReturnValue;value"
			SetUtils.SetView out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.union(null, in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			NavigableSet in = (NavigableSet)newWithElement(source());
			out = SetUtils.unmodifiableNavigableSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;unmodifiableSet;(Set);;Element of Argument[0];Element of ReturnValue;value"
			Set out = null;
			Set in = (Set)newWithElement(source());
			out = SetUtils.unmodifiableSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SetUtils;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;value"
			SortedSet out = null;
			SortedSet in = (SortedSet)newWithElement(source());
			out = SetUtils.unmodifiableSortedSet(in);
			sink(getElement(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SortedBag;true;first;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			SortedBag in = (SortedBag)newWithElement(source());
			out = in.first();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SortedBag;true;last;;;Element of Argument[-1];ReturnValue;value"
			Object out = null;
			SortedBag in = (SortedBag)newWithElement(source());
			out = in.last();
			sink(out); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SplitMapUtils;true;readableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			IterableMap out = null;
			Get in = (Get)newWithMapKey(source());
			out = SplitMapUtils.readableMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SplitMapUtils;true;readableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			IterableMap out = null;
			Get in = (Get)newWithMapValue(source());
			out = SplitMapUtils.readableMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SplitMapUtils;true;writableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			Map out = null;
			Put in = (Put)newWithMapKey(source());
			out = SplitMapUtils.writableMap(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;SplitMapUtils;true;writableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			Map out = null;
			Put in = (Put)newWithMapValue(source());
			out = SplitMapUtils.writableMap(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Trie;true;prefixMap;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			SortedMap out = null;
			Trie in = (Trie)newWithMapKey(source());
			out = in.prefixMap(null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;Trie;true;prefixMap;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			SortedMap out = null;
			Trie in = (Trie)newWithMapValue(source());
			out = in.prefixMap(null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;TrieUtils;true;unmodifiableTrie;;;MapKey of Argument[0];MapKey of ReturnValue;value"
			Trie out = null;
			Trie in = (Trie)newWithMapKey(source());
			out = TrieUtils.unmodifiableTrie(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "org.apache.commons.collections4;TrieUtils;true;unmodifiableTrie;;;MapValue of Argument[0];MapValue of ReturnValue;value"
			Trie out = null;
			Trie in = (Trie)newWithMapValue(source());
			out = TrieUtils.unmodifiableTrie(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}

	}

}