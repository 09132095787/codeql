package generatedtest;

import com.google.common.cache.Cache;
import com.google.common.cache.LoadingCache;
import com.google.common.collect.ImmutableMap;
import java.util.Map;
import java.util.concurrent.ConcurrentMap;

// Test case generated by GenerateFlowTestCase.ql
public class Test {

	Object getMapKey(Object container) { return null; }
	Object getMapValue(Object container) { return null; }
	Object newWithElement(Object element) { return null; }
	Object newWithMapKey(Object element) { return null; }
	Object newWithMapValue(Object element) { return null; }
	Object source() { return null; }
	void sink(Object o) { }

	public void test() throws Exception {

		{
			// "com.google.common.cache;Cache;true;asMap;();;MapKey of Argument[-1];MapKey of ReturnValue;value"
			ConcurrentMap out = null;
			LoadingCache in = (LoadingCache)newWithMapKey(source());
			out = in.asMap();
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;asMap;();;MapKey of Argument[-1];MapKey of ReturnValue;value"
			ConcurrentMap out = null;
			Cache in = (Cache)newWithMapKey(source());
			out = in.asMap();
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;asMap;();;MapValue of Argument[-1];MapValue of ReturnValue;value"
			ConcurrentMap out = null;
			LoadingCache in = (LoadingCache)newWithMapValue(source());
			out = in.asMap();
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;asMap;();;MapValue of Argument[-1];MapValue of ReturnValue;value"
			ConcurrentMap out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.asMap();
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;get;(Object,Callable);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.get(null, null);
			sink(out); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;getAllPresent;(Iterable);;MapValue of Argument[-1];MapValue of ReturnValue;value"
			ImmutableMap out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.getAllPresent(null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;getIfPresent;(Object);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.getIfPresent(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];value"
			Cache out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];value"
			Cache out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			Cache out = null;
			Map in = (Map)newWithMapKey(source());
			out.putAll(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;Cache;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value"
			Cache out = null;
			Map in = (Map)newWithMapValue(source());
			out.putAll(in);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;LoadingCache;true;apply;(Object);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			LoadingCache in = (LoadingCache)newWithMapValue(source());
			out = in.apply(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;LoadingCache;true;get;(Object);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			LoadingCache in = (LoadingCache)newWithMapValue(source());
			out = in.get(null);
			sink(out); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;LoadingCache;true;getAll;(Iterable);;Element of Argument[0];MapKey of ReturnValue;value"
			ImmutableMap out = null;
			Iterable in = (Iterable)newWithElement(source());
			LoadingCache instance = null;
			out = instance.getAll(in);
			sink(getMapKey(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;LoadingCache;true;getAll;(Iterable);;MapValue of Argument[-1];MapValue of ReturnValue;value"
			ImmutableMap out = null;
			LoadingCache in = (LoadingCache)newWithMapValue(source());
			out = in.getAll(null);
			sink(getMapValue(out)); // $ hasValueFlow
		}
		{
			// "com.google.common.cache;LoadingCache;true;getUnchecked;(Object);;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			LoadingCache in = (LoadingCache)newWithMapValue(source());
			out = in.getUnchecked(null);
			sink(out); // $ hasValueFlow
		}

	}

}