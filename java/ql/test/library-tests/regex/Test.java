package generatedtest;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Test case generated by GenerateFlowTestCase.ql
public class Test {

	Object source() { return null; }
	void sink(Object o) { }

	public void test() throws Exception {

		{
			// "java.util.regex;Matcher;false;group;;;Argument[-1];ReturnValue;taint"
			String out = null;
			Matcher in = (Matcher)source();
			out = in.group((String)null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Matcher;false;group;;;Argument[-1];ReturnValue;taint"
			String out = null;
			Matcher in = (Matcher)source();
			out = in.group();
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Matcher;false;group;;;Argument[-1];ReturnValue;taint"
			String out = null;
			Matcher in = (Matcher)source();
			out = in.group(0);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Matcher;false;replaceAll;;;Argument[-1];ReturnValue;taint"
			String out = null;
			Matcher in = (Matcher)source();
			out = in.replaceAll(null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Matcher;false;replaceAll;;;Argument[0];ReturnValue;taint"
			String out = null;
			String in = (String)source();
			Matcher instance = null;
			out = instance.replaceAll(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Matcher;false;replaceFirst;;;Argument[-1];ReturnValue;taint"
			String out = null;
			Matcher in = (Matcher)source();
			out = in.replaceFirst(null);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Matcher;false;replaceFirst;;;Argument[0];ReturnValue;taint"
			String out = null;
			String in = (String)source();
			Matcher instance = null;
			out = instance.replaceFirst(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Pattern;false;matcher;;;Argument[0];ReturnValue;taint"
			Matcher out = null;
			CharSequence in = (CharSequence)source();
			Pattern instance = null;
			out = instance.matcher(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Pattern;false;quote;;;Argument[0];ReturnValue;taint"
			String out = null;
			String in = (String)source();
			out = Pattern.quote(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Pattern;false;split;;;Argument[0];ReturnValue;taint"
			String[] out = null;
			CharSequence in = (CharSequence)source();
			Pattern instance = null;
			out = instance.split(in);
			sink(out); // $ hasTaintFlow
		}
		{
			// "java.util.regex;Pattern;false;split;;;Argument[0];ReturnValue;taint"
			String[] out = null;
			CharSequence in = (CharSequence)source();
			Pattern instance = null;
			out = instance.split(in, 0);
			sink(out); // $ hasTaintFlow
		}

	}

}