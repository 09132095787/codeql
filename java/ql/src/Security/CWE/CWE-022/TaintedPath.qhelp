<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>Accessing paths controlled by users can allow an attacker to access unexpected resources. This 
can result in sensitive information being revealed or deleted, or an attacker being able to influence
behavior by modifying unexpected files.</p>

<p>Paths that are naively constructed from data controlled by a user may contain unexpected special characters,
such as "..". Such a path may potentially point to any directory on the file system.</p>

</overview>
<recommendation>

<p>Validate user input before using it to construct a file path.</p>

<p>The choice of validation depends on the use case.</p>

<p>If you want to allow paths spanning multiple folders, a common strategy is to make sure that the constructed
file path is contained within a safe root folder, for example by checking that the path starts with the root folder.
Additionally, you need to ensure that the path does not contain any ".." components, since these would allow
the path to escape the root folder.</p>

<p>A safer (but more restrictive) option is to use an allow list of safe paths and make sure that
the user input is one of those paths.</p>

</recommendation>
<example>

<p>In this example, a file name is read from a <code>java.net.Socket</code> and then used to access a file
and send it back over the socket. However, a malicious user could enter a file name anywhere on the file system,
such as "/etc/passwd".</p>

<sample src="TaintedPath.java" />

<p>Simply checking that the path is under a trusted location (such as the user's home directory) is not enough,
however, since the path could contain relative components such as "..". For example, the string
"/home/[user]/../../etc/passwd" starts with the user's home directory, but would still result in the code reading
the file located at "/etc/passwd".</p>

<p>To fix this, we check that the user-provided path does not contain ".." and starts with the user's home directory.</p>

<sample src="TaintedPathGood.java" />

</example>
<references>

<li>
OWASP:
<a href="https://owasp.org/www-community/attacks/Path_Traversal">Path Traversal</a>.
</li>

</references>
</qhelp>
