/**
 * @id java/summary/generated-vs-manual-coverage
 * @name Metrics of generated versus manual MaD coverage
 * @description Expose metrics for the number of API endpoints covered by generated versus manual MaD models.
 * @kind table
 * @tags summary
 */

import java
import semmle.code.java.dataflow.FlowSummary
import utils.modelgenerator.internal.CaptureModels

/**
 * A callable with a Summary MaD model. Specifically, this callable is
 * the intersection of DataFlowTargetApis and SummarizedCallables.
 */
private class MadModeledCallable extends SummarizedCallableBase {
  MadModeledCallable() {
    this instanceof SummarizedCallable and
    exists(DataFlowTargetApi dataFlowTargApi | this.asCallable() = dataFlowTargApi)
  }
}

/** Returns the number of APIs with Summary MaD models for a given package and provenance. */
private float getNumApisWithMadModels(string package, string provenance) {
  exists(MadModeledCallable mc |
    package = mc.asCallable().getDeclaringType().getPackage().toString() and
    provenance in ["generated", "manual", "both"]
  |
    result =
      count(MadModeledCallable c |
        package = c.asCallable().getDeclaringType().getPackage().toString() and
        (
          c.(SummarizedCallable).isAutoGenerated() and // "auto-only"
          provenance = "generated"
          or
          c.(SummarizedCallable).isManuallyGenerated() and // "manual-only"
          provenance = "manual"
          or
          c.(SummarizedCallable).isBothAutoAndManuallyGenerated() and // "both"
          provenance = "both"
        )
      )
  )
}

/** Returns the total number of `DataFlowTargetApi`s for a given package. */
private float getNumApis(string package) {
  exists(DataFlowTargetApi dataFlowTargApi |
    package = dataFlowTargApi.getDeclaringType().getPackage().toString()
  |
    result = count(DataFlowTargetApi d | package = d.getDeclaringType().getPackage().toString())
  )
}

from
  string package, float generatedOnly, float both, float manualOnly, float non, float all,
  float generatedCoverage, float manualCoverage
where
  generatedOnly = getNumApisWithMadModels(package, "generated") and
  manualOnly = getNumApisWithMadModels(package, "manual") and
  both = getNumApisWithMadModels(package, "both") and
  all = getNumApis(package) and
  non = all - (generatedOnly + both + manualOnly) and
  generatedCoverage = (both / (both + manualOnly)) and // Proportion of manual models covered by generated ones
  manualCoverage = (both / (both + generatedOnly)) // Proportion of generated models covered by manual ones
select package, generatedOnly, both, manualOnly, non, all, generatedCoverage, manualCoverage
  order by package
