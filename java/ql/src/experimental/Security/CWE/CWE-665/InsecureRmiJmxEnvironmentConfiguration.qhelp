<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>An improperly set environment variable during the creation of an RMI or JMX server can lead 
to an unauthenticated remote code execution vulnerability. This is due to the fact that the
RMI/JMX server environment allows attackers to supply arbitrary objects to the authentication 
method, resulting in the attempted deserialization of an attacker-controlled object.
</overview>

<recommendation>
<p>During the creation/initialitation of an RMI or JMX server a properly set environment (Map) variable has
to be passed as second parameter. 
In order to disallow the deserialization of arbitrary objects the passed environment needs to set a deserialization filter.
Ideally this filter only allows the deserialization to <code>java.lang.String</code>.

The filter can be configured by setting the key <code>jmx.remote.rmi.server.credentials.filter.pattern</code> (CONST variable <code>RMIConnectorServer.CREDENTIALS_FILTER_PATTERN</code>).
The filter should (ideally) only allow java.lang.String and disallow all other classes for deserialization: (<code>"java.lang.String;!*"</code>).

The key-value pair can be set as following:

<code>
String my_filter = "java.lang.String;!*"; // Deny everything but java.lang.String

Map<String, Object> env = new HashMap<String, Object>;
env.put(RMIConnectorServer.CREDENTIALS_FILTER_PATTERN, my_filter);
</code>

For applications using &lt; Java 10:

<code>
// This is deprecated in Java 10+ !
Map<String, Object> env = new HashMap<String, Object>;
env.put ( 
  "jmx.remote.rmi.server.credential.types",
    new String[]{
     String[].class.getName(),
     String.class.getName()
   }
 );
</code>

Please note that the authentication implementation is vulnerable by default.
For this reason an initialization with a <code>null</code> environment is also vulnerable.
</recommendation>

<example>
<p>The following examples show how an RMI or JMX server can be initialized securely.

<p>The first example shows how an RMI server can be initialized with a secure environment.</p>

<sample src="CorrectRmiInitialisation.java">

<p>The second example shows how the environment for a JMX server can be initialized securely.</p>

<sample src="CorrectJmxInitialisation.java">

</example>

<references>
<li>OWASP: <a href="https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data">OWASP Deserialization of untrusted data</a>.</li>
<li>Issue discovered in Tomcat (CVE-2016-8735): <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8735">OWASP ESAPI</a>.</li>
<li>Vulnerable implementation of the RMI "newClient()" function: <a href="https://docs.oracle.com/javase/8/docs/api/javax/management/remote/rmi/RMIServer.html#newClient-java.lang.Object-">Vulnerable Function</a>.</li>
<li>Oracle release notes fixing the issue: <a href="https://www.oracle.com/java/technologies/javase/8u91-relnotes.html">Rlease Notes</a>.</li>
<li>Documentation for <a href="https://docs.oracle.com/javase/10/docs/api/javax/management/remote/rmi/RMIConnectorServer.html#CREDENTIALS_FILTER_PATTERN">CREDENTIALS_FILTER_PATTERN</a></li>
</references>
</qhelp>
