// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.CaseLabelItem
import codeql.swift.elements.stmt.Stmt
import codeql.swift.elements.decl.VarDecl

module Generated {
  class CaseStmt extends Synth::TCaseStmt, Stmt {
    override string getAPrimaryQlClass() { result = "CaseStmt" }

    /**
     * Gets the body.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Stmt getImmediateBody() {
      result =
        Synth::convertStmtFromRaw(Synth::convertCaseStmtToRaw(this).(Raw::CaseStmt).getBody())
    }

    /**
     * Gets the body.
     */
    final Stmt getBody() { result = getImmediateBody().resolve() }

    /**
     * Gets the `index`th label (0-based).
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    CaseLabelItem getImmediateLabel(int index) {
      result =
        Synth::convertCaseLabelItemFromRaw(Synth::convertCaseStmtToRaw(this)
              .(Raw::CaseStmt)
              .getLabel(index))
    }

    /**
     * Gets the `index`th label (0-based).
     */
    final CaseLabelItem getLabel(int index) { result = getImmediateLabel(index).resolve() }

    /**
     * Gets any of the labels.
     */
    final CaseLabelItem getALabel() { result = getLabel(_) }

    /**
     * Gets the number of labels.
     */
    final int getNumberOfLabels() { result = count(getALabel()) }

    /**
     * Gets the `index`th variable (0-based).
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    VarDecl getImmediateVariable(int index) {
      result =
        Synth::convertVarDeclFromRaw(Synth::convertCaseStmtToRaw(this)
              .(Raw::CaseStmt)
              .getVariable(index))
    }

    /**
     * Gets the `index`th variable (0-based).
     */
    final VarDecl getVariable(int index) { result = getImmediateVariable(index).resolve() }

    /**
     * Gets any of the variables.
     */
    final VarDecl getAVariable() { result = getVariable(_) }

    /**
     * Gets the number of variables.
     */
    final int getNumberOfVariables() { result = count(getAVariable()) }
  }
}
