// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.BraceStmt
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.stmt.LabeledStmt
import codeql.swift.elements.pattern.Pattern

module Generated {
  class ForEachStmt extends Synth::TForEachStmt, LabeledStmt {
    override string getAPrimaryQlClass() { result = "ForEachStmt" }

    /**
     * Gets the pattern.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Pattern getImmediatePattern() {
      result =
        Synth::convertPatternFromRaw(Synth::convertForEachStmtToRaw(this)
              .(Raw::ForEachStmt)
              .getPattern())
    }

    /**
     * Gets the pattern.
     */
    final Pattern getPattern() { result = getImmediatePattern().resolve() }

    /**
     * Gets the sequence.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Expr getImmediateSequence() {
      result =
        Synth::convertExprFromRaw(Synth::convertForEachStmtToRaw(this)
              .(Raw::ForEachStmt)
              .getSequence())
    }

    /**
     * Gets the sequence.
     */
    final Expr getSequence() { result = getImmediateSequence().resolve() }

    /**
     * Gets the where, if it exists.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Expr getImmediateWhere() {
      result =
        Synth::convertExprFromRaw(Synth::convertForEachStmtToRaw(this).(Raw::ForEachStmt).getWhere())
    }

    /**
     * Gets the where, if it exists.
     */
    final Expr getWhere() { result = getImmediateWhere().resolve() }

    /**
     * Holds if `getWhere()` exists.
     */
    final predicate hasWhere() { exists(getWhere()) }

    /**
     * Gets the body.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    BraceStmt getImmediateBody() {
      result =
        Synth::convertBraceStmtFromRaw(Synth::convertForEachStmtToRaw(this)
              .(Raw::ForEachStmt)
              .getBody())
    }

    /**
     * Gets the body.
     */
    final BraceStmt getBody() { result = getImmediateBody().resolve() }
  }
}
