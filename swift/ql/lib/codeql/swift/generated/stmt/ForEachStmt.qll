// generated by codegen/codegen.py
private import codeql.swift.generated.IpaTypes
private import codeql.swift.generated.Db
import codeql.swift.elements.stmt.BraceStmt
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.stmt.LabeledStmt
import codeql.swift.elements.pattern.Pattern

class ForEachStmtBase extends Ipa::TForEachStmt, LabeledStmt {
  override string getAPrimaryQlClass() { result = "ForEachStmt" }

  Pattern getImmediatePattern() {
    result = Ipa::fromDbInstance(Ipa::toDbInstance(this).(Db::ForEachStmt).getPattern())
  }

  final Pattern getPattern() { result = getImmediatePattern().resolve() }

  Expr getImmediateSequence() {
    result = Ipa::fromDbInstance(Ipa::toDbInstance(this).(Db::ForEachStmt).getSequence())
  }

  final Expr getSequence() { result = getImmediateSequence().resolve() }

  Expr getImmediateWhere() {
    result = Ipa::fromDbInstance(Ipa::toDbInstance(this).(Db::ForEachStmt).getWhere())
  }

  final Expr getWhere() { result = getImmediateWhere().resolve() }

  final predicate hasWhere() { exists(getWhere()) }

  BraceStmt getImmediateBody() {
    result = Ipa::fromDbInstance(Ipa::toDbInstance(this).(Db::ForEachStmt).getBody())
  }

  final BraceStmt getBody() { result = getImmediateBody().resolve() }
}
