// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.CaseStmt
import codeql.swift.elements.stmt.LabeledStmt
import codeql.swift.elements.stmt.Stmt

module Generated {
  class DoCatchStmt extends Synth::TDoCatchStmt, LabeledStmt {
    override string getAPrimaryQlClass() { result = "DoCatchStmt" }

    /**
     * Gets the body.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Stmt getImmediateBody() {
      result =
        Synth::convertStmtFromRaw(Synth::convertDoCatchStmtToRaw(this).(Raw::DoCatchStmt).getBody())
    }

    /**
     * Gets the body.
     */
    final Stmt getBody() { result = getImmediateBody().resolve() }

    /**
     * Gets the `index`th catch (0-based).
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    CaseStmt getImmediateCatch(int index) {
      result =
        Synth::convertCaseStmtFromRaw(Synth::convertDoCatchStmtToRaw(this)
              .(Raw::DoCatchStmt)
              .getCatch(index))
    }

    /**
     * Gets the `index`th catch (0-based).
     */
    final CaseStmt getCatch(int index) { result = getImmediateCatch(index).resolve() }

    /**
     * Gets any of the catches.
     */
    final CaseStmt getACatch() { result = getCatch(_) }

    /**
     * Gets the number of catches.
     */
    final int getNumberOfCatches() { result = count(getACatch()) }
  }
}
