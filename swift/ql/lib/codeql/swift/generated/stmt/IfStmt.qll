// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.LabeledConditionalStmt
import codeql.swift.elements.stmt.Stmt

module Generated {
  class IfStmt extends Synth::TIfStmt, LabeledConditionalStmt {
    override string getAPrimaryQlClass() { result = "IfStmt" }

    /**
     * Gets the then.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Stmt getImmediateThen() {
      result = Synth::convertStmtFromRaw(Synth::convertIfStmtToRaw(this).(Raw::IfStmt).getThen())
    }

    /**
     * Gets the then.
     */
    final Stmt getThen() { result = getImmediateThen().resolve() }

    /**
     * Gets the else, if it exists.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Stmt getImmediateElse() {
      result = Synth::convertStmtFromRaw(Synth::convertIfStmtToRaw(this).(Raw::IfStmt).getElse())
    }

    /**
     * Gets the else, if it exists.
     */
    final Stmt getElse() { result = getImmediateElse().resolve() }

    /**
     * Holds if `getElse()` exists.
     */
    final predicate hasElse() { exists(getElse()) }
  }
}
