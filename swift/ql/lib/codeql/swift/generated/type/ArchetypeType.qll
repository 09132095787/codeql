// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Db
import codeql.swift.elements.decl.ProtocolDecl
import codeql.swift.elements.type.SubstitutableType
import codeql.swift.elements.type.Type

class ArchetypeTypeBase extends Synth::TArchetypeType, SubstitutableType {
  Type getImmediateInterfaceType() {
    result =
      Synth::convertTypeFromDb(Synth::convertArchetypeTypeToDb(this)
            .(Db::ArchetypeType)
            .getInterfaceType())
  }

  final Type getInterfaceType() { result = getImmediateInterfaceType().resolve() }

  Type getImmediateSuperclass() {
    result =
      Synth::convertTypeFromDb(Synth::convertArchetypeTypeToDb(this)
            .(Db::ArchetypeType)
            .getSuperclass())
  }

  final Type getSuperclass() { result = getImmediateSuperclass().resolve() }

  final predicate hasSuperclass() { exists(getSuperclass()) }

  ProtocolDecl getImmediateProtocol(int index) {
    result =
      Synth::convertProtocolDeclFromDb(Synth::convertArchetypeTypeToDb(this)
            .(Db::ArchetypeType)
            .getProtocol(index))
  }

  final ProtocolDecl getProtocol(int index) { result = getImmediateProtocol(index).resolve() }

  final ProtocolDecl getAProtocol() { result = getProtocol(_) }

  final int getNumberOfProtocols() { result = count(getAProtocol()) }
}
