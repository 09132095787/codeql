// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr

module Generated {
  class IfExpr extends Synth::TIfExpr, Expr {
    override string getAPrimaryQlClass() { result = "IfExpr" }

    /**
     * Gets the condition.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Expr getImmediateCondition() {
      result =
        Synth::convertExprFromRaw(Synth::convertIfExprToRaw(this).(Raw::IfExpr).getCondition())
    }

    /**
     * Gets the condition.
     */
    final Expr getCondition() { result = getImmediateCondition().resolve() }

    /**
     * Gets the then expr.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Expr getImmediateThenExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertIfExprToRaw(this).(Raw::IfExpr).getThenExpr())
    }

    /**
     * Gets the then expr.
     */
    final Expr getThenExpr() { result = getImmediateThenExpr().resolve() }

    /**
     * Gets the else expr.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Expr getImmediateElseExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertIfExprToRaw(this).(Raw::IfExpr).getElseExpr())
    }

    /**
     * Gets the else expr.
     */
    final Expr getElseExpr() { result = getImmediateElseExpr().resolve() }
  }
}
