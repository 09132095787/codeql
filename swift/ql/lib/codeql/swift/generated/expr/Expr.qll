// generated by codegen/codegen.py
/**
 * This module provides the generated definition of `Expr`.
 * INTERNAL: Do not use. Import the corresponding module under `elements` instead.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.AstNode
import codeql.swift.elements.type.Type

module Generated {
  /**
   * The base class for all expressions in Swift.
   * INTERNAL: Do not use. Use the wrapper class under `elements` instead.
   */
  class Expr extends Synth::TExpr, AstNode {
    /**
     * Gets the type of this expression, if it exists.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateType() {
      result = Synth::convertTypeFromRaw(Synth::convertExprToRaw(this).(Raw::Expr).getType())
    }

    /**
     * Gets the type of this expression, if it exists.
     */
    final Type getType() {
      exists(Type immediate |
        immediate = this.getImmediateType() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Holds if `getType()` exists.
     */
    final predicate hasType() { exists(this.getType()) }
  }
}
