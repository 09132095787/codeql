// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.expr.OpaqueValueExpr

module Generated {
  class OpenExistentialExpr extends Synth::TOpenExistentialExpr, Expr {
    override string getAPrimaryQlClass() { result = "OpenExistentialExpr" }

    /**
     * Gets the sub expr.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Expr getImmediateSubExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertOpenExistentialExprToRaw(this)
              .(Raw::OpenExistentialExpr)
              .getSubExpr())
    }

    /**
     * Gets the sub expr.
     */
    final Expr getSubExpr() { result = getImmediateSubExpr().resolve() }

    /**
     * Gets the existential.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Expr getImmediateExistential() {
      result =
        Synth::convertExprFromRaw(Synth::convertOpenExistentialExprToRaw(this)
              .(Raw::OpenExistentialExpr)
              .getExistential())
    }

    /**
     * Gets the existential.
     */
    final Expr getExistential() { result = getImmediateExistential().resolve() }

    /**
     * Gets the opaque expr.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    OpaqueValueExpr getImmediateOpaqueExpr() {
      result =
        Synth::convertOpaqueValueExprFromRaw(Synth::convertOpenExistentialExprToRaw(this)
              .(Raw::OpenExistentialExpr)
              .getOpaqueExpr())
    }

    /**
     * Gets the opaque expr.
     */
    final OpaqueValueExpr getOpaqueExpr() { result = getImmediateOpaqueExpr().resolve() }
  }
}
