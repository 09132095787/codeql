// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.expr.OpaqueValueExpr

class OpenExistentialExprBase extends Synth::TOpenExistentialExpr, Expr {
  override string getAPrimaryQlClass() { result = "OpenExistentialExpr" }

  Expr getImmediateSubExpr() {
    result =
      Synth::fromRawExpr(Synth::toRawOpenExistentialExpr(this)
            .(Raw::OpenExistentialExpr)
            .getSubExpr())
  }

  final Expr getSubExpr() { result = getImmediateSubExpr().resolve() }

  Expr getImmediateExistential() {
    result =
      Synth::fromRawExpr(Synth::toRawOpenExistentialExpr(this)
            .(Raw::OpenExistentialExpr)
            .getExistential())
  }

  final Expr getExistential() { result = getImmediateExistential().resolve() }

  OpaqueValueExpr getImmediateOpaqueExpr() {
    result =
      Synth::fromRawOpaqueValueExpr(Synth::toRawOpenExistentialExpr(this)
            .(Raw::OpenExistentialExpr)
            .getOpaqueExpr())
  }

  final OpaqueValueExpr getOpaqueExpr() { result = getImmediateOpaqueExpr().resolve() }
}
