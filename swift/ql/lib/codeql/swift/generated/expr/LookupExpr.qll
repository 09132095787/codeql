// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.Decl
import codeql.swift.elements.expr.Expr

module Generated {
  class LookupExpr extends Synth::TLookupExpr, Expr {
    /**
     * Gets the base.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Expr getImmediateBase() {
      result =
        Synth::convertExprFromRaw(Synth::convertLookupExprToRaw(this).(Raw::LookupExpr).getBase())
    }

    /**
     * Gets the base.
     */
    final Expr getBase() { result = getImmediateBase().resolve() }

    /**
     * Gets the member, if it exists.
     * This includes nodes from the "hidden" AST and can be used to be overridden by subclasses.
     */
    Decl getImmediateMember() {
      result =
        Synth::convertDeclFromRaw(Synth::convertLookupExprToRaw(this).(Raw::LookupExpr).getMember())
    }

    /**
     * Gets the member, if it exists.
     */
    final Decl getMember() { result = getImmediateMember().resolve() }

    /**
     * Holds if `getMember()` exists.
     */
    final predicate hasMember() { exists(getMember()) }
  }
}
