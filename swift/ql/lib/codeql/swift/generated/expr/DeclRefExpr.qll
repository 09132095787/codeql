// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.Decl
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.type.Type

module Generated {
  class DeclRefExpr extends Synth::TDeclRefExpr, Expr {
    override string getAPrimaryQlClass() { result = "DeclRefExpr" }

    /**
     * Gets the decl.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Decl getImmediateDecl() {
      result =
        Synth::convertDeclFromRaw(Synth::convertDeclRefExprToRaw(this).(Raw::DeclRefExpr).getDecl())
    }

    /**
     * Gets the decl.
     */
    final Decl getDecl() { result = getImmediateDecl().resolve() }

    /**
     * Gets the `index`th replacement type.
     * This is taken from the "hidden" AST and should only be used to be overridden by classes.
     */
    Type getImmediateReplacementType(int index) {
      result =
        Synth::convertTypeFromRaw(Synth::convertDeclRefExprToRaw(this)
              .(Raw::DeclRefExpr)
              .getReplacementType(index))
    }

    /**
     * Gets the `index`th replacement type.
     */
    final Type getReplacementType(int index) {
      result = getImmediateReplacementType(index).resolve()
    }

    /**
     * Gets any of the replacement types.
     */
    final Type getAReplacementType() { result = getReplacementType(_) }

    /**
     * Gets the number of replacement types.
     */
    final int getNumberOfReplacementTypes() { result = count(getAReplacementType()) }

    predicate hasDirectToStorageSemantics() {
      Synth::convertDeclRefExprToRaw(this).(Raw::DeclRefExpr).hasDirectToStorageSemantics()
    }

    predicate hasDirectToImplementationSemantics() {
      Synth::convertDeclRefExprToRaw(this).(Raw::DeclRefExpr).hasDirectToImplementationSemantics()
    }

    predicate hasOrdinarySemantics() {
      Synth::convertDeclRefExprToRaw(this).(Raw::DeclRefExpr).hasOrdinarySemantics()
    }
  }
}
