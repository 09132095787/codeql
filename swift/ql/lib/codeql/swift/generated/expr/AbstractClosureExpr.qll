// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.Callable
import codeql.swift.elements.decl.CapturedDecl
import codeql.swift.elements.expr.Expr

module Generated {
  class AbstractClosureExpr extends Synth::TAbstractClosureExpr, Expr, Callable {
    /**
     * Gets the `index`th capture of this abstract closure expression (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    CapturedDecl getImmediateCapture(int index) {
      result =
        Synth::convertCapturedDeclFromRaw(Synth::convertAbstractClosureExprToRaw(this)
              .(Raw::AbstractClosureExpr)
              .getCapture(index))
    }

    /**
     * Gets the `index`th capture of this abstract closure expression (0-based).
     */
    final CapturedDecl getCapture(int index) { result = getImmediateCapture(index).resolve() }

    /**
     * Gets any of the captures of this abstract closure expression.
     */
    final CapturedDecl getACapture() { result = getCapture(_) }

    /**
     * Gets the number of captures of this abstract closure expression.
     */
    final int getNumberOfCaptures() { result = count(int i | exists(getCapture(i))) }
  }
}
