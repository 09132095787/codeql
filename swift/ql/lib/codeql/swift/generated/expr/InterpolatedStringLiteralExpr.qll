// generated by codegen/codegen.py
private import codeql.swift.generated.IpaTypes
private import codeql.swift.generated.Db
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.expr.LiteralExpr
import codeql.swift.elements.expr.OpaqueValueExpr
import codeql.swift.elements.expr.TapExpr

class InterpolatedStringLiteralExprBase extends Ipa::TInterpolatedStringLiteralExpr, LiteralExpr {
  override string getAPrimaryQlClass() { result = "InterpolatedStringLiteralExpr" }

  OpaqueValueExpr getImmediateInterpolationExpr() {
    result =
      Ipa::fromDbInstance(Ipa::toDbInstance(this)
            .(Db::InterpolatedStringLiteralExpr)
            .getInterpolationExpr())
  }

  final OpaqueValueExpr getInterpolationExpr() {
    result = getImmediateInterpolationExpr().resolve()
  }

  final predicate hasInterpolationExpr() { exists(getInterpolationExpr()) }

  Expr getImmediateInterpolationCountExpr() {
    result =
      Ipa::fromDbInstance(Ipa::toDbInstance(this)
            .(Db::InterpolatedStringLiteralExpr)
            .getInterpolationCountExpr())
  }

  final Expr getInterpolationCountExpr() { result = getImmediateInterpolationCountExpr().resolve() }

  final predicate hasInterpolationCountExpr() { exists(getInterpolationCountExpr()) }

  Expr getImmediateLiteralCapacityExpr() {
    result =
      Ipa::fromDbInstance(Ipa::toDbInstance(this)
            .(Db::InterpolatedStringLiteralExpr)
            .getLiteralCapacityExpr())
  }

  final Expr getLiteralCapacityExpr() { result = getImmediateLiteralCapacityExpr().resolve() }

  final predicate hasLiteralCapacityExpr() { exists(getLiteralCapacityExpr()) }

  TapExpr getImmediateAppendingExpr() {
    result =
      Ipa::fromDbInstance(Ipa::toDbInstance(this)
            .(Db::InterpolatedStringLiteralExpr)
            .getAppendingExpr())
  }

  final TapExpr getAppendingExpr() { result = getImmediateAppendingExpr().resolve() }

  final predicate hasAppendingExpr() { exists(getAppendingExpr()) }
}
