<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>

<overview>
<p>Accessing paths controlled by users can allow an attacker to access unexpected resources. This 
can result in sensitive information being revealed or deleted, or an attacker being able to influence
behavior by modifying unexpected files.</p>

<p>Paths that are naively constructed from data controlled by a user may contain unexpected special characters,
such as "..". Such a path may potentially point to any directory on the file system.</p>
</overview>

<recommendation>

<p>Validate user input before using it to construct a file path. Ideally, follow these rules:</p>

<ul>
<li>Do not allow more than a single "." character.</li>
<li>Do not allow directory separators such as "/" or "\" (depending on the file system).</li>
<li>Do not rely on simply replacing problematic sequences such as "../". For example, after applying this filter to
".../...//" the resulting string would still be "../".</li>
<li>Ideally use a whitelist of known good patterns.</li>
</ul>

</recommendation>

<example>
<p>
In the first example, a file name is read from an HTTP request and then used to access a file.
However, a malicious response could include a file name that is an absolute path, such as
<code>"/Applications/(current_application)/Documents/sensitive.data"</code>.
</p>

<p>
In the second example, it appears that the user is restricted to opening a file within the
<code>"/Library/Caches"</code> home directory. However, a malicious response could contain a file name containing
special characters. For example, the string <code>"../../Documents/sensitive.data"</code> will result in the code
reading the file located at <code>"/Applications/(current_application)/Library/Caches/../../Documents/sensitive.data"</code>, 
which contains users' sensitive data. This file may then be made accesible to an attacker, giving them access to all this data.
</p>

<sample src="PathInjectionBad.swift" />

<p>
In the third example, the path used to access the file system is normalized <em>before</em> being checked against a
known prefix. This ensures that regardless of the user input, the resulting path is safe.
</p>

<sample src="PathInjectionGood.swift" />

</example>

<references>
<li>OWASP: <a href="https://owasp.org/www-community/attacks/Path_Traversal">Path Traversal</a>.</li>
</references>
</qhelp>
