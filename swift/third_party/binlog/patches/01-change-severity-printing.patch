diff --git a/include/binlog/Severity.hpp b/include/binlog/Severity.hpp
index b1c9a60..6deec29 100644
--- a/include/binlog/Severity.hpp
+++ b/include/binlog/Severity.hpp
@@ -18,18 +18,18 @@ enum class Severity : std::uint16_t
   no_logs  = 1 << 15, // For filtering, not to create events
 };

-inline mserialize::cx_string<4> severityToString(Severity severity)
+inline mserialize::cx_string<3> severityToString(Severity severity)
 {
   switch (severity)
   {
-    case Severity::trace:    return mserialize::cx_string<4>{"TRAC"};
-    case Severity::debug:    return mserialize::cx_string<4>{"DEBG"};
-    case Severity::info:     return mserialize::cx_string<4>{"INFO"};
-    case Severity::warning:  return mserialize::cx_string<4>{"WARN"};
-    case Severity::error:    return mserialize::cx_string<4>{"ERRO"};
-    case Severity::critical: return mserialize::cx_string<4>{"CRIT"};
-    case Severity::no_logs:  return mserialize::cx_string<4>{"NOLG"};
-    default:                 return mserialize::cx_string<4>{"UNKW"};
+    case Severity::trace:    return mserialize::cx_string<3>{"TRC"};
+    case Severity::debug:    return mserialize::cx_string<3>{"DBG"};
+    case Severity::info:     return mserialize::cx_string<3>{"INF"};
+    case Severity::warning:  return mserialize::cx_string<3>{"WRN"};
+    case Severity::error:    return mserialize::cx_string<3>{"ERR"};
+    case Severity::critical: return mserialize::cx_string<3>{"CRT"};
+    case Severity::no_logs:  return mserialize::cx_string<3>{"NOL"};
+    default:                 return mserialize::cx_string<3>{"UNK"};
   }
 }
