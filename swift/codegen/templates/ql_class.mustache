// generated by {{generator}}
private import codeql.swift.generated.IpaTypes
private import codeql.swift.generated.Db
{{#imports}}
import {{.}}
{{/imports}}

class {{name}}Base extends Cached::T{{name}}{{#bases}}, {{.}}{{/bases}} {
  {{#root}}
  string toString() { none() } // overridden by subclasses

  string getAPrimaryQlClass() { none() } // overridden by subclasses

  final string getPrimaryQlClasses() { result = concat(this.getAPrimaryQlClass(), ",") }

  {{name}}Base getResolveStep() { none() } // overridden by subclasses

  final {{name}}Base resolve() {
    not exists(getResolveStep()) and result = this
    or
    result = getResolveStep().resolve()
  }

  Db::Element asDbInstance() { none() }
  {{/root}}
  {{#final}}
  {{#has_db_id}}
  final override Db::{{name}} asDbInstance() { this = Cached::T{{name}}(result) }
  {{/has_db_id}}

  override string getAPrimaryQlClass() { result = "{{name}}" }
  {{/final}}
  {{#properties}}

  {{#type_is_class}}
  {{type}} getImmediate{{singular}}({{#is_repeated}}int index{{/is_repeated}}) {
    {{#has_db_id}}
    result = Cached::fromDbInstance(asDbInstance().(Db::{{name}}).{{getter}}({{#is_repeated}}index{{/is_repeated}}))
    {{/has_db_id}}
    {{^has_db_id}}
    none()
    {{/has_db_id}}
  }

  final {{type}} {{getter}}({{#is_repeated}}int index{{/is_repeated}}) {
    result = getImmediate{{singular}}({{#is_repeated}}index{{/is_repeated}}).resolve()
  }

  {{/type_is_class}}
  {{^type_is_class}}
  {{type}} {{getter}}({{#is_repeated}}int index{{/is_repeated}}) {
    {{#has_db_id}}
    {{^is_predicate}}result = {{/is_predicate}}asDbInstance().(Db::{{name}}).{{getter}}({{#is_repeated}}index{{/is_repeated}})
    {{/has_db_id}}
    {{^has_db_id}}
    none()
    {{/has_db_id}}
  }

  {{/type_is_class}}
  {{#is_optional}}
  final predicate has{{singular}}({{#is_repeated}}int index{{/is_repeated}}) {
    exists({{getter}}({{#is_repeated}}index{{/is_repeated}}))
  }
  {{/is_optional}}
  {{#is_repeated}}

  final {{type}} {{indefinite_getter}}() {
    result = {{getter}}(_)
  }
  {{^is_optional}}

  final int getNumberOf{{plural}}() {
    result = count({{indefinite_getter}}())
  }
  {{/is_optional}}
  {{/is_repeated}}
  {{/properties}}
}
