private import codeql.swift.generated.SynthConstructors
private import codeql.swift.generated.Raw

cached module Synth {
  cached newtype T{{root}} =
    {{#final_classes}}
    {{^first}}
    or
    {{/first}}
    {{#is_ipa}}
    T{{name}}({{#params}}{{^first}}, {{/first}}{{type}} {{param}}{{/params}}){{#has_params}} { construct{{name}}({{#params}}{{^first}}, {{/first}}{{param}}{{/params}}) }{{/has_params}}
    {{/is_ipa}}
    {{#is_db}}
    T{{name}}(Raw::{{name}} id){{#has_subtracted_ipa_types}} { {{#subtracted_ipa_types}}{{^first}} and {{/first}}not construct{{name}}(id){{/subtracted_ipa_types}} }{{/has_subtracted_ipa_types}}
    {{/is_db}}
    {{/final_classes}}

  {{#non_final_classes}}
  {{^root}}
  class T{{name}} = {{#derived}}{{^first}} or {{/first}}T{{name}}{{/derived}};
  {{/root}}
  {{/non_final_classes}}

  {{#final_classes}}
  cached T{{name}} fromRaw{{name}}(Raw::Element e) {
    {{^is_fresh_ipa}}
    result = T{{name}}(e)
    {{/is_fresh_ipa}}
    {{#is_fresh_ipa}}
    none()
    {{/is_fresh_ipa}}
  }
  {{/final_classes}}

  {{#non_final_classes}}
  cached T{{name}} fromRaw{{name}}(Raw::Element e) {
    {{#derived}}
    {{^first}}
    or
    {{/first}}
    result = fromRaw{{name}}(e)
    {{/derived}}
  }
  {{/non_final_classes}}

  {{#final_classes}}
  cached Raw::Element toRaw{{name}}(T{{name}} e) {
    {{^is_fresh_ipa}}
    e = T{{name}}(result)
    {{/is_fresh_ipa}}
    {{#is_fresh_ipa}}
    none()
    {{/is_fresh_ipa}}
  }
  {{/final_classes}}

  {{#non_final_classes}}
  cached Raw::Element toRaw{{name}}(T{{name}} e) {
    {{#derived}}
    {{^first}}
    or
    {{/first}}
    result = toRaw{{name}}(e)
    {{/derived}}
  }
  {{/non_final_classes}}
}
