// generated by {{generator}}
// clang-format off
#pragma once

#include <iostream>
#include <optional>
#include <vector>

#include "swift/extractor/trap/TrapLabel.h"
#include "swift/extractor/trap/TrapEntries.h"

namespace codeql {
{{#classes}}

struct {{name}}{{#final}} : Binding<{{name}}Tag>{{#bases}}, {{ref.name}}{{/bases}}{{/final}}{{^final}}{{#has_bases}}: {{#bases}}{{^first}}, {{/first}}{{ref.name}}{{/bases}}{{/has_bases}}{{/final}} {
  {{#fields}}
  {{type}} {{name}}{};
  {{/fields}}
  {{#final}}

  friend std::ostream& operator<<(std::ostream& out, const {{name}}& x) {
    x.emit(out);
    return out;
  }
  {{/final}}

 protected:
  void emit({{^final}}TrapLabel<{{name}}Tag> id, {{/final}}std::ostream& out) const {
    {{#bases}}
    {{ref.name}}::emit(id, out);
    {{/bases}}
    {{#trap_name}}
    out << {{.}}{id{{#single_fields}}, {{name}}{{/single_fields}}} << '\n';
    {{/trap_name}}
    {{#fields}}
    {{#is_optional}}
    if ({{name}}) out << {{trap_name}}{id, *{{name}}} << '\n';
    {{/is_optional}}
    {{#is_repeated}}
    for (auto i = 0u; i < {{name}}.size(); ++i) out << {{trap_name}}{id, i, {{name}}[i]};
    {{/is_repeated}}
    {{/fields}}
  }
};
{{/classes}}
}
