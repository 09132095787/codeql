// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for database/sql, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: database/sql (exports: ; functions: Open)

// Package sql is a stub of database/sql, generated by depstubber.
package sql

import (
	context "context"
	driver "database/sql/driver"
	reflect "reflect"
	time "time"
)

type ColumnType struct{}

func (_ *ColumnType) DatabaseTypeName() string {
	return ""
}

func (_ *ColumnType) DecimalSize() (int64, int64, bool) {
	return 0, 0, false
}

func (_ *ColumnType) Length() (int64, bool) {
	return 0, false
}

func (_ *ColumnType) Name() string {
	return ""
}

func (_ *ColumnType) Nullable() (bool, bool) {
	return false, false
}

func (_ *ColumnType) ScanType() reflect.Type {
	return nil
}

type Conn struct{}

func (_ *Conn) BeginTx(_ context.Context, _ *TxOptions) (*Tx, error) {
	return nil, nil
}

func (_ *Conn) Close() error {
	return nil
}

func (_ *Conn) ExecContext(_ context.Context, _ string, _ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *Conn) PingContext(_ context.Context) error {
	return nil
}

func (_ *Conn) PrepareContext(_ context.Context, _ string) (*Stmt, error) {
	return nil, nil
}

func (_ *Conn) QueryContext(_ context.Context, _ string, _ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Conn) QueryRowContext(_ context.Context, _ string, _ ...interface{}) *Row {
	return nil
}

func (_ *Conn) Raw(_ func(interface{}) error) error {
	return nil
}

type DB struct{}

func (_ *DB) Begin() (*Tx, error) {
	return nil, nil
}

func (_ *DB) BeginTx(_ context.Context, _ *TxOptions) (*Tx, error) {
	return nil, nil
}

func (_ *DB) Close() error {
	return nil
}

func (_ *DB) Conn(_ context.Context) (*Conn, error) {
	return nil, nil
}

func (_ *DB) Driver() driver.Driver {
	return nil
}

func (_ *DB) Exec(_ string, _ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *DB) ExecContext(_ context.Context, _ string, _ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *DB) Ping() error {
	return nil
}

func (_ *DB) PingContext(_ context.Context) error {
	return nil
}

func (_ *DB) Prepare(_ string) (*Stmt, error) {
	return nil, nil
}

func (_ *DB) PrepareContext(_ context.Context, _ string) (*Stmt, error) {
	return nil, nil
}

func (_ *DB) Query(_ string, _ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *DB) QueryContext(_ context.Context, _ string, _ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *DB) QueryRow(_ string, _ ...interface{}) *Row {
	return nil
}

func (_ *DB) QueryRowContext(_ context.Context, _ string, _ ...interface{}) *Row {
	return nil
}

func (_ *DB) SetConnMaxIdleTime(_ time.Duration) {}

func (_ *DB) SetConnMaxLifetime(_ time.Duration) {}

func (_ *DB) SetMaxIdleConns(_ int) {}

func (_ *DB) SetMaxOpenConns(_ int) {}

func (_ *DB) Stats() DBStats {
	return DBStats{}
}

type DBStats struct {
	MaxOpenConnections int
	OpenConnections    int
	InUse              int
	Idle               int
	WaitCount          int64
	WaitDuration       time.Duration
	MaxIdleClosed      int64
	MaxIdleTimeClosed  int64
	MaxLifetimeClosed  int64
}

type IsolationLevel int

func (_ IsolationLevel) String() string {
	return ""
}

func Open(_ string, _ string) (*DB, error) {
	return nil, nil
}

type Result interface {
	LastInsertId() (int64, error)
	RowsAffected() (int64, error)
}

type Row struct{}

func (_ *Row) Err() error {
	return nil
}

func (_ *Row) Scan(_ ...interface{}) error {
	return nil
}

type Rows struct{}

func (_ *Rows) Close() error {
	return nil
}

func (_ *Rows) ColumnTypes() ([]*ColumnType, error) {
	return nil, nil
}

func (_ *Rows) Columns() ([]string, error) {
	return nil, nil
}

func (_ *Rows) Err() error {
	return nil
}

func (_ *Rows) Next() bool {
	return false
}

func (_ *Rows) NextResultSet() bool {
	return false
}

func (_ *Rows) Scan(_ ...interface{}) error {
	return nil
}

type Stmt struct{}

func (_ *Stmt) Close() error {
	return nil
}

func (_ *Stmt) Exec(_ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *Stmt) ExecContext(_ context.Context, _ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *Stmt) Query(_ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Stmt) QueryContext(_ context.Context, _ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Stmt) QueryRow(_ ...interface{}) *Row {
	return nil
}

func (_ *Stmt) QueryRowContext(_ context.Context, _ ...interface{}) *Row {
	return nil
}

type Tx struct{}

func (_ *Tx) Commit() error {
	return nil
}

func (_ *Tx) Exec(_ string, _ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *Tx) ExecContext(_ context.Context, _ string, _ ...interface{}) (Result, error) {
	return nil, nil
}

func (_ *Tx) Prepare(_ string) (*Stmt, error) {
	return nil, nil
}

func (_ *Tx) PrepareContext(_ context.Context, _ string) (*Stmt, error) {
	return nil, nil
}

func (_ *Tx) Query(_ string, _ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Tx) QueryContext(_ context.Context, _ string, _ ...interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Tx) QueryRow(_ string, _ ...interface{}) *Row {
	return nil
}

func (_ *Tx) QueryRowContext(_ context.Context, _ string, _ ...interface{}) *Row {
	return nil
}

func (_ *Tx) Rollback() error {
	return nil
}

func (_ *Tx) Stmt(_ *Stmt) *Stmt {
	return nil
}

func (_ *Tx) StmtContext(_ context.Context, _ *Stmt) *Stmt {
	return nil
}

type TxOptions struct {
	Isolation IsolationLevel
	ReadOnly  bool
}
