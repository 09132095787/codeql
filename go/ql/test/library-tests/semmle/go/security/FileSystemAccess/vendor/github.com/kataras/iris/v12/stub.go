// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/kataras/iris/v12, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/kataras/iris/v12 (exports: Application; functions: New,Compression)

// Package iris is a stub of github.com/kataras/iris/v12, generated by depstubber.
package iris

import (
	context "context"
	io "io"
	http "net/http"
	time "time"
)

type Application struct {
	APIBuilder       interface{}
	Router           interface{}
	HTTPErrorHandler interface{}
	ContextPool      interface{}
	I18n             interface{}
	Validator        interface{}
	OnBuild          func() error
	Hosts            []interface{}
}

func (_ Application) AddRouteUnsafe(_ ...interface{}) error {
	return nil
}

func (_ Application) AddRouterWrapper(_ interface{}) {}

func (_ Application) AllowMethods(_ ...string) interface{} {
	return nil
}

func (_ Application) Any(_ string, _ ...interface{}) []interface{} {
	return nil
}

func (_ Application) BuildRouter(_ interface{}, _ interface{}, _ interface{}, _ bool) error {
	return nil
}

func (_ Application) ConfigureContainer(_ ...func(interface{})) interface{} {
	return nil
}

func (_ Application) Connect(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) CountHandlers() int {
	return 0
}

func (_ Application) CreateRoutes(_ []string, _ string, _ ...interface{}) []interface{} {
	return nil
}

func (_ Application) Delete(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) Done(_ ...interface{}) {}

func (_ Application) DoneGlobal(_ ...interface{}) {}

func (_ Application) Downgrade(_ http.HandlerFunc) {}

func (_ Application) Downgraded() bool {
	return false
}

func (_ Application) EnsureStaticBindings() interface{} {
	return nil
}

func (_ Application) FallbackView(_ interface{}) {}

func (_ Application) Favicon(_ string, _ ...string) interface{} {
	return nil
}

func (_ Application) FindClosestPaths(_ string, _ string, _ int) []string {
	return nil
}

func (_ Application) FireErrorCode(_ interface{}) {}

func (_ Application) Get(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) GetDefaultErrorMiddleware() interface{} {
	return nil
}

func (_ Application) GetRelPath() string {
	return ""
}

func (_ Application) GetRoute(_ string) interface{} {
	return nil
}

func (_ Application) GetRouteByPath(_ string) interface{} {
	return nil
}

func (_ Application) GetRouteReadOnly(_ string) interface{} {
	return nil
}

func (_ Application) GetRouteReadOnlyByPath(_ string) interface{} {
	return nil
}

func (_ Application) GetRouterFilters() map[interface{}]interface{} {
	return nil
}

func (_ Application) GetRoutes() []interface{} {
	return nil
}

func (_ Application) GetRoutesReadOnly() []interface{} {
	return nil
}

func (_ Application) Handle(_ string, _ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) HandleDir(_ string, _ interface{}, _ ...interface{}) []interface{} {
	return nil
}

func (_ Application) HandleFunc(_ string, _ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) HandleMany(_ string, _ string, _ ...interface{}) []interface{} {
	return nil
}

func (_ Application) Head(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) IsRoot() bool {
	return false
}

func (_ Application) Layout(_ string) interface{} {
	return nil
}

func (_ Application) Macros() interface{} {
	return nil
}

func (_ Application) Match(_ interface{}) bool {
	return false
}

func (_ Application) None(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) OnAnyErrorCode(_ ...interface{}) []interface{} {
	return nil
}

func (_ Application) OnErrorCode(_ int, _ ...interface{}) []interface{} {
	return nil
}

func (_ Application) Options(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) Party(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) PartyConfigure(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) PartyFunc(_ string, _ func(interface{})) interface{} {
	return nil
}

func (_ Application) Patch(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) Post(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) PrependRouterWrapper(_ interface{}) {}

func (_ Application) Properties() map[string]interface{} {
	return nil
}

func (_ Application) Put(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) RefreshRouter() error {
	return nil
}

func (_ Application) RegisterDependency(_ ...interface{}) {}

func (_ Application) RemoveHandler(_ ...interface{}) interface{} {
	return nil
}

func (_ Application) RemoveRoute(_ string) bool {
	return false
}

func (_ Application) Reset() interface{} {
	return nil
}

func (_ Application) ResetRouterFilters() interface{} {
	return nil
}

func (_ Application) RouteExists(_ interface{}, _ string, _ string) bool {
	return false
}

func (_ Application) ServeHTTP(_ http.ResponseWriter, _ *http.Request) {}

func (_ Application) ServeHTTPC(_ interface{}) {}

func (_ Application) SetExecutionRules(_ interface{}) interface{} {
	return nil
}

func (_ Application) SetPartyMatcher(_ interface{}) {}

func (_ Application) SetRegisterRule(_ interface{}) interface{} {
	return nil
}

func (_ Application) SetRoutesNoLog(_ bool) interface{} {
	return nil
}

func (_ Application) SetTimeoutHandler(_ time.Duration, _ string) {}

func (_ Application) StaticContent(_ string, _ string, _ []byte) interface{} {
	return nil
}

func (_ Application) Subdomain(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) Trace(_ string, _ ...interface{}) interface{} {
	return nil
}

func (_ Application) Use(_ ...interface{}) {}

func (_ Application) UseError(_ ...interface{}) {}

func (_ Application) UseFunc(_ ...interface{}) {}

func (_ Application) UseGlobal(_ ...interface{}) {}

func (_ Application) UseOnce(_ ...interface{}) {}

func (_ Application) UseRouter(_ ...interface{}) {}

func (_ Application) WildcardSubdomain(_ ...interface{}) interface{} {
	return nil
}

func (_ Application) WrapRouter(_ interface{}) {}

func (_ *Application) Build() error {
	return nil
}

func (_ *Application) ConfigurationReadOnly() interface{} {
	return nil
}

func (_ *Application) Configure(_ ...Configurator) *Application {
	return nil
}

func (_ *Application) ConfigureHost(_ ...interface{}) *Application {
	return nil
}

func (_ *Application) GetContextErrorHandler() interface{} {
	return nil
}

func (_ *Application) GetContextPool() interface{} {
	return nil
}

func (_ *Application) I18nReadOnly() interface{} {
	return nil
}

func (_ *Application) IsDebug() bool {
	return false
}

func (_ *Application) Listen(_ string, _ ...Configurator) error {
	return nil
}

func (_ *Application) Logger() interface{} {
	return nil
}

func (_ *Application) Minifier() interface{} {
	return nil
}

func (_ *Application) NewHost(_ *http.Server) interface{} {
	return nil
}

func (_ *Application) RegisterView(_ interface{}) {}

func (_ *Application) Run(_ Runner, _ ...Configurator) error {
	return nil
}

func (_ *Application) SetContextErrorHandler(_ interface{}) *Application {
	return nil
}

func (_ *Application) SetName(_ string) *Application {
	return nil
}

func (_ *Application) Shutdown(_ context.Context) error {
	return nil
}

func (_ *Application) String() string {
	return ""
}

func (_ *Application) SubdomainRedirect(_ interface{}, _ interface{}) interface{} {
	return nil
}

func (_ *Application) Validate(_ interface{}) error {
	return nil
}

func (_ *Application) View(_ io.Writer, _ string, _ string, _ interface{}) error {
	return nil
}

func (_ *Application) WWW() interface{} {
	return nil
}

func Compression(_ interface{}) {}

type Configurator func(*Application)

func New() *Application {
	return nil
}

type Runner func(*Application) error
