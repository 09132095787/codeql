// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/dgrijalva/jwt-go/v4, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/dgrijalva/jwt-go/v4 (exports: Parser,Token; functions: ParseECPrivateKeyFromPEM,ParseECPublicKeyFromPEM,ParseRSAPrivateKeyFromPEM,ParseRSAPrivateKeyFromPEMWithPassword,ParseRSAPublicKeyFromPEM)

// Package jwt is a stub of github.com/dgrijalva/jwt-go/v4, generated by depstubber.
package jwt

import (
	ecdsa "crypto/ecdsa"
	rsa "crypto/rsa"
	time "time"
)

type ClaimStrings []string

func (_ *ClaimStrings) UnmarshalJSON(_ []byte) error {
	return nil
}

type Claims interface {
	Valid(_ *ValidationHelper) error
}

type Keyfunc func(*Token) (interface{}, error)

func ParseECPrivateKeyFromPEM(_ []byte) (*ecdsa.PrivateKey, error) {
	return nil, nil
}

func ParseECPublicKeyFromPEM(_ []byte) (*ecdsa.PublicKey, error) {
	return nil, nil
}

func ParseRSAPrivateKeyFromPEM(_ []byte) (*rsa.PrivateKey, error) {
	return nil, nil
}

func ParseRSAPrivateKeyFromPEMWithPassword(_ []byte, _ string) (*rsa.PrivateKey, error) {
	return nil, nil
}

func ParseRSAPublicKeyFromPEM(_ []byte) (*rsa.PublicKey, error) {
	return nil, nil
}

type Parser struct {
	ValidationHelper *ValidationHelper
}

func (_ Parser) After(_ time.Time) bool {
	return false
}

func (_ Parser) Before(_ time.Time) bool {
	return false
}

func (_ Parser) ValidateAudience(_ ClaimStrings) error {
	return nil
}

func (_ Parser) ValidateAudienceAgainst(_ ClaimStrings, _ string) error {
	return nil
}

func (_ Parser) ValidateExpiresAt(_ *Time) error {
	return nil
}

func (_ Parser) ValidateIssuer(_ string) error {
	return nil
}

func (_ Parser) ValidateIssuerAgainst(_ string, _ string) error {
	return nil
}

func (_ Parser) ValidateNotBefore(_ *Time) error {
	return nil
}

func (_ *Parser) Parse(_ string, _ Keyfunc) (*Token, error) {
	return nil, nil
}

func (_ *Parser) ParseUnverified(_ string, _ Claims) (*Token, []string, error) {
	return nil, nil, nil
}

func (_ *Parser) ParseWithClaims(_ string, _ Claims, _ Keyfunc) (*Token, error) {
	return nil, nil
}

type SigningMethod interface {
	Alg() string
	Sign(_ string, _ interface{}) (string, error)
	Verify(_ string, _ string, _ interface{}) error
}

type SigningOption func(interface{})

type Time struct {
	Time time.Time
}

func (_ Time) Add(_ time.Duration) time.Time {
	return time.Time{}
}

func (_ Time) AddDate(_ int, _ int, _ int) time.Time {
	return time.Time{}
}

func (_ Time) After(_ time.Time) bool {
	return false
}

func (_ Time) AppendFormat(_ []byte, _ string) []byte {
	return nil
}

func (_ Time) Before(_ time.Time) bool {
	return false
}

func (_ Time) Clock() (int, int, int) {
	return 0, 0, 0
}

func (_ Time) Compare(_ time.Time) int {
	return 0
}

func (_ Time) Date() (int, time.Month, int) {
	return 0, 0, 0
}

func (_ Time) Day() int {
	return 0
}

func (_ Time) Equal(_ time.Time) bool {
	return false
}

func (_ Time) Format(_ string) string {
	return ""
}

func (_ Time) GoString() string {
	return ""
}

func (_ Time) GobEncode() ([]byte, error) {
	return nil, nil
}

func (_ Time) Hour() int {
	return 0
}

func (_ Time) ISOWeek() (int, int) {
	return 0, 0
}

func (_ Time) In(_ *time.Location) time.Time {
	return time.Time{}
}

func (_ Time) IsDST() bool {
	return false
}

func (_ Time) IsZero() bool {
	return false
}

func (_ Time) Local() time.Time {
	return time.Time{}
}

func (_ Time) Location() *time.Location {
	return nil
}

func (_ Time) MarshalBinary() ([]byte, error) {
	return nil, nil
}

func (_ Time) MarshalText() ([]byte, error) {
	return nil, nil
}

func (_ Time) Minute() int {
	return 0
}

func (_ Time) Month() time.Month {
	return 0
}

func (_ Time) Nanosecond() int {
	return 0
}

func (_ Time) Round(_ time.Duration) time.Time {
	return time.Time{}
}

func (_ Time) Second() int {
	return 0
}

func (_ Time) String() string {
	return ""
}

func (_ Time) Sub(_ time.Time) time.Duration {
	return 0
}

func (_ Time) Truncate(_ time.Duration) time.Time {
	return time.Time{}
}

func (_ Time) UTC() time.Time {
	return time.Time{}
}

func (_ Time) Unix() int64 {
	return 0
}

func (_ Time) UnixMicro() int64 {
	return 0
}

func (_ Time) UnixMilli() int64 {
	return 0
}

func (_ Time) UnixNano() int64 {
	return 0
}

func (_ Time) Weekday() time.Weekday {
	return 0
}

func (_ Time) Year() int {
	return 0
}

func (_ Time) YearDay() int {
	return 0
}

func (_ Time) Zone() (string, int) {
	return "", 0
}

func (_ Time) ZoneBounds() (time.Time, time.Time) {
	return time.Time{}, time.Time{}
}

func (_ *Time) GobDecode(_ []byte) error {
	return nil
}

func (_ *Time) MarshalJSON() ([]byte, error) {
	return nil, nil
}

func (_ *Time) UnmarshalBinary(_ []byte) error {
	return nil
}

func (_ *Time) UnmarshalJSON(_ []byte) error {
	return nil
}

func (_ *Time) UnmarshalText(_ []byte) error {
	return nil
}

type Token struct {
	Raw       string
	Method    SigningMethod
	Header    map[string]interface{}
	Claims    Claims
	Signature string
	Valid     bool
}

func (_ *Token) SignedString(_ interface{}, _ ...SigningOption) (string, error) {
	return "", nil
}

func (_ *Token) SigningString(_ ...SigningOption) (string, error) {
	return "", nil
}

type ValidationHelper struct{}

func (_ *ValidationHelper) After(_ time.Time) bool {
	return false
}

func (_ *ValidationHelper) Before(_ time.Time) bool {
	return false
}

func (_ *ValidationHelper) ValidateAudience(_ ClaimStrings) error {
	return nil
}

func (_ *ValidationHelper) ValidateAudienceAgainst(_ ClaimStrings, _ string) error {
	return nil
}

func (_ *ValidationHelper) ValidateExpiresAt(_ *Time) error {
	return nil
}

func (_ *ValidationHelper) ValidateIssuer(_ string) error {
	return nil
}

func (_ *ValidationHelper) ValidateIssuerAgainst(_ string, _ string) error {
	return nil
}

func (_ *ValidationHelper) ValidateNotBefore(_ *Time) error {
	return nil
}
