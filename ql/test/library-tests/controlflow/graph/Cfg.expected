break_ensure.rb:
#    1| enter top-level
#-----|  -> m1

#    1| enter m1
#-----|  -> elements

#   13| enter m2
#-----|  -> elements

#   27| enter m3
#-----|  -> elements

#   44| enter m4
#-----|  -> elements

case.rb:
#    1| enter top-level
#-----|  -> if_in_case

#    1| enter if_in_case
#-----|  -> Case

cfg.rb:
#    1| enter top-level
#-----|  -> bar

#   15| enter BEGIN block
#-----|  -> puts

#   19| enter END block
#-----|  -> puts

#   25| enter block
#-----|  -> x

#   29| enter block
#-----|  -> BlockParameter

#   63| enter pattern
#-----|  -> a

#   69| enter print
#-----|  -> puts

#  101| enter parameters
#-----|  -> OptionalParameter

#  120| enter lambda
#-----|  -> x

#  142| enter print
#-----|  -> puts

#  149| enter method
#-----|  -> SplatParameter

#  153| enter two_parameters
#-----|  -> a

#  187| enter run_block
#-----|  -> Yield

#  191| enter block
#-----|  -> x

exit.rb:
#    1| enter top-level
#-----|  -> m1

#    1| enter m1
#-----|  -> x

#    8| enter m2
#-----|  -> x

heredoc.rb:
#    1| enter top-level
#-----|  -> double_heredoc

#    1| enter double_heredoc
#-----|  -> puts

ifs.rb:
#    1| enter top-level
#-----|  -> m1

#    1| enter m1
#-----|  -> x

#   11| enter m2
#-----|  -> b

#   18| enter m3
#-----|  -> x

#   28| enter m4
#-----|  -> b1

#   32| enter m5
#-----|  -> b1

#   36| enter conditional_method_def
#-----|  -> puts

#   40| enter constant_condition
#-----|  -> true

loops.rb:
#    1| enter top-level
#-----|  -> m1

#    1| enter m1
#-----|  -> x

#    8| enter m2
#-----|  -> x

#   24| enter m3
#-----|  -> 1

#   25| enter do block
#-----|  -> x

raise.rb:
#    1| enter top-level
#-----|  -> Class

#    7| enter m1
#-----|  -> x

#   14| enter m2
#-----|  -> b

#   25| enter m3
#-----|  -> b

#   36| enter m4
#-----|  -> b

#   47| enter m5
#-----|  -> b

#   57| enter m6
#-----|  -> b

#   68| enter m7
#-----|  -> x

#   79| enter m8
#-----|  -> x

#   94| enter m9
#-----|  -> x

#  121| enter m10
#-----|  -> OptionalParameter

#  128| enter m11
#-----|  -> b

#  142| enter m12
#-----|  -> b

#  150| enter m13
#-----|  -> Ensure

#  154| enter m14
#-----|  -> element

#  155| enter block
#-----|  -> elem

break_ensure.rb:
#    1| Method
#-----|  -> m2

#    1| m1
#-----|  -> Method

#    1| elements
#-----|  -> elements

#    2| For
#-----| non-empty -> element
#-----| empty -> Ensure

#    2| element
#-----|  -> element

#    2| elements
#-----|  -> For

#    3| If
#-----|  -> For

#    3| Binary
#-----| false -> If
#-----| true -> Break

#    3| element
#-----|  -> 0

#    3| 0
#-----|  -> Binary

#    4| Break
#-----| break -> Ensure

#    7| Ensure
#-----|  -> elements

#    8| If
#-----|  -> exit m1 (normal)

#    8| Call
#-----| false -> If
#-----| true -> puts

#    8| elements
#-----|  -> nil?

#    8| nil?
#-----|  -> Call

#    9| Call
#-----|  -> If

#    9| puts
#-----|  -> String

#    9| String
#-----|  -> Call

#   13| Method
#-----|  -> m3

#   13| m2
#-----|  -> Method

#   13| elements
#-----|  -> elements

#   14| For
#-----| non-empty -> element
#-----| empty -> exit m2 (normal)

#   14| element
#-----|  -> element

#   14| elements
#-----|  -> For

#   16| If
#-----|  -> Ensure

#   16| Binary
#-----| false -> If
#-----| true -> Break

#   16| element
#-----|  -> 0

#   16| 0
#-----|  -> Binary

#   17| Break
#-----| break -> [ensure: break] Ensure

#   19| Ensure
#-----|  -> elements

#   19| [ensure: break] Ensure
#-----|  -> [ensure: break] elements

#   20| If
#-----|  -> For

#   20| [ensure: break] If
#-----| break -> exit m2 (normal)

#   20| Call
#-----| false -> If
#-----| true -> puts

#   20| [ensure: break] Call
#-----| false -> [ensure: break] If
#-----| true -> [ensure: break] puts

#   20| elements
#-----|  -> nil?

#   20| [ensure: break] elements
#-----|  -> [ensure: break] nil?

#   20| nil?
#-----|  -> Call

#   20| [ensure: break] nil?
#-----|  -> [ensure: break] Call

#   21| Call
#-----|  -> If

#   21| [ensure: break] Call
#-----|  -> [ensure: break] If

#   21| puts
#-----|  -> String

#   21| [ensure: break] puts
#-----|  -> [ensure: break] String

#   21| String
#-----|  -> Call

#   21| [ensure: break] String
#-----|  -> [ensure: break] Call

#   27| Method
#-----|  -> m4

#   27| m3
#-----|  -> Method

#   27| elements
#-----|  -> elements

#   29| If
#-----|  -> Ensure

#   29| Call
#-----| false -> If
#-----| true -> Return

#   29| elements
#-----|  -> nil?

#   29| nil?
#-----|  -> Call

#   30| Return
#-----| return -> [ensure: return] Ensure

#   32| Ensure
#-----|  -> elements

#   32| [ensure: return] Ensure
#-----|  -> [ensure: return] elements

#   33| For
#-----| non-empty -> element
#-----| empty -> puts

#   33| [ensure: return] For
#-----| non-empty -> [ensure: return] element
#-----| return -> exit m3 (normal)

#   33| element
#-----|  -> x

#   33| [ensure: return] element
#-----|  -> [ensure: return] x

#   33| elements
#-----|  -> For

#   33| [ensure: return] elements
#-----|  -> [ensure: return] For

#   35| If
#-----|  -> For

#   35| [ensure: return] If
#-----|  -> [ensure: return] For

#   35| Binary
#-----| false -> If
#-----| true -> Break

#   35| [ensure: return] Binary
#-----| false -> [ensure: return] If
#-----| true -> [ensure: return] Break

#   35| x
#-----|  -> 0

#   35| [ensure: return] x
#-----|  -> [ensure: return] 0

#   35| 0
#-----|  -> Binary

#   35| [ensure: return] 0
#-----|  -> [ensure: return] Binary

#   36| Break
#-----| break -> puts

#   36| [ensure: return] Break
#-----| return -> exit m3 (normal)

#   41| Call
#-----|  -> exit m3 (normal)

#   41| puts
#-----|  -> String

#   41| String
#-----|  -> Call

#   44| Method
#-----|  -> exit top-level (normal)

#   44| m4
#-----|  -> Method

#   44| elements
#-----|  -> elements

#   45| For
#-----| non-empty -> element
#-----| empty -> exit m4 (normal)

#   45| element
#-----|  -> element

#   45| elements
#-----|  -> For

#   47| If
#-----|  -> Ensure

#   47| Binary
#-----| false -> If
#-----| true -> raise

#   47| element
#-----|  -> 1

#   47| 1
#-----|  -> Binary

#   48| Call
#-----| raise -> [ensure: raise] Ensure

#   48| raise
#-----|  -> String

#   48| String
#-----|  -> Call

#   50| Ensure
#-----|  -> element

#   50| [ensure: raise] Ensure
#-----|  -> [ensure: raise] element

#   51| If
#-----|  -> For

#   51| [ensure: raise] If
#-----| raise -> exit m4 (abnormal)

#   51| Binary
#-----| false -> If
#-----| true -> 10

#   51| [ensure: raise] Binary
#-----| false -> [ensure: raise] If
#-----| true -> [ensure: raise] 10

#   51| element
#-----|  -> 0

#   51| [ensure: raise] element
#-----|  -> [ensure: raise] 0

#   51| 0
#-----|  -> Binary

#   51| [ensure: raise] 0
#-----|  -> [ensure: raise] Binary

#   52| Break
#-----| break -> exit m4 (normal)

#   52| [ensure: raise] Break
#-----| break -> exit m4 (normal)

#   52| 10
#-----|  -> Break

#   52| [ensure: raise] 10
#-----|  -> [ensure: raise] Break

case.rb:
#    1| Method
#-----|  -> exit top-level (normal)

#    1| if_in_case
#-----|  -> Method

#    2| Case
#-----|  -> x1

#    2| x1
#-----|  -> When

#    3| When
#-----|  -> 1

#    3| 1
#-----| match -> x2
#-----| no-match -> When

#    3| ParenthesizedStatements
#-----|  -> exit if_in_case (normal)

#    3| If
#-----|  -> ParenthesizedStatements

#    3| x2
#-----| false -> If
#-----| true -> puts

#    3| Call
#-----|  -> If

#    3| puts
#-----|  -> String

#    3| String
#-----|  -> Call

#    4| When
#-----|  -> 2

#    4| 2
#-----| match -> puts
#-----| no-match -> exit if_in_case (normal)

#    4| Call
#-----|  -> exit if_in_case (normal)

#    4| puts
#-----|  -> String

#    4| String
#-----|  -> Call

cfg.rb:
#    1| Method
#-----|  -> Alias

#    1| bar
#-----|  -> Method

#    3| Alias
#-----|  -> foo

#    3| foo
#-----|  -> bar

#    3| bar
#-----|  -> 42

#    5| Assignment
#-----|  -> b

#    5| b
#-----|  -> Assignment

#    5| 42
#-----|  -> b

#    7| SymbolArray
#-----|  -> b

#    7| BareSymbol
#-----|  -> BareSymbol

#    7| Interpolation
#-----|  -> BareSymbol

#    7| b
#-----|  -> Interpolation

#    7| BareSymbol
#-----|  -> SymbolArray

#    9| StringArray
#-----|  -> puts

#    9| BareString
#-----|  -> BareString

#    9| Interpolation
#-----|  -> BareString

#    9| b
#-----|  -> Interpolation

#    9| BareString
#-----|  -> StringArray

#   12| Call
#-----|  -> BeginBlock

#   12| puts
#-----|  -> 4

#   12| 4
#-----|  -> Call

#   15| BeginBlock
#-----|  -> EndBlock

#   16| Call
#-----|  -> exit BEGIN block (normal)

#   16| puts
#-----|  -> String

#   16| String
#-----|  -> Call

#   19| EndBlock
#-----|  -> 41

#   20| Call
#-----|  -> exit END block (normal)

#   20| puts
#-----|  -> String

#   20| String
#-----|  -> Call

#   23| Binary
#-----|  -> 2

#   23| 41
#-----|  -> 1

#   23| 1
#-----|  -> Binary

#   25| Call
#-----|  -> puts

#   25| 2
#-----|  -> times

#   25| times
#-----|  -> Block

#   25| Block
#-----|  -> Call

#   25| x
#-----|  -> puts

#   25| Call
#-----|  -> exit block (normal)

#   25| puts
#-----|  -> x

#   25| x
#-----|  -> Call

#   27| Call
#-----|  -> Proc

#   27| puts
#-----|  -> :puts

#   27| BlockArgument
#-----|  -> Call

#   27| :puts
#-----|  -> BlockArgument

#   29| Call
#-----|  -> While

#   29| Proc
#-----|  -> new

#   29| new
#-----|  -> Block

#   29| Block
#-----|  -> Call

#   29| BlockParameter
#-----|  -> x

#   29| Call
#-----|  -> exit block (normal)

#   29| x
#-----|  -> call

#   29| call
#-----|  -> Call

#   31| While
#-----|  -> true

#   31| true
#-----| true -> 1

#   32| Break
#-----| break -> false

#   32| 1
#-----|  -> Break

#   35| If
#-----|  -> self

#   35| false
#-----| false -> If

#   39| Call
#-----|  -> Case

#   39| self
#-----|  -> puts

#   39| puts
#-----|  -> 42

#   39| 42
#-----|  -> Call

#   41| Case
#-----|  -> 10

#   41| 10
#-----|  -> When

#   42| When
#-----|  -> 1

#   42| 1
#-----| match -> puts
#-----| no-match -> When

#   42| Call
#-----|  -> Case

#   42| puts
#-----|  -> String

#   42| String
#-----|  -> Call

#   43| When
#-----|  -> 2

#   43| 2
#-----| no-match -> 3
#-----| match -> puts

#   43| 3
#-----| no-match -> 4
#-----| match -> puts

#   43| 4
#-----| match -> puts
#-----| no-match -> puts

#   43| Call
#-----|  -> Case

#   43| puts
#-----|  -> String

#   43| String
#-----|  -> Call

#   44| Call
#-----|  -> Case

#   44| puts
#-----|  -> String

#   44| String
#-----|  -> Call

#   47| Case
#-----|  -> When

#   48| When
#-----|  -> b

#   48| Binary
#-----| true -> puts
#-----| false -> When

#   48| b
#-----|  -> 1

#   48| 1
#-----|  -> Binary

#   48| Call
#-----|  -> String

#   48| puts
#-----|  -> String

#   48| String
#-----|  -> Call

#   49| When
#-----|  -> b

#   49| Binary
#-----| false -> b
#-----| true -> puts

#   49| b
#-----|  -> 0

#   49| 0
#-----|  -> Binary

#   49| Binary
#-----| true -> puts
#-----| false -> String

#   49| b
#-----|  -> 1

#   49| 1
#-----|  -> Binary

#   49| Call
#-----|  -> String

#   49| puts
#-----|  -> String

#   49| String
#-----|  -> Call

#   52| Assignment
#-----|  -> ?\x40

#   52| chained
#-----|  -> Assignment

#   52| String
#-----|  -> chained

#   52| String
#-----|  -> String

#   52| Interpolation
#-----|  -> String

#   52| chained
#-----|  -> Interpolation

#   52| String
#-----|  -> chained

#   54| Assignment
#-----|  -> Class

#   54| character
#-----|  -> Assignment

#   54| ?\x40
#-----|  -> character

#   58| Class
#-----|  -> Silly

#   58| Silly
#-----|  -> Object

#   58| Superclass
#-----|  -> 10-2i

#   58| Object
#-----|  -> Superclass

#   59| Assignment
#-----|  -> b

#   59| complex
#-----|  -> Assignment

#   59| 10-2i
#-----|  -> complex

#   60| Assignment
#-----|  -> String

#   60| conditional
#-----|  -> Assignment

#   60| Conditional
#-----|  -> conditional

#   60| Binary
#-----| true -> String
#-----| false -> String

#   60| b
#-----|  -> 10

#   60| 10
#-----|  -> Binary

#   60| String
#-----|  -> Conditional

#   60| String
#-----|  -> Conditional

#   61| Assignment
#-----|  -> 1

#   61| C
#-----|  -> Assignment

#   61| String
#-----|  -> C

#   62| Assignment
#-----|  -> pattern

#   62| DestructuredLeftAssignment
#-----|  -> Assignment

#   62| x
#-----|  -> y

#   62| DestructuredLeftAssignment
#-----|  -> DestructuredLeftAssignment

#   62| y
#-----|  -> z

#   62| z
#-----|  -> DestructuredLeftAssignment

#   62| Array
#-----|  -> x

#   62| 1
#-----|  -> 2

#   62| Array
#-----|  -> Array

#   62| 2
#-----|  -> 3

#   62| 3
#-----|  -> Array

#   63| Method
#-----|  -> 1

#   63| pattern
#-----|  -> Method

#   63| DestructuredParameter
#-----|  -> puts

#   63| a
#-----|  -> b

#   63| b
#-----|  -> DestructuredParameter

#   64| Call
#-----|  -> puts

#   64| puts
#-----|  -> a

#   64| a
#-----|  -> Call

#   65| Call
#-----|  -> exit pattern (normal)

#   65| puts
#-----|  -> b

#   65| b
#-----|  -> Call

#   67| Assignment
#-----|  -> puts

#   67| items
#-----|  -> Assignment

#   67| Array
#-----|  -> items

#   67| 1
#-----|  -> 2

#   67| 2
#-----|  -> 3

#   67| 3
#-----|  -> Array

#   68| Call
#-----|  -> print

#   68| puts
#-----|  -> items

#   68| ElementReference
#-----|  -> Call

#   68| items
#-----|  -> 2

#   68| 2
#-----|  -> ElementReference

#   69| Method
#-----|  -> 42

#   69| print
#-----|  -> Method

#   70| Call
#-----|  -> exit print (normal)

#   70| puts
#-----|  -> String

#   70| String
#-----|  -> Call

#   74| Assignment
#-----|  -> x

#   74| x
#-----|  -> Assignment

#   74| 42
#-----|  -> x

#   75| If
#-----|  -> ;

#   75| Binary
#-----| true -> 0
#-----| false -> x

#   75| x
#-----|  -> 0

#   75| 0
#-----|  -> Binary

#   75| 0
#-----|  -> If

#   75| Elsif
#-----|  -> If

#   75| Binary
#-----| true -> 10
#-----| false -> x

#   75| x
#-----|  -> 10

#   75| 10
#-----|  -> Binary

#   75| 10
#-----|  -> Elsif

#   75| x
#-----|  -> Elsif

#   78| ;
#-----|  -> puts

#   83| Call
#-----|  -> Ensure

#   83| puts
#-----|  -> String

#   83| String
#-----|  -> Call

#   84| Ensure
#-----|  -> puts

#   85| Call
#-----|  -> x

#   85| puts
#-----|  -> String

#   85| String
#-----|  -> Call

#   88| Assignment
#-----|  -> 1.4

#   88| escape
#-----|  -> Assignment

#   88| String
#-----|  -> escape

#   88| Interpolation
#-----|  -> String

#   88| x
#-----|  -> Interpolation

#   90| For
#-----| non-empty -> x
#-----| empty -> 42

#   90| x
#-----|  -> x

#   90| Array
#-----|  -> For

#   90| 1.4
#-----|  -> 2.5

#   90| 2.5
#-----|  -> 3.4e5

#   90| 3.4e5
#-----|  -> Array

#   91| If
#-----|  -> puts

#   91| Binary
#-----| false -> If
#-----| true -> Next

#   91| x
#-----|  -> 3

#   91| 3
#-----|  -> Binary

#   91| Next
#-----| next -> For

#   92| Call
#-----|  -> For

#   92| puts
#-----|  -> x

#   92| x
#-----|  -> Call

#   95| Assignment
#-----|  -> String

#   95| $global
#-----|  -> Assignment

#   95| 42
#-----|  -> $global

#   97| Assignment
#-----|  -> map1

#   97| map1
#-----|  -> Assignment

#   97| Hash
#-----|  -> map1

#   97| Pair
#-----|  -> String

#   97| String
#-----|  -> String

#   97| String
#-----|  -> Pair

#   97| Pair
#-----|  -> e

#   97| String
#-----|  -> String

#   97| String
#-----|  -> Pair

#   97| Pair
#-----|  -> Hash

#   97| e
#-----|  -> String

#   97| String
#-----|  -> Pair

#   98| Assignment
#-----|  -> parameters

#   98| map2
#-----|  -> Assignment

#   98| Hash
#-----|  -> map2

#   98| HashSplatArgument
#-----|  -> String

#   98| map1
#-----|  -> HashSplatArgument

#   98| Pair
#-----|  -> map1

#   98| String
#-----|  -> String

#   98| String
#-----|  -> Pair

#   98| HashSplatArgument
#-----|  -> Hash

#   98| map1
#-----|  -> HashSplatArgument

#  101| Method
#-----|  -> String

#  101| parameters
#-----|  -> Method

#  101| OptionalParameter
#-----| no-match -> 42
#-----| match -> KeywordParameter

#  101| 42
#-----|  -> KeywordParameter

#  101| KeywordParameter
#-----|  -> HashSplatParameter

#  101| HashSplatParameter
#-----|  -> puts

#  102| Call
#-----|  -> kwargs

#  102| puts
#-----|  -> value

#  102| value
#-----|  -> Call

#  103| Return
#-----| return -> exit parameters (normal)

#  103| ElementReference
#-----|  -> Return

#  103| kwargs
#-----|  -> key

#  103| key
#-----|  -> ElementReference

#  106| Assignment
#-----|  -> String

#  106| type
#-----|  -> Assignment

#  106| String
#-----|  -> type

#  107| Assignment
#-----|  -> puts

#  107| table
#-----|  -> Assignment

#  107| String
#-----|  -> table

#  108| Call
#-----|  -> b

#  108| puts
#-----|  -> <<SQL

#  108| ParenthesizedStatements
#-----|  -> Call

#  108| <<SQL
#-----|  -> table

#  108| HeredocBody
#-----|  -> ParenthesizedStatements

#  109| Interpolation
#-----|  -> type

#  109| table
#-----|  -> Interpolation

#  110| Interpolation
#-----|  -> HeredocBody

#  110| type
#-----|  -> Interpolation

#  113| IfModifier
#-----|  -> Class

#  113| Call
#-----|  -> IfModifier

#  113| puts
#-----|  -> String

#  113| String
#-----|  -> Call

#  113| Binary
#-----| false -> IfModifier
#-----| true -> puts

#  113| b
#-----|  -> 10

#  113| 10
#-----|  -> Binary

#  115| Class
#-----|  -> C

#  115| C
#-----|  -> 42

#  116| Assignment
#-----|  -> 10

#  116| @field
#-----|  -> Assignment

#  116| 42
#-----|  -> @field

#  117| Assignment
#-----|  -> Lambda

#  117| @@static_field
#-----|  -> Assignment

#  117| 10
#-----|  -> @@static_field

#  120| Assignment
#-----|  -> Module

#  120| swap
#-----|  -> Assignment

#  120| Lambda
#-----|  -> swap

#  120| DestructuredParameter
#-----|  -> y

#  120| x
#-----|  -> y

#  120| y
#-----|  -> DestructuredParameter

#  120| Array
#-----|  -> exit lambda (normal)

#  120| y
#-----|  -> x

#  120| x
#-----|  -> Array

#  122| Module
#-----|  -> M

#  122| M
#-----|  -> nil

#  123| Assignment
#-----|  -> 2

#  123| nothing
#-----|  -> Assignment

#  123| nil
#-----|  -> nothing

#  124| Assignment
#-----|  -> some

#  124| some
#-----|  -> Assignment

#  124| 2
#-----|  -> some

#  125| OperatorAssignment
#-----|  -> 2

#  125| some
#-----|  -> 10

#  125| 10
#-----|  -> OperatorAssignment

#  126| Assignment
#-----|  -> 0

#  126| last
#-----|  -> Assignment

#  126| ParenthesizedStatements
#-----|  -> last

#  126| 2
#-----|  -> 4

#  126| 4
#-----|  -> 7

#  126| 7
#-----|  -> ParenthesizedStatements

#  127| Assignment
#-----|  -> 1

#  127| range
#-----|  -> Assignment

#  127| Range
#-----|  -> range

#  127| 0
#-----|  -> 9

#  127| 9
#-----|  -> Range

#  128| Assignment
#-----|  -> range

#  128| half
#-----|  -> Assignment

#  128| Binary
#-----|  -> half

#  128| Binary
#-----|  -> 1

#  128| 1
#-----|  -> Rational

#  128| Rational
#-----|  -> Binary

#  128| Binary
#-----|  -> Binary

#  128| 1
#-----|  -> Rational

#  128| Rational
#-----|  -> Binary

#  129| Assignment
#-----|  -> 5

#  129| regex
#-----|  -> Assignment

#  129| Regex
#-----|  -> regex

#  129| Interpolation
#-----|  -> Regex

#  129| range
#-----|  -> Interpolation

#  130| Assignment
#-----|  -> RescueModifier

#  130| Constant
#-----|  -> Assignment

#  130| 5
#-----|  -> Constant

#  133| RescueModifier
#-----|  -> 1

#  133| Binary
#-----| raise -> puts
#-----|  -> 1

#  133| 1
#-----|  -> 0

#  133| 0
#-----|  -> Binary

#  133| Call
#-----|  -> 1

#  133| puts
#-----|  -> String

#  133| String
#-----|  -> Call

#  135| Assignment
#-----|  -> M

#  135| DestructuredLeftAssignment
#-----|  -> Assignment

#  135| RestAssignment
#-----|  -> last

#  135| init
#-----|  -> RestAssignment

#  135| last
#-----|  -> DestructuredLeftAssignment

#  135| 1
#-----|  -> 2

#  135| 2
#-----|  -> 3

#  135| 3
#-----|  -> init

#  137| ScopeResolution
#-----|  -> M

#  137| M
#-----|  -> Constant

#  137| Constant
#-----|  -> ScopeResolution

#  138| ScopeResolution
#-----|  -> SingletonClass

#  138| Call
#-----|  -> Constant

#  138| M
#-----|  -> itself

#  138| itself
#-----|  -> Call

#  138| Constant
#-----|  -> ScopeResolution

#  140| SingletonClass
#-----|  -> Silly

#  140| Call
#-----|  -> Setter

#  140| Silly
#-----|  -> itself

#  140| itself
#-----|  -> Call

#  141| Method
#-----|  -> print

#  141| Setter
#-----|  -> Method

#  142| Method
#-----|  -> Silly

#  142| print
#-----|  -> Method

#  143| Call
#-----|  -> puts

#  143| puts
#-----|  -> String

#  143| String
#-----|  -> Call

#  144| Call
#-----|  -> exit print (normal)

#  144| puts
#-----|  -> super

#  144| Call
#-----|  -> Call

#  144| super
#-----|  -> print

#  144| print
#-----|  -> Call

#  148| Assignment
#-----|  -> silly

#  148| silly
#-----|  -> Assignment

#  148| Call
#-----|  -> silly

#  148| Silly
#-----|  -> new

#  148| new
#-----|  -> Call

#  149| SingletonMethod
#-----|  -> two_parameters

#  149| silly
#-----|  -> method

#  149| method
#-----|  -> SingletonMethod

#  149| SplatParameter
#-----|  -> puts

#  150| Call
#-----|  -> exit method (normal)

#  150| puts
#-----|  -> x

#  150| x
#-----|  -> Call

#  153| Method
#-----|  -> two_parameters

#  153| two_parameters
#-----|  -> Method

#  153| a
#-----|  -> b

#  153| b
#-----|  -> exit two_parameters (normal)

#  155| Call
#-----|  -> __FILE__

#  155| two_parameters
#-----|  -> 1

#  155| SplatArgument
#-----|  -> Call

#  155| Array
#-----|  -> SplatArgument

#  155| 1
#-----|  -> 2

#  155| 2
#-----|  -> Array

#  157| Assignment
#-----|  -> :hello

#  157| scriptfile
#-----|  -> Assignment

#  157| Subshell
#-----|  -> scriptfile

#  157| Interpolation
#-----|  -> Subshell

#  157| __FILE__
#-----|  -> Interpolation

#  159| Assignment
#-----|  -> 12

#  159| symbol
#-----|  -> Assignment

#  159| :hello
#-----|  -> symbol

#  161| Assignment
#-----|  -> true

#  161| delimited_symbol
#-----|  -> Assignment

#  161| DelimitedSymbol
#-----|  -> delimited_symbol

#  161| Interpolation
#-----|  -> DelimitedSymbol

#  161| Binary
#-----|  -> Interpolation

#  161| 12
#-----|  -> 13

#  161| 13
#-----|  -> Binary

#  163| Assignment
#-----|  -> true

#  163| x
#-----|  -> Assignment

#  163| true
#-----|  -> x

#  164| Assignment
#-----|  -> 42

#  164| x
#-----|  -> Assignment

#  164| Unary
#-----|  -> x

#  164| true
#-----|  -> Unary

#  165| Assignment
#-----|  -> Undef

#  165| x
#-----|  -> Assignment

#  165| Unary
#-----|  -> x

#  165| 42
#-----|  -> Unary

#  167| Undef
#-----|  -> two_parameters

#  167| two_parameters
#-----|  -> x

#  169| Unless
#-----|  -> x

#  169| Binary
#-----| false -> puts
#-----| true -> puts

#  169| x
#-----|  -> 10

#  169| 10
#-----|  -> Binary

#  169| Call
#-----|  -> Unless

#  169| puts
#-----|  -> String

#  169| String
#-----|  -> Call

#  169| Call
#-----|  -> Unless

#  169| puts
#-----|  -> String

#  169| String
#-----|  -> Call

#  171| UnlessModifier
#-----|  -> Until

#  171| Call
#-----|  -> UnlessModifier

#  171| puts
#-----|  -> String

#  171| String
#-----|  -> Call

#  171| Binary
#-----| true -> UnlessModifier
#-----| false -> puts

#  171| x
#-----|  -> 0

#  171| 0
#-----|  -> Binary

#  173| Until
#-----|  -> x

#  173| Binary
#-----| false -> x
#-----| true -> 0

#  173| x
#-----|  -> 10

#  173| 10
#-----|  -> Binary

#  173| OperatorAssignment
#-----|  -> puts

#  173| x
#-----|  -> 10

#  173| 10
#-----|  -> OperatorAssignment

#  173| Call
#-----|  -> x

#  173| puts
#-----|  -> String

#  173| String
#-----|  -> Call

#  175| Assignment
#-----|  -> UntilModifier

#  175| i
#-----|  -> Assignment

#  175| 0
#-----|  -> i

#  176| UntilModifier
#-----|  -> i

#  176| ParenthesizedStatements
#-----|  -> i

#  176| Call
#-----|  -> i

#  176| puts
#-----|  -> String

#  176| String
#-----|  -> Call

#  176| OperatorAssignment
#-----|  -> ParenthesizedStatements

#  176| i
#-----|  -> 1

#  176| 1
#-----|  -> OperatorAssignment

#  176| Binary
#-----| false -> puts
#-----| true -> 0

#  176| i
#-----|  -> 10

#  176| 10
#-----|  -> Binary

#  178| Assignment
#-----|  -> While

#  178| x
#-----|  -> Assignment

#  178| 0
#-----|  -> x

#  179| While
#-----|  -> x

#  179| Binary
#-----| true -> x
#-----| false -> WhileModifier

#  179| x
#-----|  -> 10

#  179| 10
#-----|  -> Binary

#  180| OperatorAssignment
#-----|  -> x

#  180| x
#-----|  -> 1

#  180| 1
#-----|  -> OperatorAssignment

#  181| If
#-----|  -> puts

#  181| Binary
#-----| false -> If
#-----| true -> Redo

#  181| x
#-----|  -> 5

#  181| 5
#-----|  -> Binary

#  181| Redo
#-----| redo -> x

#  182| Call
#-----|  -> x

#  182| puts
#-----|  -> x

#  182| x
#-----|  -> Call

#  185| WhileModifier
#-----|  -> i

#  185| ParenthesizedStatements
#-----|  -> i

#  185| Call
#-----|  -> i

#  185| puts
#-----|  -> String

#  185| String
#-----|  -> Call

#  185| OperatorAssignment
#-----|  -> ParenthesizedStatements

#  185| i
#-----|  -> 1

#  185| 1
#-----|  -> OperatorAssignment

#  185| Binary
#-----| true -> puts
#-----| false -> run_block

#  185| i
#-----|  -> 0

#  185| 0
#-----|  -> Binary

#  187| Method
#-----|  -> run_block

#  187| run_block
#-----|  -> Method

#  188| Yield
#-----|  -> 42

#  188| 42

#  191| Call
#-----|  -> exit top-level (normal)

#  191| run_block
#-----|  -> Block

#  191| Block
#-----|  -> Call

#  191| x
#-----|  -> puts

#  191| Call
#-----|  -> exit block (normal)

#  191| puts
#-----|  -> x

#  191| x
#-----|  -> Call

exit.rb:
#    1| Method
#-----|  -> m2

#    1| m1
#-----|  -> Method

#    1| x
#-----|  -> x

#    2| If
#-----|  -> puts

#    2| Binary
#-----| false -> If
#-----| true -> exit

#    2| x
#-----|  -> 2

#    2| 2
#-----|  -> Binary

#    3| Call
#-----| exit -> exit m1 (abnormal)

#    3| exit
#-----|  -> 1

#    3| 1
#-----|  -> Call

#    5| Call
#-----|  -> exit m1 (normal)

#    5| puts
#-----|  -> String

#    5| String
#-----|  -> Call

#    8| Method
#-----|  -> exit top-level (normal)

#    8| m2
#-----|  -> Method

#    8| x
#-----|  -> x

#    9| If
#-----|  -> puts

#    9| Binary
#-----| false -> If
#-----| true -> abort

#    9| x
#-----|  -> 2

#    9| 2
#-----|  -> Binary

#   10| Call
#-----| exit -> exit m2 (abnormal)

#   10| abort
#-----|  -> String

#   10| String
#-----|  -> Call

#   12| Call
#-----|  -> exit m2 (normal)

#   12| puts
#-----|  -> String

#   12| String
#-----|  -> Call

heredoc.rb:
#    1| Method
#-----|  -> exit top-level (normal)

#    1| double_heredoc
#-----|  -> Method

#    2| Call
#-----|  -> exit double_heredoc (normal)

#    2| puts
#-----|  -> <<A

#    2| <<A
#-----|  -> HeredocBody

#    2| <<A
#-----|  -> HeredocBody

#    2| HeredocBody
#-----|  -> <<A

#    4| HeredocBody
#-----|  -> Call

ifs.rb:
#    1| Method
#-----|  -> m2

#    1| m1
#-----|  -> Method

#    1| x
#-----|  -> x

#    2| If
#-----|  -> exit m1 (normal)

#    2| Binary
#-----| true -> puts
#-----| false -> x

#    2| x
#-----|  -> 2

#    2| 2
#-----|  -> Binary

#    3| Call
#-----|  -> If

#    3| puts
#-----|  -> String

#    3| String
#-----|  -> Call

#    4| Elsif
#-----|  -> If

#    4| [false] Binary
#-----| false -> puts

#    4| [true] Binary
#-----| true -> puts

#    4| [false] Binary
#-----| false -> [false] Binary

#    4| [true] Binary
#-----| true -> x

#    4| Binary
#-----| false -> [false] Binary
#-----| true -> x

#    4| x
#-----|  -> 2

#    4| 2
#-----|  -> Binary

#    4| Binary
#-----| false -> [false] Binary
#-----| true -> [true] Binary

#    4| x
#-----|  -> 0

#    4| 0
#-----|  -> Binary

#    4| [false] Unary
#-----| false -> [false] Binary

#    4| [true] Unary
#-----| true -> [true] Binary

#    4| [false] ParenthesizedStatements
#-----| false -> [true] Unary

#    4| [true] ParenthesizedStatements
#-----| true -> [false] Unary

#    4| Binary
#-----| false -> [false] ParenthesizedStatements
#-----| true -> [true] ParenthesizedStatements

#    4| x
#-----|  -> 5

#    4| 5
#-----|  -> Binary

#    5| Call
#-----|  -> Elsif

#    5| puts
#-----|  -> String

#    5| String
#-----|  -> Call

#    7| Call
#-----|  -> Elsif

#    7| puts
#-----|  -> String

#    7| String
#-----|  -> Call

#   11| Method
#-----|  -> m3

#   11| m2
#-----|  -> Method

#   11| b
#-----|  -> b

#   12| If
#-----|  -> 1

#   12| b
#-----| false -> If
#-----| true -> 0

#   13| Return
#-----| return -> exit m2 (normal)

#   13| 0
#-----|  -> Return

#   15| Return
#-----| return -> exit m2 (normal)

#   15| 1
#-----|  -> Return

#   18| Method
#-----|  -> m4

#   18| m3
#-----|  -> Method

#   18| x
#-----|  -> x

#   19| If
#-----|  -> puts

#   19| Binary
#-----| false -> If
#-----| true -> x

#   19| x
#-----|  -> 0

#   19| 0
#-----|  -> Binary

#   20| Assignment
#-----|  -> x

#   20| x
#-----|  -> Assignment

#   20| Unary
#-----|  -> x

#   20| x
#-----|  -> Unary

#   21| If
#-----|  -> If

#   21| Binary
#-----| false -> If
#-----| true -> x

#   21| x
#-----|  -> 10

#   21| 10
#-----|  -> Binary

#   22| Assignment
#-----|  -> If

#   22| x
#-----|  -> Assignment

#   22| Binary
#-----|  -> x

#   22| x
#-----|  -> 1

#   22| 1
#-----|  -> Binary

#   25| Call
#-----|  -> exit m3 (normal)

#   25| puts
#-----|  -> x

#   25| x
#-----|  -> Call

#   28| Method
#-----|  -> m5

#   28| m4
#-----|  -> Method

#   28| b1
#-----|  -> b2

#   28| b2
#-----|  -> b3

#   28| b3
#-----|  -> b1

#   29| Return
#-----| return -> exit m4 (normal)

#   29| Conditional
#-----|  -> Return

#   29| [false] ParenthesizedStatements
#-----| false -> String

#   29| [true] ParenthesizedStatements
#-----| true -> String

#   29| [false] Conditional
#-----| false -> [false] ParenthesizedStatements

#   29| [true] Conditional
#-----| true -> [true] ParenthesizedStatements

#   29| b1
#-----| true -> b2
#-----| false -> b3

#   29| b2
#-----| false -> [false] Conditional
#-----| true -> [true] Conditional

#   29| b3
#-----| false -> [false] Conditional
#-----| true -> [true] Conditional

#   29| String
#-----|  -> Conditional

#   29| String
#-----|  -> Conditional

#   32| Method
#-----|  -> 1

#   32| m5
#-----|  -> Method

#   32| b1
#-----|  -> b2

#   32| b2
#-----|  -> b3

#   32| b3
#-----|  -> b4

#   32| b4
#-----|  -> b5

#   32| b5
#-----|  -> b1

#   33| If
#-----|  -> exit m5 (normal)

#   33| [false] ParenthesizedStatements
#-----| false -> String

#   33| [true] ParenthesizedStatements
#-----| true -> String

#   33| [false] If
#-----| false -> [false] ParenthesizedStatements

#   33| [true] If
#-----| true -> [true] ParenthesizedStatements

#   33| b1
#-----| true -> b2
#-----| false -> b3

#   33| b2
#-----| false -> [false] If
#-----| true -> [true] If

#   33| [false] Elsif
#-----| false -> [false] If

#   33| [true] Elsif
#-----| true -> [true] If

#   33| b3
#-----| true -> b4
#-----| false -> b5

#   33| b4
#-----| false -> [false] Elsif
#-----| true -> [true] Elsif

#   33| b5
#-----| false -> [false] Elsif
#-----| true -> [true] Elsif

#   33| String
#-----|  -> If

#   33| String
#-----|  -> If

#   36| UnlessModifier
#-----|  -> constant_condition

#   36| Method
#-----|  -> UnlessModifier

#   36| conditional_method_def
#-----|  -> Method

#   37| Call
#-----|  -> exit conditional_method_def (normal)

#   37| puts
#-----|  -> String

#   37| String
#-----|  -> Call

#   38| Binary
#-----| true -> UnlessModifier
#-----| false -> conditional_method_def

#   38| 1
#-----|  -> 2

#   38| 2
#-----|  -> Binary

#   40| Method
#-----|  -> exit top-level (normal)

#   40| constant_condition
#-----|  -> Method

#   41| If
#-----|  -> exit constant_condition (normal)

#   41| [false] Unary
#-----| false -> If

#   41| true
#-----| true -> [false] Unary

loops.rb:
#    1| Method
#-----|  -> m2

#    1| m1
#-----|  -> Method

#    1| x
#-----|  -> While

#    2| While
#-----|  -> x

#    2| Binary
#-----| true -> puts
#-----| false -> exit m1 (normal)

#    2| x
#-----|  -> 0

#    2| 0
#-----|  -> Binary

#    3| Call
#-----|  -> x

#    3| puts
#-----|  -> x

#    3| x
#-----|  -> Call

#    4| OperatorAssignment
#-----|  -> x

#    4| x
#-----|  -> 1

#    4| 1
#-----|  -> OperatorAssignment

#    8| Method
#-----|  -> m3

#    8| m2
#-----|  -> Method

#    8| x
#-----|  -> While

#    9| While
#-----|  -> x

#    9| Binary
#-----| true -> puts
#-----| false -> puts

#    9| x
#-----|  -> 0

#    9| 0
#-----|  -> Binary

#   10| Call
#-----|  -> x

#   10| puts
#-----|  -> x

#   10| x
#-----|  -> Call

#   11| OperatorAssignment
#-----|  -> x

#   11| x
#-----|  -> 1

#   11| 1
#-----|  -> OperatorAssignment

#   12| If
#-----|  -> puts

#   12| Binary
#-----| true -> Break
#-----| false -> x

#   12| x
#-----|  -> 100

#   12| 100
#-----|  -> Binary

#   13| Break
#-----| break -> puts

#   14| Elsif
#-----|  -> If

#   14| Binary
#-----| true -> Next
#-----| false -> x

#   14| x
#-----|  -> 50

#   14| 50
#-----|  -> Binary

#   15| Next
#-----| next -> x

#   16| Elsif
#-----|  -> Elsif

#   16| Binary
#-----| false -> Elsif
#-----| true -> Redo

#   16| x
#-----|  -> 10

#   16| 10
#-----|  -> Binary

#   17| Redo
#-----| redo -> puts

#   19| Call
#-----|  -> x

#   19| puts
#-----|  -> String

#   19| String
#-----|  -> Call

#   21| Call
#-----|  -> exit m2 (normal)

#   21| puts
#-----|  -> String

#   21| String
#-----|  -> Call

#   24| Method
#-----|  -> exit top-level (normal)

#   24| m3
#-----|  -> Method

#   25| Call
#-----|  -> exit m3 (normal)

#   25| Array
#-----|  -> each

#   25| 1
#-----|  -> 2

#   25| 2
#-----|  -> 3

#   25| 3
#-----|  -> Array

#   25| each
#-----|  -> DoBlock

#   25| DoBlock
#-----|  -> Call

#   25| x
#-----|  -> puts

#   26| Call
#-----|  -> exit do block (normal)

#   26| puts
#-----|  -> x

#   26| x
#-----|  -> Call

raise.rb:
#    1| Class
#-----|  -> ExceptionA

#    1| ExceptionA
#-----|  -> Exception

#    1| Superclass
#-----|  -> Class

#    1| Exception
#-----|  -> Superclass

#    4| Class
#-----|  -> ExceptionB

#    4| ExceptionB
#-----|  -> Exception

#    4| Superclass
#-----|  -> m1

#    4| Exception
#-----|  -> Superclass

#    7| Method
#-----|  -> m2

#    7| m1
#-----|  -> Method

#    7| x
#-----|  -> x

#    8| If
#-----|  -> puts

#    8| Binary
#-----| false -> If
#-----| true -> raise

#    8| x
#-----|  -> 2

#    8| 2
#-----|  -> Binary

#    9| Call
#-----| raise -> exit m1 (abnormal)

#    9| raise
#-----|  -> String

#    9| String
#-----|  -> Call

#   11| Call
#-----|  -> exit m1 (normal)

#   11| puts
#-----|  -> String

#   11| String
#-----|  -> Call

#   14| Method
#-----|  -> m3

#   14| m2
#-----|  -> Method

#   14| b
#-----|  -> b

#   16| If
#-----|  -> puts

#   16| b
#-----| false -> If
#-----| true -> raise

#   17| Call
#-----| raise -> Rescue

#   17| raise
#-----|  -> ExceptionA

#   17| ExceptionA
#-----|  -> Call

#   19| Rescue
#-----|  -> ExceptionA

#   19| ExceptionA
#-----| match -> puts
#-----| raise -> exit m2 (abnormal)

#   20| Call
#-----|  -> puts

#   20| puts
#-----|  -> String

#   20| String
#-----|  -> Call

#   22| Call
#-----|  -> exit m2 (normal)

#   22| puts
#-----|  -> String

#   22| String
#-----|  -> Call

#   25| Method
#-----|  -> m4

#   25| m3
#-----|  -> Method

#   25| b
#-----|  -> b

#   27| If
#-----|  -> puts

#   27| b
#-----| false -> If
#-----| true -> raise

#   28| Call
#-----| raise -> Rescue

#   28| raise
#-----|  -> ExceptionA

#   28| ExceptionA
#-----|  -> Call

#   30| Rescue
#-----|  -> puts

#   31| Call
#-----|  -> puts

#   31| puts
#-----|  -> String

#   31| String
#-----|  -> Call

#   33| Call
#-----|  -> exit m3 (normal)

#   33| puts
#-----|  -> String

#   33| String
#-----|  -> Call

#   36| Method
#-----|  -> m5

#   36| m4
#-----|  -> Method

#   36| b
#-----|  -> b

#   38| If
#-----|  -> puts

#   38| b
#-----| false -> If
#-----| true -> raise

#   39| Call
#-----| raise -> Rescue

#   39| raise
#-----|  -> ExceptionA

#   39| ExceptionA
#-----|  -> Call

#   41| Rescue
#-----|  -> e

#   41| e
#-----|  -> puts

#   42| Call
#-----|  -> puts

#   42| puts
#-----|  -> String

#   42| String
#-----|  -> Call

#   44| Call
#-----|  -> exit m4 (normal)

#   44| puts
#-----|  -> String

#   44| String
#-----|  -> Call

#   47| Method
#-----|  -> m6

#   47| m5
#-----|  -> Method

#   47| b
#-----|  -> b

#   49| If
#-----|  -> puts

#   49| b
#-----| false -> If
#-----| true -> raise

#   50| Call
#-----| raise -> Rescue

#   50| raise
#-----|  -> ExceptionA

#   50| ExceptionA
#-----|  -> Call

#   52| Rescue
#-----|  -> e

#   52| e
#-----|  -> puts

#   54| Call
#-----|  -> exit m5 (normal)

#   54| puts
#-----|  -> String

#   54| String
#-----|  -> Call

#   57| Method
#-----|  -> m7

#   57| m6
#-----|  -> Method

#   57| b
#-----|  -> b

#   59| If
#-----|  -> puts

#   59| b
#-----| false -> If
#-----| true -> raise

#   60| Call
#-----| raise -> Rescue

#   60| raise
#-----|  -> ExceptionA

#   60| ExceptionA
#-----|  -> Call

#   62| Rescue
#-----|  -> ExceptionA

#   62| ExceptionA
#-----| no-match -> ExceptionB
#-----| match -> e

#   62| ExceptionB
#-----| match -> e
#-----| raise -> exit m6 (abnormal)

#   62| e
#-----|  -> puts

#   63| Call
#-----|  -> puts

#   63| puts
#-----|  -> String

#   63| String
#-----|  -> Call

#   65| Call
#-----|  -> exit m6 (normal)

#   65| puts
#-----|  -> String

#   65| String
#-----|  -> Call

#   68| Method
#-----|  -> m8

#   68| m7
#-----|  -> Method

#   68| x
#-----|  -> x

#   69| If
#-----|  -> puts

#   69| Binary
#-----| true -> raise
#-----| false -> x

#   69| x
#-----|  -> 2

#   69| 2
#-----|  -> Binary

#   70| Call
#-----| raise -> [ensure: raise] Ensure

#   70| raise
#-----|  -> String

#   70| String
#-----|  -> Call

#   71| Elsif
#-----|  -> If

#   71| Binary
#-----| false -> Elsif
#-----| true -> String

#   71| x
#-----|  -> 0

#   71| 0
#-----|  -> Binary

#   72| Return
#-----| return -> [ensure: return] Ensure

#   72| String
#-----|  -> Return

#   74| Call
#-----|  -> Ensure

#   74| puts
#-----|  -> String

#   74| String
#-----|  -> Call

#   75| Ensure
#-----|  -> puts

#   75| [ensure: return] Ensure
#-----|  -> [ensure: return] puts

#   75| [ensure: raise] Ensure
#-----|  -> [ensure: raise] puts

#   76| Call
#-----|  -> exit m7 (normal)

#   76| [ensure: return] Call
#-----| return -> exit m7 (normal)

#   76| [ensure: raise] Call
#-----| raise -> exit m7 (abnormal)

#   76| puts
#-----|  -> String

#   76| [ensure: return] puts
#-----|  -> [ensure: return] String

#   76| [ensure: raise] puts
#-----|  -> [ensure: raise] String

#   76| String
#-----|  -> Call

#   76| [ensure: return] String
#-----|  -> [ensure: return] Call

#   76| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#   79| Method
#-----|  -> m9

#   79| m8
#-----|  -> Method

#   79| x
#-----|  -> puts

#   80| Call
#-----|  -> x

#   80| puts
#-----|  -> String

#   80| String
#-----|  -> Call

#   82| If
#-----|  -> puts

#   82| Binary
#-----| true -> raise
#-----| false -> x

#   82| x
#-----|  -> 2

#   82| 2
#-----|  -> Binary

#   83| Call
#-----| raise -> [ensure: raise] Ensure

#   83| raise
#-----|  -> String

#   83| String
#-----|  -> Call

#   84| Elsif
#-----|  -> If

#   84| Binary
#-----| false -> Elsif
#-----| true -> String

#   84| x
#-----|  -> 0

#   84| 0
#-----|  -> Binary

#   85| Return
#-----| return -> [ensure: return] Ensure

#   85| String
#-----|  -> Return

#   87| Call
#-----|  -> Ensure

#   87| puts
#-----|  -> String

#   87| String
#-----|  -> Call

#   88| Ensure
#-----|  -> puts

#   88| [ensure: return] Ensure
#-----|  -> [ensure: return] puts

#   88| [ensure: raise] Ensure
#-----|  -> [ensure: raise] puts

#   89| Call
#-----|  -> puts

#   89| [ensure: return] Call
#-----| return -> exit m8 (normal)

#   89| [ensure: raise] Call
#-----| raise -> exit m8 (abnormal)

#   89| puts
#-----|  -> String

#   89| [ensure: return] puts
#-----|  -> [ensure: return] String

#   89| [ensure: raise] puts
#-----|  -> [ensure: raise] String

#   89| String
#-----|  -> Call

#   89| [ensure: return] String
#-----|  -> [ensure: return] Call

#   89| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#   91| Call
#-----|  -> exit m8 (normal)

#   91| puts
#-----|  -> String

#   91| String
#-----|  -> Call

#   94| Method
#-----|  -> m10

#   94| m9
#-----|  -> Method

#   94| x
#-----|  -> b1

#   94| b1
#-----|  -> b2

#   94| b2
#-----|  -> puts

#   95| Call
#-----|  -> x

#   95| puts
#-----|  -> String

#   95| String
#-----|  -> Call

#   97| If
#-----|  -> puts

#   97| Binary
#-----| true -> raise
#-----| false -> x

#   97| x
#-----|  -> 2

#   97| 2
#-----|  -> Binary

#   98| Call
#-----| raise -> [ensure: raise] Ensure

#   98| raise
#-----|  -> String

#   98| String
#-----|  -> Call

#   99| Elsif
#-----|  -> If

#   99| Binary
#-----| false -> Elsif
#-----| true -> String

#   99| x
#-----|  -> 0

#   99| 0
#-----|  -> Binary

#  100| Return
#-----| return -> [ensure: return] Ensure

#  100| String
#-----|  -> Return

#  102| Call
#-----|  -> Ensure

#  102| puts
#-----|  -> String

#  102| String
#-----|  -> Call

#  103| Ensure
#-----|  -> puts

#  103| [ensure: return] Ensure
#-----|  -> [ensure: return] puts

#  103| [ensure: raise] Ensure
#-----|  -> [ensure: raise] puts

#  104| Call
#-----|  -> b1

#  104| [ensure: return] Call
#-----|  -> [ensure: return] b1

#  104| [ensure: raise] Call
#-----|  -> [ensure: raise] b1

#  104| puts
#-----|  -> String

#  104| [ensure: return] puts
#-----|  -> [ensure: return] String

#  104| [ensure: raise] puts
#-----|  -> [ensure: raise] String

#  104| String
#-----|  -> Call

#  104| [ensure: return] String
#-----|  -> [ensure: return] Call

#  104| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#  106| If
#-----|  -> Ensure

#  106| [ensure: return] If
#-----|  -> [ensure: return] Ensure

#  106| [ensure: raise] If
#-----|  -> [ensure: raise] Ensure

#  106| b1
#-----| false -> If
#-----| true -> raise

#  106| [ensure: return] b1
#-----| false -> [ensure: return] If
#-----| true -> [ensure: return] raise

#  106| [ensure: raise] b1
#-----| false -> [ensure: raise] If
#-----| true -> [ensure: raise] raise

#  107| Call
#-----| raise -> [ensure(1): raise] Ensure

#  107| [ensure: return] Call
#-----| raise -> [ensure: return, ensure(1): raise] Ensure

#  107| [ensure: raise] Call
#-----| raise -> [ensure: raise, ensure(1): raise] Ensure

#  107| raise
#-----|  -> String

#  107| [ensure: return] raise
#-----|  -> [ensure: return] String

#  107| [ensure: raise] raise
#-----|  -> [ensure: raise] String

#  107| String
#-----|  -> Call

#  107| [ensure: return] String
#-----|  -> [ensure: return] Call

#  107| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#  109| Ensure
#-----|  -> puts

#  109| [ensure(1): raise] Ensure
#-----|  -> [ensure(1): raise] puts

#  109| [ensure: return] Ensure
#-----|  -> [ensure: return] puts

#  109| [ensure: return, ensure(1): raise] Ensure
#-----|  -> [ensure: return, ensure(1): raise] puts

#  109| [ensure: raise] Ensure
#-----|  -> [ensure: raise] puts

#  109| [ensure: raise, ensure(1): raise] Ensure
#-----|  -> [ensure: raise, ensure(1): raise] puts

#  110| Call
#-----|  -> puts

#  110| [ensure(1): raise] Call
#-----| raise -> [ensure: raise] Ensure

#  110| [ensure: return] Call
#-----| return -> [ensure: return] Ensure

#  110| [ensure: return, ensure(1): raise] Call
#-----| raise -> [ensure: raise] Ensure

#  110| [ensure: raise] Call
#-----| raise -> [ensure: raise] Ensure

#  110| [ensure: raise, ensure(1): raise] Call
#-----| raise -> [ensure: raise] Ensure

#  110| puts
#-----|  -> String

#  110| [ensure(1): raise] puts
#-----|  -> [ensure(1): raise] String

#  110| [ensure: return] puts
#-----|  -> [ensure: return] String

#  110| [ensure: return, ensure(1): raise] puts
#-----|  -> [ensure: return, ensure(1): raise] String

#  110| [ensure: raise] puts
#-----|  -> [ensure: raise] String

#  110| [ensure: raise, ensure(1): raise] puts
#-----|  -> [ensure: raise, ensure(1): raise] String

#  110| String
#-----|  -> Call

#  110| [ensure(1): raise] String
#-----|  -> [ensure(1): raise] Call

#  110| [ensure: return] String
#-----|  -> [ensure: return] Call

#  110| [ensure: return, ensure(1): raise] String
#-----|  -> [ensure: return, ensure(1): raise] Call

#  110| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#  110| [ensure: raise, ensure(1): raise] String
#-----|  -> [ensure: raise, ensure(1): raise] Call

#  113| Call
#-----|  -> Ensure

#  113| puts
#-----|  -> String

#  113| String
#-----|  -> Call

#  114| Ensure
#-----|  -> puts

#  114| [ensure: return] Ensure
#-----|  -> [ensure: return] puts

#  114| [ensure: raise] Ensure
#-----|  -> [ensure: raise] puts

#  115| Call
#-----|  -> b2

#  115| [ensure: return] Call
#-----|  -> [ensure: return] b2

#  115| [ensure: raise] Call
#-----|  -> [ensure: raise] b2

#  115| puts
#-----|  -> String

#  115| [ensure: return] puts
#-----|  -> [ensure: return] String

#  115| [ensure: raise] puts
#-----|  -> [ensure: raise] String

#  115| String
#-----|  -> Call

#  115| [ensure: return] String
#-----|  -> [ensure: return] Call

#  115| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#  116| If
#-----|  -> exit m9 (normal)

#  116| [ensure: return] If
#-----| return -> exit m9 (normal)

#  116| [ensure: raise] If
#-----| raise -> exit m9 (abnormal)

#  116| b2
#-----| false -> If
#-----| true -> raise

#  116| [ensure: return] b2
#-----| false -> [ensure: return] If
#-----| true -> [ensure: return] raise

#  116| [ensure: raise] b2
#-----| false -> [ensure: raise] If
#-----| true -> [ensure: raise] raise

#  117| Call
#-----| raise -> exit m9 (abnormal)

#  117| [ensure: return] Call
#-----| raise -> exit m9 (abnormal)

#  117| [ensure: raise] Call
#-----| raise -> exit m9 (abnormal)

#  117| raise
#-----|  -> String

#  117| [ensure: return] raise
#-----|  -> [ensure: return] String

#  117| [ensure: raise] raise
#-----|  -> [ensure: raise] String

#  117| String
#-----|  -> Call

#  117| [ensure: return] String
#-----|  -> [ensure: return] Call

#  117| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#  121| Method
#-----|  -> m11

#  121| m10
#-----|  -> Method

#  121| OptionalParameter
#-----| no-match -> raise
#-----| match -> Ensure

#  121| Call
#-----| raise -> exit m10 (abnormal)

#  121| raise
#-----|  -> String

#  121| String
#-----|  -> Call

#  124| Ensure
#-----|  -> puts

#  125| Call
#-----|  -> exit m10 (normal)

#  125| puts
#-----|  -> String

#  125| String
#-----|  -> Call

#  128| Method
#-----|  -> m12

#  128| m11
#-----|  -> Method

#  128| b
#-----|  -> b

#  130| If
#-----|  -> Ensure

#  130| b
#-----| false -> If
#-----| true -> raise

#  131| Call
#-----| raise -> Rescue

#  131| raise
#-----|  -> ExceptionA

#  131| ExceptionA
#-----|  -> Call

#  133| Rescue
#-----|  -> ExceptionA

#  133| ExceptionA
#-----| no-match -> Rescue
#-----| match -> Ensure

#  134| Rescue
#-----|  -> ExceptionB

#  134| ExceptionB
#-----| match -> puts
#-----| raise -> [ensure: raise] Ensure

#  135| Call
#-----|  -> Ensure

#  135| puts
#-----|  -> String

#  135| String
#-----|  -> Call

#  136| Ensure
#-----|  -> puts

#  136| [ensure: raise] Ensure
#-----|  -> [ensure: raise] puts

#  137| Call
#-----|  -> puts

#  137| [ensure: raise] Call
#-----| raise -> exit m11 (abnormal)

#  137| puts
#-----|  -> String

#  137| [ensure: raise] puts
#-----|  -> [ensure: raise] String

#  137| String
#-----|  -> Call

#  137| [ensure: raise] String
#-----|  -> [ensure: raise] Call

#  139| Call
#-----|  -> exit m11 (normal)

#  139| puts
#-----|  -> String

#  139| String
#-----|  -> Call

#  142| Method
#-----|  -> m13

#  142| m12
#-----|  -> Method

#  142| b
#-----|  -> b

#  143| If
#-----|  -> Ensure

#  143| b
#-----| false -> If
#-----| true -> raise

#  144| Call
#-----| raise -> [ensure: raise] Ensure

#  144| raise
#-----|  -> String

#  144| String
#-----|  -> Call

#  146| Ensure
#-----|  -> 3

#  146| [ensure: raise] Ensure
#-----|  -> [ensure: raise] 3

#  147| Return
#-----| return -> exit m12 (normal)

#  147| [ensure: raise] Return
#-----| return -> exit m12 (normal)

#  147| 3
#-----|  -> Return

#  147| [ensure: raise] 3
#-----|  -> [ensure: raise] Return

#  150| Method
#-----|  -> m14

#  150| m13
#-----|  -> Method

#  151| Ensure
#-----|  -> exit m13 (normal)

#  154| Method
#-----|  -> exit top-level (normal)

#  154| m14
#-----|  -> Method

#  154| element
#-----|  -> element

#  155| Call
#-----|  -> exit m14 (normal)

#  155| element
#-----|  -> each

#  155| each
#-----|  -> Block

#  155| Block
#-----|  -> Call

#  155| elem
#-----|  -> element

#  155| IfModifier
#-----|  -> exit block (normal)

#  155| Call
#-----| raise -> exit block (abnormal)

#  155| raise
#-----|  -> String

#  155| String
#-----|  -> Call

#  155| Call
#-----| false -> IfModifier
#-----| true -> raise

#  155| element
#-----|  -> nil?

#  155| nil?
#-----|  -> Call

break_ensure.rb:
#    1| exit top-level

#    1| exit m1

#   13| exit m2

#   27| exit m3

#   44| exit m4

case.rb:
#    1| exit top-level

#    1| exit if_in_case

cfg.rb:
#    1| exit top-level

#   15| exit BEGIN block

#   19| exit END block

#   25| exit block

#   29| exit block

#   63| exit pattern

#   69| exit print

#  101| exit parameters

#  120| exit lambda

#  142| exit print

#  149| exit method

#  153| exit two_parameters

#  191| exit block

exit.rb:
#    1| exit top-level

#    1| exit m1

#    8| exit m2

heredoc.rb:
#    1| exit top-level

#    1| exit double_heredoc

ifs.rb:
#    1| exit top-level

#    1| exit m1

#   11| exit m2

#   18| exit m3

#   28| exit m4

#   32| exit m5

#   36| exit conditional_method_def

#   40| exit constant_condition

loops.rb:
#    1| exit top-level

#    1| exit m1

#    8| exit m2

#   24| exit m3

#   25| exit do block

raise.rb:
#    1| exit top-level

#    7| exit m1

#   14| exit m2

#   25| exit m3

#   36| exit m4

#   47| exit m5

#   57| exit m6

#   68| exit m7

#   79| exit m8

#   94| exit m9

#  121| exit m10

#  128| exit m11

#  142| exit m12

#  150| exit m13

#  154| exit m14

#  155| exit block

break_ensure.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    1| exit m1 (normal)
#-----|  -> exit m1

#   13| exit m2 (normal)
#-----|  -> exit m2

#   27| exit m3 (normal)
#-----|  -> exit m3

#   44| exit m4 (abnormal)
#-----|  -> exit m4

#   44| exit m4 (normal)
#-----|  -> exit m4

case.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    1| exit if_in_case (normal)
#-----|  -> exit if_in_case

cfg.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#   15| exit BEGIN block (normal)
#-----|  -> exit BEGIN block

#   19| exit END block (normal)
#-----|  -> exit END block

#   25| exit block (normal)
#-----|  -> exit block

#   29| exit block (normal)
#-----|  -> exit block

#   63| exit pattern (normal)
#-----|  -> exit pattern

#   69| exit print (normal)
#-----|  -> exit print

#  101| exit parameters (normal)
#-----|  -> exit parameters

#  120| exit lambda (normal)
#-----|  -> exit lambda

#  142| exit print (normal)
#-----|  -> exit print

#  149| exit method (normal)
#-----|  -> exit method

#  153| exit two_parameters (normal)
#-----|  -> exit two_parameters

#  191| exit block (normal)
#-----|  -> exit block

exit.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    1| exit m1 (abnormal)
#-----|  -> exit m1

#    1| exit m1 (normal)
#-----|  -> exit m1

#    8| exit m2 (abnormal)
#-----|  -> exit m2

#    8| exit m2 (normal)
#-----|  -> exit m2

heredoc.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    1| exit double_heredoc (normal)
#-----|  -> exit double_heredoc

ifs.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    1| exit m1 (normal)
#-----|  -> exit m1

#   11| exit m2 (normal)
#-----|  -> exit m2

#   18| exit m3 (normal)
#-----|  -> exit m3

#   28| exit m4 (normal)
#-----|  -> exit m4

#   32| exit m5 (normal)
#-----|  -> exit m5

#   36| exit conditional_method_def (normal)
#-----|  -> exit conditional_method_def

#   40| exit constant_condition (normal)
#-----|  -> exit constant_condition

loops.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    1| exit m1 (normal)
#-----|  -> exit m1

#    8| exit m2 (normal)
#-----|  -> exit m2

#   24| exit m3 (normal)
#-----|  -> exit m3

#   25| exit do block (normal)
#-----|  -> exit do block

raise.rb:
#    1| exit top-level (normal)
#-----|  -> exit top-level

#    7| exit m1 (abnormal)
#-----|  -> exit m1

#    7| exit m1 (normal)
#-----|  -> exit m1

#   14| exit m2 (abnormal)
#-----|  -> exit m2

#   14| exit m2 (normal)
#-----|  -> exit m2

#   25| exit m3 (normal)
#-----|  -> exit m3

#   36| exit m4 (normal)
#-----|  -> exit m4

#   47| exit m5 (normal)
#-----|  -> exit m5

#   57| exit m6 (abnormal)
#-----|  -> exit m6

#   57| exit m6 (normal)
#-----|  -> exit m6

#   68| exit m7 (abnormal)
#-----|  -> exit m7

#   68| exit m7 (normal)
#-----|  -> exit m7

#   79| exit m8 (abnormal)
#-----|  -> exit m8

#   79| exit m8 (normal)
#-----|  -> exit m8

#   94| exit m9 (abnormal)
#-----|  -> exit m9

#   94| exit m9 (normal)
#-----|  -> exit m9

#  121| exit m10 (abnormal)
#-----|  -> exit m10

#  121| exit m10 (normal)
#-----|  -> exit m10

#  128| exit m11 (abnormal)
#-----|  -> exit m11

#  128| exit m11 (normal)
#-----|  -> exit m11

#  142| exit m12 (normal)
#-----|  -> exit m12

#  150| exit m13 (normal)
#-----|  -> exit m13

#  154| exit m14 (normal)
#-----|  -> exit m14

#  155| exit block (abnormal)
#-----|  -> exit block

#  155| exit block (normal)
#-----|  -> exit block
