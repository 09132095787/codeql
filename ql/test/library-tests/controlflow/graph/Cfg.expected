break_ensure.rb:
#    1| enter break_ensure.rb
#-----|  -> m1

#    1| enter m1
#-----|  -> elements

#   13| enter m2
#-----|  -> elements

#   27| enter m3
#-----|  -> elements

#   44| enter m4
#-----|  -> elements

case.rb:
#    1| enter case.rb
#-----|  -> if_in_case

#    1| enter if_in_case
#-----|  -> case ...

cfg.rb:
#    1| enter cfg.rb
#-----|  -> bar

#   15| enter BEGIN { ... }
#-----|  -> puts

#   19| enter END { ... }
#-----|  -> puts

#   25| enter { ... }
#-----|  -> x

#   29| enter { ... }
#-----|  -> x

#   63| enter pattern
#-----|  -> a

#   69| enter print
#-----|  -> puts

#  101| enter parameters
#-----|  -> value

#  120| enter -> { ... }
#-----|  -> x

#  142| enter print
#-----|  -> puts

#  149| enter method
#-----|  -> x

#  153| enter two_parameters
#-----|  -> a

#  187| enter run_block
#-----|  -> call to yield

#  191| enter { ... }
#-----|  -> x

exit.rb:
#    1| enter exit.rb
#-----|  -> m1

#    1| enter m1
#-----|  -> x

#    8| enter m2
#-----|  -> x

heredoc.rb:
#    1| enter heredoc.rb
#-----|  -> double_heredoc

#    1| enter double_heredoc
#-----|  -> puts

ifs.rb:
#    1| enter ifs.rb
#-----|  -> m1

#    1| enter m1
#-----|  -> x

#   11| enter m2
#-----|  -> b

#   18| enter m3
#-----|  -> x

#   28| enter m4
#-----|  -> b1

#   32| enter m5
#-----|  -> b1

#   36| enter conditional_method_def
#-----|  -> puts

#   40| enter constant_condition
#-----|  -> true

loops.rb:
#    1| enter loops.rb
#-----|  -> m1

#    1| enter m1
#-----|  -> x

#    8| enter m2
#-----|  -> x

#   24| enter m3
#-----|  -> 1

#   25| enter do ... end
#-----|  -> x

raise.rb:
#    1| enter raise.rb
#-----|  -> ExceptionA

#    7| enter m1
#-----|  -> x

#   14| enter m2
#-----|  -> b

#   25| enter m3
#-----|  -> b

#   36| enter m4
#-----|  -> b

#   47| enter m5
#-----|  -> b

#   57| enter m6
#-----|  -> b

#   68| enter m7
#-----|  -> x

#   79| enter m8
#-----|  -> x

#   94| enter m9
#-----|  -> x

#  121| enter m10
#-----|  -> p

#  128| enter m11
#-----|  -> b

#  142| enter m12
#-----|  -> b

#  150| enter m13
#-----|  -> ensure ...

#  154| enter m14
#-----|  -> element

#  155| enter { ... }
#-----|  -> elem

break_ensure.rb:
#    1| m1
#-----|  -> m2

#    1| m1
#-----|  -> m1

#    1| elements
#-----|  -> elements

#    2| for ... in ...
#-----|  -> ensure ...

#    2| element
#-----|  -> element

#    2| In
#-----| empty -> for ... in ...
#-----| non-empty -> element

#    2| elements
#-----|  -> In

#    3| if ...
#-----|  -> In

#    3| ... > ...
#-----| false -> if ...
#-----| true -> break

#    3| element
#-----|  -> 0

#    3| 0
#-----|  -> ... > ...

#    4| break
#-----| break -> for ... in ...

#    7| ensure ...
#-----|  -> elements

#    8| if ...
#-----|  -> exit m1 (normal)

#    8| call to nil?
#-----| false -> if ...
#-----| true -> puts

#    8| elements
#-----|  -> nil?

#    8| nil?
#-----|  -> call to nil?

#    9| call to puts
#-----|  -> if ...

#    9| puts
#-----|  -> elements nil

#    9| elements nil
#-----|  -> call to puts

#   13| m2
#-----|  -> m3

#   13| m2
#-----|  -> m2

#   13| elements
#-----|  -> elements

#   14| for ... in ...
#-----|  -> exit m2 (normal)

#   14| element
#-----|  -> element

#   14| In
#-----| empty -> for ... in ...
#-----| non-empty -> element

#   14| elements
#-----|  -> In

#   16| if ...
#-----|  -> ensure ...

#   16| ... > ...
#-----| false -> if ...
#-----| true -> break

#   16| element
#-----|  -> 0

#   16| 0
#-----|  -> ... > ...

#   17| break
#-----| break -> [ensure: break] ensure ...

#   19| ensure ...
#-----|  -> elements

#   19| [ensure: break] ensure ...
#-----|  -> [ensure: break] elements

#   20| if ...
#-----|  -> In

#   20| [ensure: break] if ...
#-----| break -> for ... in ...

#   20| call to nil?
#-----| false -> if ...
#-----| true -> puts

#   20| [ensure: break] call to nil?
#-----| false -> [ensure: break] if ...
#-----| true -> [ensure: break] puts

#   20| elements
#-----|  -> nil?

#   20| [ensure: break] elements
#-----|  -> [ensure: break] nil?

#   20| nil?
#-----|  -> call to nil?

#   20| [ensure: break] nil?
#-----|  -> [ensure: break] call to nil?

#   21| call to puts
#-----|  -> if ...

#   21| [ensure: break] call to puts
#-----|  -> [ensure: break] if ...

#   21| puts
#-----|  -> elements nil

#   21| [ensure: break] puts
#-----|  -> [ensure: break] elements nil

#   21| elements nil
#-----|  -> call to puts

#   21| [ensure: break] elements nil
#-----|  -> [ensure: break] call to puts

#   27| m3
#-----|  -> m4

#   27| m3
#-----|  -> m3

#   27| elements
#-----|  -> elements

#   29| if ...
#-----|  -> ensure ...

#   29| call to nil?
#-----| false -> if ...
#-----| true -> return

#   29| elements
#-----|  -> nil?

#   29| nil?
#-----|  -> call to nil?

#   30| return
#-----| return -> [ensure: return] ensure ...

#   32| ensure ...
#-----|  -> elements

#   32| [ensure: return] ensure ...
#-----|  -> [ensure: return] elements

#   33| for ... in ...
#-----|  -> puts

#   33| [ensure: return] for ... in ...
#-----| return -> exit m3 (normal)

#   33| element
#-----|  -> call to x

#   33| [ensure: return] element
#-----|  -> [ensure: return] call to x

#   33| In
#-----| empty -> for ... in ...
#-----| non-empty -> element

#   33| [ensure: return] In
#-----| empty -> [ensure: return] for ... in ...
#-----| non-empty -> [ensure: return] element

#   33| elements
#-----|  -> In

#   33| [ensure: return] elements
#-----|  -> [ensure: return] In

#   35| if ...
#-----|  -> In

#   35| [ensure: return] if ...
#-----|  -> [ensure: return] In

#   35| ... > ...
#-----| false -> if ...
#-----| true -> break

#   35| [ensure: return] ... > ...
#-----| false -> [ensure: return] if ...
#-----| true -> [ensure: return] break

#   35| call to x
#-----|  -> 0

#   35| [ensure: return] call to x
#-----|  -> [ensure: return] 0

#   35| 0
#-----|  -> ... > ...

#   35| [ensure: return] 0
#-----|  -> [ensure: return] ... > ...

#   36| break
#-----| break -> for ... in ...

#   36| [ensure: return] break
#-----| break -> [ensure: return] for ... in ...

#   41| call to puts
#-----|  -> exit m3 (normal)

#   41| puts
#-----|  -> Done

#   41| Done
#-----|  -> call to puts

#   44| m4
#-----|  -> exit break_ensure.rb (normal)

#   44| m4
#-----|  -> m4

#   44| elements
#-----|  -> elements

#   45| for ... in ...
#-----|  -> exit m4 (normal)

#   45| element
#-----|  -> element

#   45| In
#-----| empty -> for ... in ...
#-----| non-empty -> element

#   45| elements
#-----|  -> In

#   47| if ...
#-----|  -> ensure ...

#   47| ... > ...
#-----| false -> if ...
#-----| true -> raise

#   47| element
#-----|  -> 1

#   47| 1
#-----|  -> ... > ...

#   48| call to raise
#-----| raise -> [ensure: raise] ensure ...

#   48| raise
#-----|  -> 

#   48| 
#-----|  -> call to raise

#   50| ensure ...
#-----|  -> element

#   50| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] element

#   51| if ...
#-----|  -> In

#   51| [ensure: raise] if ...
#-----| raise -> for ... in ...

#   51| ... > ...
#-----| false -> if ...
#-----| true -> 10

#   51| [ensure: raise] ... > ...
#-----| false -> [ensure: raise] if ...
#-----| true -> [ensure: raise] 10

#   51| element
#-----|  -> 0

#   51| [ensure: raise] element
#-----|  -> [ensure: raise] 0

#   51| 0
#-----|  -> ... > ...

#   51| [ensure: raise] 0
#-----|  -> [ensure: raise] ... > ...

#   52| break
#-----| break -> for ... in ...

#   52| [ensure: raise] break
#-----| break -> for ... in ...

#   52| 10
#-----|  -> break

#   52| [ensure: raise] 10
#-----|  -> [ensure: raise] break

case.rb:
#    1| if_in_case
#-----|  -> exit case.rb (normal)

#    1| if_in_case
#-----|  -> if_in_case

#    2| case ...
#-----|  -> call to x1

#    2| call to x1
#-----|  -> when ...

#    3| when ...
#-----|  -> 1

#    3| 1
#-----| match -> call to x2
#-----| no-match -> when ...

#    3| (if ...)
#-----|  -> exit if_in_case (normal)

#    3| if ...
#-----|  -> (if ...)

#    3| call to x2
#-----| false -> if ...
#-----| true -> puts

#    3| call to puts
#-----|  -> if ...

#    3| puts
#-----|  -> x2

#    3| x2
#-----|  -> call to puts

#    4| when ...
#-----|  -> 2

#    4| 2
#-----| match -> puts
#-----| no-match -> exit if_in_case (normal)

#    4| call to puts
#-----|  -> exit if_in_case (normal)

#    4| puts
#-----|  -> 2

#    4| 2
#-----|  -> call to puts

cfg.rb:
#    1| bar
#-----|  -> Alias

#    1| bar
#-----|  -> bar

#    3| Alias
#-----|  -> foo

#    3| foo
#-----|  -> bar

#    3| bar
#-----|  -> 42

#    5| ... = ...
#-----|  -> b

#    5| b
#-----|  -> ... = ...

#    5| 42
#-----|  -> b

#    7| SymbolArray
#-----|  -> b

#    7| :"one#{...}"
#-----|  -> :another

#    7| Interpolation
#-----|  -> :"one#{...}"

#    7| b
#-----|  -> Interpolation

#    7| :another
#-----|  -> SymbolArray

#    9| StringArray
#-----|  -> puts

#    9| BareString
#-----|  -> BareString

#    9| Interpolation
#-----|  -> BareString

#    9| b
#-----|  -> Interpolation

#    9| BareString
#-----|  -> StringArray

#   12| call to puts
#-----|  -> BEGIN { ... }

#   12| puts
#-----|  -> 4

#   12| 4
#-----|  -> call to puts

#   15| BEGIN { ... }
#-----|  -> END { ... }

#   16| call to puts
#-----|  -> exit BEGIN { ... } (normal)

#   16| puts
#-----|  -> hello

#   16| hello
#-----|  -> call to puts

#   19| END { ... }
#-----|  -> 41

#   20| call to puts
#-----|  -> exit END { ... } (normal)

#   20| puts
#-----|  -> world

#   20| world
#-----|  -> call to puts

#   23| ... + ...
#-----|  -> 2

#   23| 41
#-----|  -> 1

#   23| 1
#-----|  -> ... + ...

#   25| call to times
#-----|  -> puts

#   25| 2
#-----|  -> times

#   25| times
#-----|  -> { ... }

#   25| { ... }
#-----|  -> call to times

#   25| x
#-----|  -> puts

#   25| call to puts
#-----|  -> exit { ... } (normal)

#   25| puts
#-----|  -> x

#   25| x
#-----|  -> call to puts

#   27| call to puts
#-----|  -> Proc

#   27| puts
#-----|  -> :puts

#   27| &...
#-----|  -> call to puts

#   27| :puts
#-----|  -> &...

#   29| call to new
#-----|  -> true

#   29| Proc
#-----|  -> new

#   29| new
#-----|  -> { ... }

#   29| { ... }
#-----|  -> call to new

#   29| x
#-----|  -> x

#   29| call to call
#-----|  -> exit { ... } (normal)

#   29| x
#-----|  -> call

#   29| call
#-----|  -> call to call

#   31| while ...
#-----|  -> false

#   31| true
#-----| true -> 1

#   32| break
#-----| break -> while ...

#   32| 1
#-----|  -> break

#   35| if ...
#-----|  -> self

#   35| false
#-----| false -> if ...

#   39| call to puts
#-----|  -> case ...

#   39| self
#-----|  -> puts

#   39| puts
#-----|  -> 42

#   39| 42
#-----|  -> call to puts

#   41| case ...
#-----|  -> 10

#   41| 10
#-----|  -> when ...

#   42| when ...
#-----|  -> 1

#   42| 1
#-----| match -> puts
#-----| no-match -> when ...

#   42| call to puts
#-----|  -> case ...

#   42| puts
#-----|  -> one

#   42| one
#-----|  -> call to puts

#   43| when ...
#-----|  -> 2

#   43| 2
#-----| no-match -> 3
#-----| match -> puts

#   43| 3
#-----| no-match -> 4
#-----| match -> puts

#   43| 4
#-----| match -> puts
#-----| no-match -> puts

#   43| call to puts
#-----|  -> case ...

#   43| puts
#-----|  -> some

#   43| some
#-----|  -> call to puts

#   44| call to puts
#-----|  -> case ...

#   44| puts
#-----|  -> many

#   44| many
#-----|  -> call to puts

#   47| case ...
#-----|  -> when ...

#   48| when ...
#-----|  -> b

#   48| ... == ...
#-----| true -> puts
#-----| false -> when ...

#   48| b
#-----|  -> 1

#   48| 1
#-----|  -> ... == ...

#   48| call to puts
#-----|  -> a

#   48| puts
#-----|  -> one

#   48| one
#-----|  -> call to puts

#   49| when ...
#-----|  -> b

#   49| ... == ...
#-----| false -> b
#-----| true -> puts

#   49| b
#-----|  -> 0

#   49| 0
#-----|  -> ... == ...

#   49| ... > ...
#-----| true -> puts
#-----| false -> a

#   49| b
#-----|  -> 1

#   49| 1
#-----|  -> ... > ...

#   49| call to puts
#-----|  -> a

#   49| puts
#-----|  -> some

#   49| some
#-----|  -> call to puts

#   52| ... = ...
#-----|  -> ?\x40

#   52| chained
#-----|  -> ... = ...

#   52| a
#-----|  -> chained

#   52| #{...}
#-----|  -> string

#   52| Interpolation
#-----|  -> #{...}

#   52| chained
#-----|  -> Interpolation

#   52| string
#-----|  -> chained

#   54| ... = ...
#-----|  -> Silly

#   54| character
#-----|  -> ... = ...

#   54| ?\x40
#-----|  -> character

#   58| Silly
#-----|  -> Silly

#   58| Silly
#-----|  -> Object

#   58| Superclass
#-----|  -> 10-2i

#   58| Object
#-----|  -> Superclass

#   59| ... = ...
#-----|  -> call to b

#   59| complex
#-----|  -> ... = ...

#   59| 10-2i
#-----|  -> complex

#   60| ... = ...
#-----|  -> constant

#   60| conditional
#-----|  -> ... = ...

#   60| ... ? ... : ...
#-----|  -> conditional

#   60| ... < ...
#-----| true -> hello
#-----| false -> bye

#   60| call to b
#-----|  -> 10

#   60| 10
#-----|  -> ... < ...

#   60| hello
#-----|  -> ... ? ... : ...

#   60| bye
#-----|  -> ... ? ... : ...

#   61| ... = ...
#-----|  -> 1

#   61| C
#-----|  -> ... = ...

#   61| constant
#-----|  -> C

#   62| ... = ...
#-----|  -> pattern

#   62| (..., ...)
#-----|  -> ... = ...

#   62| x
#-----|  -> y

#   62| (..., ...)
#-----|  -> (..., ...)

#   62| y
#-----|  -> z

#   62| z
#-----|  -> (..., ...)

#   62| Array
#-----|  -> x

#   62| 1
#-----|  -> 2

#   62| Array
#-----|  -> Array

#   62| 2
#-----|  -> 3

#   62| 3
#-----|  -> Array

#   63| pattern
#-----|  -> 1

#   63| pattern
#-----|  -> pattern

#   63| (..., ...)
#-----|  -> puts

#   63| a
#-----|  -> b

#   63| b
#-----|  -> (..., ...)

#   64| call to puts
#-----|  -> puts

#   64| puts
#-----|  -> a

#   64| a
#-----|  -> call to puts

#   65| call to puts
#-----|  -> exit pattern (normal)

#   65| puts
#-----|  -> b

#   65| b
#-----|  -> call to puts

#   67| ... = ...
#-----|  -> puts

#   67| items
#-----|  -> ... = ...

#   67| Array
#-----|  -> items

#   67| 1
#-----|  -> 2

#   67| 2
#-----|  -> 3

#   67| 3
#-----|  -> Array

#   68| call to puts
#-----|  -> print

#   68| puts
#-----|  -> items

#   68| ...[...]
#-----|  -> call to puts

#   68| items
#-----|  -> 2

#   68| 2
#-----|  -> ...[...]

#   69| print
#-----|  -> 42

#   69| print
#-----|  -> print

#   70| call to puts
#-----|  -> exit print (normal)

#   70| puts
#-----|  -> silly

#   70| silly
#-----|  -> call to puts

#   74| ... = ...
#-----|  -> x

#   74| x
#-----|  -> ... = ...

#   74| 42
#-----|  -> x

#   75| if ...
#-----|  -> ;

#   75| ... < ...
#-----| true -> 0
#-----| false -> x

#   75| x
#-----|  -> 0

#   75| 0
#-----|  -> ... < ...

#   75| 0
#-----|  -> if ...

#   75| elsif ...
#-----|  -> if ...

#   75| ... > ...
#-----| true -> 10
#-----| false -> x

#   75| x
#-----|  -> 10

#   75| 10
#-----|  -> ... > ...

#   75| 10
#-----|  -> elsif ...

#   75| x
#-----|  -> elsif ...

#   78| ;
#-----|  -> puts

#   83| call to puts
#-----|  -> ensure ...

#   83| puts
#-----|  -> ok

#   83| ok
#-----|  -> call to puts

#   84| ensure ...
#-----|  -> puts

#   85| call to puts
#-----|  -> x

#   85| puts
#-----|  -> end

#   85| end
#-----|  -> call to puts

#   88| ... = ...
#-----|  -> 1.4

#   88| escape
#-----|  -> ... = ...

#   88| \u1234#{...}\n
#-----|  -> escape

#   88| Interpolation
#-----|  -> \u1234#{...}\n

#   88| x
#-----|  -> Interpolation

#   90| for ... in ...
#-----|  -> 42

#   90| x
#-----|  -> x

#   90| In
#-----| empty -> for ... in ...
#-----| non-empty -> x

#   90| Array
#-----|  -> In

#   90| 1.4
#-----|  -> 2.5

#   90| 2.5
#-----|  -> 3.4e5

#   90| 3.4e5
#-----|  -> Array

#   91| if ...
#-----|  -> puts

#   91| ... > ...
#-----| false -> if ...
#-----| true -> next

#   91| x
#-----|  -> 3

#   91| 3
#-----|  -> ... > ...

#   91| next
#-----| next -> In

#   92| call to puts
#-----|  -> In

#   92| puts
#-----|  -> x

#   92| x
#-----|  -> call to puts

#   95| ... = ...
#-----|  -> a

#   95| $global
#-----|  -> ... = ...

#   95| 42
#-----|  -> $global

#   97| ... = ...
#-----|  -> map1

#   97| map1
#-----|  -> ... = ...

#   97| Hash
#-----|  -> map1

#   97| Pair
#-----|  -> c

#   97| a
#-----|  -> b

#   97| b
#-----|  -> Pair

#   97| Pair
#-----|  -> :e

#   97| c
#-----|  -> d

#   97| d
#-----|  -> Pair

#   97| Pair
#-----|  -> Hash

#   97| :e
#-----|  -> f

#   97| f
#-----|  -> Pair

#   98| ... = ...
#-----|  -> parameters

#   98| map2
#-----|  -> ... = ...

#   98| Hash
#-----|  -> map2

#   98| **...
#-----|  -> x

#   98| map1
#-----|  -> **...

#   98| Pair
#-----|  -> map1

#   98| x
#-----|  -> y

#   98| y
#-----|  -> Pair

#   98| **...
#-----|  -> Hash

#   98| map1
#-----|  -> **...

#  101| parameters
#-----|  -> healthy

#  101| parameters
#-----|  -> parameters

#  101| value
#-----| no-match -> 42
#-----| match -> key

#  101| 42
#-----|  -> key

#  101| key
#-----|  -> kwargs

#  101| kwargs
#-----|  -> puts

#  102| call to puts
#-----|  -> kwargs

#  102| puts
#-----|  -> value

#  102| value
#-----|  -> call to puts

#  103| return
#-----| return -> exit parameters (normal)

#  103| ...[...]
#-----|  -> return

#  103| kwargs
#-----|  -> key

#  103| key
#-----|  -> ...[...]

#  106| ... = ...
#-----|  -> food

#  106| type
#-----|  -> ... = ...

#  106| healthy
#-----|  -> type

#  107| ... = ...
#-----|  -> puts

#  107| table
#-----|  -> ... = ...

#  107| food
#-----|  -> table

#  108| call to puts
#-----|  -> b

#  108| puts
#-----|  -> <<SQL

#  108| ()
#-----|  -> call to puts

#  108| <<SQL
#-----|  -> call to table

#  108| HeredocBody
#-----|  -> ()

#  109| Interpolation
#-----|  -> call to type

#  109| call to table
#-----|  -> Interpolation

#  110| Interpolation
#-----|  -> HeredocBody

#  110| call to type
#-----|  -> Interpolation

#  113| ... if ...
#-----|  -> C

#  113| call to puts
#-----|  -> ... if ...

#  113| puts
#-----|  -> hi

#  113| hi
#-----|  -> call to puts

#  113| ... > ...
#-----| false -> ... if ...
#-----| true -> puts

#  113| b
#-----|  -> 10

#  113| 10
#-----|  -> ... > ...

#  115| C
#-----|  -> C

#  115| C
#-----|  -> 42

#  116| ... = ...
#-----|  -> 10

#  116| @field
#-----|  -> ... = ...

#  116| 42
#-----|  -> @field

#  117| ... = ...
#-----|  -> -> { ... }

#  117| @@static_field
#-----|  -> ... = ...

#  117| 10
#-----|  -> @@static_field

#  120| ... = ...
#-----|  -> M

#  120| swap
#-----|  -> ... = ...

#  120| -> { ... }
#-----|  -> swap

#  120| (..., ...)
#-----|  -> y

#  120| x
#-----|  -> y

#  120| y
#-----|  -> (..., ...)

#  120| Array
#-----|  -> exit -> { ... } (normal)

#  120| y
#-----|  -> x

#  120| x
#-----|  -> Array

#  122| M
#-----|  -> M

#  122| M
#-----|  -> nil

#  123| ... = ...
#-----|  -> 2

#  123| nothing
#-----|  -> ... = ...

#  123| nil
#-----|  -> nothing

#  124| ... = ...
#-----|  -> some

#  124| some
#-----|  -> ... = ...

#  124| 2
#-----|  -> some

#  125| ... += ...
#-----|  -> 2

#  125| some
#-----|  -> 10

#  125| 10
#-----|  -> ... += ...

#  126| ... = ...
#-----|  -> 0

#  126| last
#-----|  -> ... = ...

#  126| (...; ...)
#-----|  -> last

#  126| 2
#-----|  -> 4

#  126| 4
#-----|  -> 7

#  126| 7
#-----|  -> (...; ...)

#  127| ... = ...
#-----|  -> 1

#  127| range
#-----|  -> ... = ...

#  127| Range
#-----|  -> range

#  127| 0
#-----|  -> 9

#  127| 9
#-----|  -> Range

#  128| ... = ...
#-----|  -> range

#  128| half
#-----|  -> ... = ...

#  128| ... + ...
#-----|  -> half

#  128| ... / ...
#-----|  -> 1

#  128| 1
#-----|  -> Rational

#  128| Rational
#-----|  -> ... / ...

#  128| ... / ...
#-----|  -> ... + ...

#  128| 1
#-----|  -> Rational

#  128| Rational
#-----|  -> ... / ...

#  129| ... = ...
#-----|  -> 5

#  129| regex
#-----|  -> ... = ...

#  129| hello\s+[#{...}]
#-----|  -> regex

#  129| Interpolation
#-----|  -> hello\s+[#{...}]

#  129| range
#-----|  -> Interpolation

#  130| ... = ...
#-----|  -> RescueModifier

#  130| Constant
#-----|  -> ... = ...

#  130| 5
#-----|  -> Constant

#  133| RescueModifier
#-----|  -> 1

#  133| ... / ...
#-----| raise -> puts
#-----|  -> 1

#  133| 1
#-----|  -> 0

#  133| 0
#-----|  -> ... / ...

#  133| call to puts
#-----|  -> 1

#  133| puts
#-----|  -> div by zero

#  133| div by zero
#-----|  -> call to puts

#  135| ... = ...
#-----|  -> M

#  135| (..., ...)
#-----|  -> ... = ...

#  135| RestAssignment
#-----|  -> last

#  135| init
#-----|  -> RestAssignment

#  135| last
#-----|  -> (..., ...)

#  135| 1
#-----|  -> 2

#  135| 2
#-----|  -> 3

#  135| 3
#-----|  -> init

#  137| Constant
#-----|  -> M

#  137| M
#-----|  -> Constant

#  137| Constant
#-----|  -> Constant

#  138| Constant
#-----|  -> class << ...

#  138| call to itself
#-----|  -> Constant

#  138| M
#-----|  -> itself

#  138| itself
#-----|  -> call to itself

#  138| Constant
#-----|  -> Constant

#  140| class << ...
#-----|  -> Silly

#  140| call to itself
#-----|  -> Setter

#  140| Silly
#-----|  -> itself

#  140| itself
#-----|  -> call to itself

#  141| setter=
#-----|  -> print

#  141| Setter
#-----|  -> setter=

#  142| print
#-----|  -> Silly

#  142| print
#-----|  -> print

#  143| call to puts
#-----|  -> puts

#  143| puts
#-----|  -> singleton

#  143| singleton
#-----|  -> call to puts

#  144| call to puts
#-----|  -> exit print (normal)

#  144| puts
#-----|  -> call to super

#  144| call to print
#-----|  -> call to puts

#  144| call to super
#-----|  -> print

#  144| print
#-----|  -> call to print

#  148| ... = ...
#-----|  -> silly

#  148| silly
#-----|  -> ... = ...

#  148| call to new
#-----|  -> silly

#  148| Silly
#-----|  -> new

#  148| new
#-----|  -> call to new

#  149| method
#-----|  -> two_parameters

#  149| silly
#-----|  -> method

#  149| method
#-----|  -> method

#  149| x
#-----|  -> puts

#  150| call to puts
#-----|  -> exit method (normal)

#  150| puts
#-----|  -> x

#  150| x
#-----|  -> call to puts

#  153| two_parameters
#-----|  -> two_parameters

#  153| two_parameters
#-----|  -> two_parameters

#  153| a
#-----|  -> b

#  153| b
#-----|  -> exit two_parameters (normal)

#  155| call to two_parameters
#-----|  -> call to __FILE__

#  155| two_parameters
#-----|  -> 1

#  155| *...
#-----|  -> call to two_parameters

#  155| Array
#-----|  -> *...

#  155| 1
#-----|  -> 2

#  155| 2
#-----|  -> Array

#  157| ... = ...
#-----|  -> :hello

#  157| scriptfile
#-----|  -> ... = ...

#  157| Subshell
#-----|  -> scriptfile

#  157| Interpolation
#-----|  -> Subshell

#  157| call to __FILE__
#-----|  -> Interpolation

#  159| ... = ...
#-----|  -> 12

#  159| symbol
#-----|  -> ... = ...

#  159| :hello
#-----|  -> symbol

#  161| ... = ...
#-----|  -> true

#  161| delimited_symbol
#-----|  -> ... = ...

#  161| :"goodbye-#{...}"
#-----|  -> delimited_symbol

#  161| Interpolation
#-----|  -> :"goodbye-#{...}"

#  161| ... + ...
#-----|  -> Interpolation

#  161| 12
#-----|  -> 13

#  161| 13
#-----|  -> ... + ...

#  163| ... = ...
#-----|  -> true

#  163| x
#-----|  -> ... = ...

#  163| true
#-----|  -> x

#  164| ... = ...
#-----|  -> 42

#  164| x
#-----|  -> ... = ...

#  164| ! ...
#-----|  -> x

#  164| true
#-----|  -> ! ...

#  165| ... = ...
#-----|  -> Undef

#  165| x
#-----|  -> ... = ...

#  165| - ...
#-----|  -> x

#  165| 42
#-----|  -> - ...

#  167| Undef
#-----|  -> two_parameters

#  167| two_parameters
#-----|  -> x

#  169| unless ...
#-----|  -> x

#  169| ... == ...
#-----| false -> puts
#-----| true -> puts

#  169| x
#-----|  -> 10

#  169| 10
#-----|  -> ... == ...

#  169| call to puts
#-----|  -> unless ...

#  169| puts
#-----|  -> hi

#  169| hi
#-----|  -> call to puts

#  169| call to puts
#-----|  -> unless ...

#  169| puts
#-----|  -> bye

#  169| bye
#-----|  -> call to puts

#  171| ... unless ...
#-----|  -> x

#  171| call to puts
#-----|  -> ... unless ...

#  171| puts
#-----|  -> hi

#  171| hi
#-----|  -> call to puts

#  171| ... == ...
#-----| true -> ... unless ...
#-----| false -> puts

#  171| x
#-----|  -> 0

#  171| 0
#-----|  -> ... == ...

#  173| until ...
#-----|  -> 0

#  173| ... > ...
#-----| true -> until ...
#-----| false -> x

#  173| x
#-----|  -> 10

#  173| 10
#-----|  -> ... > ...

#  173| ... += ...
#-----|  -> puts

#  173| x
#-----|  -> 10

#  173| 10
#-----|  -> ... += ...

#  173| call to puts
#-----|  -> x

#  173| puts
#-----|  -> hello

#  173| hello
#-----|  -> call to puts

#  175| ... = ...
#-----|  -> i

#  175| i
#-----|  -> ... = ...

#  175| 0
#-----|  -> i

#  176| ... until ...
#-----|  -> 0

#  176| (...; ...)
#-----|  -> i

#  176| call to puts
#-----|  -> i

#  176| puts
#-----|  -> hello

#  176| hello
#-----|  -> call to puts

#  176| ... += ...
#-----|  -> (...; ...)

#  176| i
#-----|  -> 1

#  176| 1
#-----|  -> ... += ...

#  176| ... == ...
#-----| true -> ... until ...
#-----| false -> puts

#  176| i
#-----|  -> 10

#  176| 10
#-----|  -> ... == ...

#  178| ... = ...
#-----|  -> x

#  178| x
#-----|  -> ... = ...

#  178| 0
#-----|  -> x

#  179| while ...
#-----|  -> i

#  179| ... < ...
#-----| false -> while ...
#-----| true -> x

#  179| x
#-----|  -> 10

#  179| 10
#-----|  -> ... < ...

#  180| ... += ...
#-----|  -> x

#  180| x
#-----|  -> 1

#  180| 1
#-----|  -> ... += ...

#  181| if ...
#-----|  -> puts

#  181| ... == ...
#-----| false -> if ...
#-----| true -> redo

#  181| x
#-----|  -> 5

#  181| 5
#-----|  -> ... == ...

#  181| redo
#-----| redo -> x

#  182| call to puts
#-----|  -> x

#  182| puts
#-----|  -> x

#  182| x
#-----|  -> call to puts

#  185| ... while ...
#-----|  -> run_block

#  185| (...; ...)
#-----|  -> i

#  185| call to puts
#-----|  -> i

#  185| puts
#-----|  -> hello

#  185| hello
#-----|  -> call to puts

#  185| ... -= ...
#-----|  -> (...; ...)

#  185| i
#-----|  -> 1

#  185| 1
#-----|  -> ... -= ...

#  185| ... != ...
#-----| false -> ... while ...
#-----| true -> puts

#  185| i
#-----|  -> 0

#  185| 0
#-----|  -> ... != ...

#  187| run_block
#-----|  -> run_block

#  187| run_block
#-----|  -> run_block

#  188| call to yield
#-----|  -> 42

#  188| 42

#  191| call to run_block
#-----|  -> exit cfg.rb (normal)

#  191| run_block
#-----|  -> { ... }

#  191| { ... }
#-----|  -> call to run_block

#  191| x
#-----|  -> puts

#  191| call to puts
#-----|  -> exit { ... } (normal)

#  191| puts
#-----|  -> x

#  191| x
#-----|  -> call to puts

exit.rb:
#    1| m1
#-----|  -> m2

#    1| m1
#-----|  -> m1

#    1| x
#-----|  -> x

#    2| if ...
#-----|  -> puts

#    2| ... > ...
#-----| false -> if ...
#-----| true -> exit

#    2| x
#-----|  -> 2

#    2| 2
#-----|  -> ... > ...

#    3| call to exit
#-----| exit -> exit m1 (abnormal)

#    3| exit
#-----|  -> 1

#    3| 1
#-----|  -> call to exit

#    5| call to puts
#-----|  -> exit m1 (normal)

#    5| puts
#-----|  -> x <= 2

#    5| x <= 2
#-----|  -> call to puts

#    8| m2
#-----|  -> exit exit.rb (normal)

#    8| m2
#-----|  -> m2

#    8| x
#-----|  -> x

#    9| if ...
#-----|  -> puts

#    9| ... > ...
#-----| false -> if ...
#-----| true -> abort

#    9| x
#-----|  -> 2

#    9| 2
#-----|  -> ... > ...

#   10| call to abort
#-----| exit -> exit m2 (abnormal)

#   10| abort
#-----|  -> abort!

#   10| abort!
#-----|  -> call to abort

#   12| call to puts
#-----|  -> exit m2 (normal)

#   12| puts
#-----|  -> x <= 2

#   12| x <= 2
#-----|  -> call to puts

heredoc.rb:
#    1| double_heredoc
#-----|  -> exit heredoc.rb (normal)

#    1| double_heredoc
#-----|  -> double_heredoc

#    2| call to puts
#-----|  -> exit double_heredoc (normal)

#    2| puts
#-----|  -> <<A

#    2| <<A
#-----|  -> HeredocBody

#    2| <<A
#-----|  -> HeredocBody

#    2| HeredocBody
#-----|  -> <<A

#    4| HeredocBody
#-----|  -> call to puts

ifs.rb:
#    1| m1
#-----|  -> m2

#    1| m1
#-----|  -> m1

#    1| x
#-----|  -> x

#    2| if ...
#-----|  -> exit m1 (normal)

#    2| ... > ...
#-----| true -> puts
#-----| false -> x

#    2| x
#-----|  -> 2

#    2| 2
#-----|  -> ... > ...

#    3| call to puts
#-----|  -> if ...

#    3| puts
#-----|  -> x is greater than 2

#    3| x is greater than 2
#-----|  -> call to puts

#    4| elsif ...
#-----|  -> if ...

#    4| [false] ... and ...
#-----| false -> puts

#    4| [true] ... and ...
#-----| true -> puts

#    4| [false] ... and ...
#-----| false -> [false] ... and ...

#    4| [true] ... and ...
#-----| true -> x

#    4| ... <= ...
#-----| false -> [false] ... and ...
#-----| true -> x

#    4| x
#-----|  -> 2

#    4| 2
#-----|  -> ... <= ...

#    4| ... > ...
#-----| false -> [false] ... and ...
#-----| true -> [true] ... and ...

#    4| x
#-----|  -> 0

#    4| 0
#-----|  -> ... > ...

#    4| [false] ! ...
#-----| false -> [false] ... and ...

#    4| [true] ! ...
#-----| true -> [true] ... and ...

#    4| [false] (... == ...)
#-----| false -> [true] ! ...

#    4| [true] (... == ...)
#-----| true -> [false] ! ...

#    4| ... == ...
#-----| false -> [false] (... == ...)
#-----| true -> [true] (... == ...)

#    4| x
#-----|  -> 5

#    4| 5
#-----|  -> ... == ...

#    5| call to puts
#-----|  -> elsif ...

#    5| puts
#-----|  -> x is 1

#    5| x is 1
#-----|  -> call to puts

#    7| call to puts
#-----|  -> elsif ...

#    7| puts
#-----|  -> I can't guess the number

#    7| I can't guess the number
#-----|  -> call to puts

#   11| m2
#-----|  -> m3

#   11| m2
#-----|  -> m2

#   11| b
#-----|  -> b

#   12| if ...
#-----|  -> 1

#   12| b
#-----| false -> if ...
#-----| true -> 0

#   13| return
#-----| return -> exit m2 (normal)

#   13| 0
#-----|  -> return

#   15| return
#-----| return -> exit m2 (normal)

#   15| 1
#-----|  -> return

#   18| m3
#-----|  -> m4

#   18| m3
#-----|  -> m3

#   18| x
#-----|  -> x

#   19| if ...
#-----|  -> puts

#   19| ... < ...
#-----| false -> if ...
#-----| true -> x

#   19| x
#-----|  -> 0

#   19| 0
#-----|  -> ... < ...

#   20| ... = ...
#-----|  -> x

#   20| x
#-----|  -> ... = ...

#   20| - ...
#-----|  -> x

#   20| x
#-----|  -> - ...

#   21| if ...
#-----|  -> if ...

#   21| ... > ...
#-----| false -> if ...
#-----| true -> x

#   21| x
#-----|  -> 10

#   21| 10
#-----|  -> ... > ...

#   22| ... = ...
#-----|  -> if ...

#   22| x
#-----|  -> ... = ...

#   22| ... - ...
#-----|  -> x

#   22| x
#-----|  -> 1

#   22| 1
#-----|  -> ... - ...

#   25| call to puts
#-----|  -> exit m3 (normal)

#   25| puts
#-----|  -> x

#   25| x
#-----|  -> call to puts

#   28| m4
#-----|  -> m5

#   28| m4
#-----|  -> m4

#   28| b1
#-----|  -> b2

#   28| b2
#-----|  -> b3

#   28| b3
#-----|  -> b1

#   29| return
#-----| return -> exit m4 (normal)

#   29| ... ? ... : ...
#-----|  -> return

#   29| [false] (... ? ... : ...)
#-----| false -> !b2 || !b3

#   29| [true] (... ? ... : ...)
#-----| true -> b2 || b3

#   29| [false] ... ? ... : ...
#-----| false -> [false] (... ? ... : ...)

#   29| [true] ... ? ... : ...
#-----| true -> [true] (... ? ... : ...)

#   29| b1
#-----| true -> b2
#-----| false -> b3

#   29| b2
#-----| false -> [false] ... ? ... : ...
#-----| true -> [true] ... ? ... : ...

#   29| b3
#-----| false -> [false] ... ? ... : ...
#-----| true -> [true] ... ? ... : ...

#   29| b2 || b3
#-----|  -> ... ? ... : ...

#   29| !b2 || !b3
#-----|  -> ... ? ... : ...

#   32| m5
#-----|  -> 1

#   32| m5
#-----|  -> m5

#   32| b1
#-----|  -> b2

#   32| b2
#-----|  -> b3

#   32| b3
#-----|  -> b4

#   32| b4
#-----|  -> b5

#   32| b5
#-----|  -> b1

#   33| if ...
#-----|  -> exit m5 (normal)

#   33| [false] (if ...)
#-----| false -> !b2 || !b4 || !b5

#   33| [true] (if ...)
#-----| true -> b2 || b4 || b5

#   33| [false] if ...
#-----| false -> [false] (if ...)

#   33| [true] if ...
#-----| true -> [true] (if ...)

#   33| b1
#-----| true -> b2
#-----| false -> b3

#   33| b2
#-----| false -> [false] if ...
#-----| true -> [true] if ...

#   33| [false] elsif ...
#-----| false -> [false] if ...

#   33| [true] elsif ...
#-----| true -> [true] if ...

#   33| b3
#-----| true -> b4
#-----| false -> b5

#   33| b4
#-----| false -> [false] elsif ...
#-----| true -> [true] elsif ...

#   33| b5
#-----| false -> [false] elsif ...
#-----| true -> [true] elsif ...

#   33| b2 || b4 || b5
#-----|  -> if ...

#   33| !b2 || !b4 || !b5
#-----|  -> if ...

#   36| ... unless ...
#-----|  -> constant_condition

#   36| conditional_method_def
#-----|  -> ... unless ...

#   36| conditional_method_def
#-----|  -> conditional_method_def

#   37| call to puts
#-----|  -> exit conditional_method_def (normal)

#   37| puts
#-----|  -> bla

#   37| bla
#-----|  -> call to puts

#   38| ... == ...
#-----| true -> ... unless ...
#-----| false -> conditional_method_def

#   38| 1
#-----|  -> 2

#   38| 2
#-----|  -> ... == ...

#   40| constant_condition
#-----|  -> exit ifs.rb (normal)

#   40| constant_condition
#-----|  -> constant_condition

#   41| if ...
#-----|  -> exit constant_condition (normal)

#   41| [false] ! ...
#-----| false -> if ...

#   41| true
#-----| true -> [false] ! ...

loops.rb:
#    1| m1
#-----|  -> m2

#    1| m1
#-----|  -> m1

#    1| x
#-----|  -> x

#    2| while ...
#-----|  -> exit m1 (normal)

#    2| ... >= ...
#-----| false -> while ...
#-----| true -> puts

#    2| x
#-----|  -> 0

#    2| 0
#-----|  -> ... >= ...

#    3| call to puts
#-----|  -> x

#    3| puts
#-----|  -> x

#    3| x
#-----|  -> call to puts

#    4| ... -= ...
#-----|  -> x

#    4| x
#-----|  -> 1

#    4| 1
#-----|  -> ... -= ...

#    8| m2
#-----|  -> m3

#    8| m2
#-----|  -> m2

#    8| x
#-----|  -> x

#    9| while ...
#-----|  -> puts

#    9| ... >= ...
#-----| false -> while ...
#-----| true -> puts

#    9| x
#-----|  -> 0

#    9| 0
#-----|  -> ... >= ...

#   10| call to puts
#-----|  -> x

#   10| puts
#-----|  -> x

#   10| x
#-----|  -> call to puts

#   11| ... -= ...
#-----|  -> x

#   11| x
#-----|  -> 1

#   11| 1
#-----|  -> ... -= ...

#   12| if ...
#-----|  -> puts

#   12| ... > ...
#-----| true -> break
#-----| false -> x

#   12| x
#-----|  -> 100

#   12| 100
#-----|  -> ... > ...

#   13| break
#-----| break -> while ...

#   14| elsif ...
#-----|  -> if ...

#   14| ... > ...
#-----| true -> next
#-----| false -> x

#   14| x
#-----|  -> 50

#   14| 50
#-----|  -> ... > ...

#   15| next
#-----| next -> x

#   16| elsif ...
#-----|  -> elsif ...

#   16| ... > ...
#-----| false -> elsif ...
#-----| true -> redo

#   16| x
#-----|  -> 10

#   16| 10
#-----|  -> ... > ...

#   17| redo
#-----| redo -> puts

#   19| call to puts
#-----|  -> x

#   19| puts
#-----|  -> Iter

#   19| Iter
#-----|  -> call to puts

#   21| call to puts
#-----|  -> exit m2 (normal)

#   21| puts
#-----|  -> Done

#   21| Done
#-----|  -> call to puts

#   24| m3
#-----|  -> exit loops.rb (normal)

#   24| m3
#-----|  -> m3

#   25| call to each
#-----|  -> exit m3 (normal)

#   25| Array
#-----|  -> each

#   25| 1
#-----|  -> 2

#   25| 2
#-----|  -> 3

#   25| 3
#-----|  -> Array

#   25| each
#-----|  -> do ... end

#   25| do ... end
#-----|  -> call to each

#   25| x
#-----|  -> puts

#   26| call to puts
#-----|  -> exit do ... end (normal)

#   26| puts
#-----|  -> x

#   26| x
#-----|  -> call to puts

raise.rb:
#    1| ExceptionA
#-----|  -> ExceptionA

#    1| ExceptionA
#-----|  -> Exception

#    1| Superclass
#-----|  -> ExceptionB

#    1| Exception
#-----|  -> Superclass

#    4| ExceptionB
#-----|  -> ExceptionB

#    4| ExceptionB
#-----|  -> Exception

#    4| Superclass
#-----|  -> m1

#    4| Exception
#-----|  -> Superclass

#    7| m1
#-----|  -> m2

#    7| m1
#-----|  -> m1

#    7| x
#-----|  -> x

#    8| if ...
#-----|  -> puts

#    8| ... > ...
#-----| false -> if ...
#-----| true -> raise

#    8| x
#-----|  -> 2

#    8| 2
#-----|  -> ... > ...

#    9| call to raise
#-----| raise -> exit m1 (abnormal)

#    9| raise
#-----|  -> x > 2

#    9| x > 2
#-----|  -> call to raise

#   11| call to puts
#-----|  -> exit m1 (normal)

#   11| puts
#-----|  -> x <= 2

#   11| x <= 2
#-----|  -> call to puts

#   14| m2
#-----|  -> m3

#   14| m2
#-----|  -> m2

#   14| b
#-----|  -> b

#   16| if ...
#-----|  -> puts

#   16| b
#-----| false -> if ...
#-----| true -> raise

#   17| call to raise
#-----| raise -> rescue ...

#   17| raise
#-----|  -> ExceptionA

#   17| ExceptionA
#-----|  -> call to raise

#   19| rescue ...
#-----|  -> ExceptionA

#   19| ExceptionA
#-----| match -> puts
#-----| raise -> exit m2 (abnormal)

#   20| call to puts
#-----|  -> puts

#   20| puts
#-----|  -> Rescued

#   20| Rescued
#-----|  -> call to puts

#   22| call to puts
#-----|  -> exit m2 (normal)

#   22| puts
#-----|  -> End m2

#   22| End m2
#-----|  -> call to puts

#   25| m3
#-----|  -> m4

#   25| m3
#-----|  -> m3

#   25| b
#-----|  -> b

#   27| if ...
#-----|  -> puts

#   27| b
#-----| false -> if ...
#-----| true -> raise

#   28| call to raise
#-----| raise -> rescue ...

#   28| raise
#-----|  -> ExceptionA

#   28| ExceptionA
#-----|  -> call to raise

#   30| rescue ...
#-----|  -> puts

#   31| call to puts
#-----|  -> puts

#   31| puts
#-----|  -> Rescued

#   31| Rescued
#-----|  -> call to puts

#   33| call to puts
#-----|  -> exit m3 (normal)

#   33| puts
#-----|  -> End m3

#   33| End m3
#-----|  -> call to puts

#   36| m4
#-----|  -> m5

#   36| m4
#-----|  -> m4

#   36| b
#-----|  -> b

#   38| if ...
#-----|  -> puts

#   38| b
#-----| false -> if ...
#-----| true -> raise

#   39| call to raise
#-----| raise -> rescue ...

#   39| raise
#-----|  -> ExceptionA

#   39| ExceptionA
#-----|  -> call to raise

#   41| rescue ...
#-----|  -> e

#   41| e
#-----|  -> puts

#   42| call to puts
#-----|  -> puts

#   42| puts
#-----|  -> Rescued {e}

#   42| Rescued {e}
#-----|  -> call to puts

#   44| call to puts
#-----|  -> exit m4 (normal)

#   44| puts
#-----|  -> End m4

#   44| End m4
#-----|  -> call to puts

#   47| m5
#-----|  -> m6

#   47| m5
#-----|  -> m5

#   47| b
#-----|  -> b

#   49| if ...
#-----|  -> puts

#   49| b
#-----| false -> if ...
#-----| true -> raise

#   50| call to raise
#-----| raise -> rescue ...

#   50| raise
#-----|  -> ExceptionA

#   50| ExceptionA
#-----|  -> call to raise

#   52| rescue ...
#-----|  -> e

#   52| e
#-----|  -> puts

#   54| call to puts
#-----|  -> exit m5 (normal)

#   54| puts
#-----|  -> End m5

#   54| End m5
#-----|  -> call to puts

#   57| m6
#-----|  -> m7

#   57| m6
#-----|  -> m6

#   57| b
#-----|  -> b

#   59| if ...
#-----|  -> puts

#   59| b
#-----| false -> if ...
#-----| true -> raise

#   60| call to raise
#-----| raise -> rescue ...

#   60| raise
#-----|  -> ExceptionA

#   60| ExceptionA
#-----|  -> call to raise

#   62| rescue ...
#-----|  -> ExceptionA

#   62| ExceptionA
#-----| no-match -> ExceptionB
#-----| match -> e

#   62| ExceptionB
#-----| match -> e
#-----| raise -> exit m6 (abnormal)

#   62| e
#-----|  -> puts

#   63| call to puts
#-----|  -> puts

#   63| puts
#-----|  -> Rescued {e}

#   63| Rescued {e}
#-----|  -> call to puts

#   65| call to puts
#-----|  -> exit m6 (normal)

#   65| puts
#-----|  -> End m6

#   65| End m6
#-----|  -> call to puts

#   68| m7
#-----|  -> m8

#   68| m7
#-----|  -> m7

#   68| x
#-----|  -> x

#   69| if ...
#-----|  -> puts

#   69| ... > ...
#-----| true -> raise
#-----| false -> x

#   69| x
#-----|  -> 2

#   69| 2
#-----|  -> ... > ...

#   70| call to raise
#-----| raise -> [ensure: raise] ensure ...

#   70| raise
#-----|  -> x > 2

#   70| x > 2
#-----|  -> call to raise

#   71| elsif ...
#-----|  -> if ...

#   71| ... < ...
#-----| false -> elsif ...
#-----| true -> x < 0

#   71| x
#-----|  -> 0

#   71| 0
#-----|  -> ... < ...

#   72| return
#-----| return -> [ensure: return] ensure ...

#   72| x < 0
#-----|  -> return

#   74| call to puts
#-----|  -> ensure ...

#   74| puts
#-----|  -> 0 <= x <= 2

#   74| 0 <= x <= 2
#-----|  -> call to puts

#   75| ensure ...
#-----|  -> puts

#   75| [ensure: return] ensure ...
#-----|  -> [ensure: return] puts

#   75| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] puts

#   76| call to puts
#-----|  -> exit m7 (normal)

#   76| [ensure: return] call to puts
#-----| return -> exit m7 (normal)

#   76| [ensure: raise] call to puts
#-----| raise -> exit m7 (abnormal)

#   76| puts
#-----|  -> ensure

#   76| [ensure: return] puts
#-----|  -> [ensure: return] ensure

#   76| [ensure: raise] puts
#-----|  -> [ensure: raise] ensure

#   76| ensure
#-----|  -> call to puts

#   76| [ensure: return] ensure
#-----|  -> [ensure: return] call to puts

#   76| [ensure: raise] ensure
#-----|  -> [ensure: raise] call to puts

#   79| m8
#-----|  -> m9

#   79| m8
#-----|  -> m8

#   79| x
#-----|  -> puts

#   80| call to puts
#-----|  -> x

#   80| puts
#-----|  -> Begin m8

#   80| Begin m8
#-----|  -> call to puts

#   82| if ...
#-----|  -> puts

#   82| ... > ...
#-----| true -> raise
#-----| false -> x

#   82| x
#-----|  -> 2

#   82| 2
#-----|  -> ... > ...

#   83| call to raise
#-----| raise -> [ensure: raise] ensure ...

#   83| raise
#-----|  -> x > 2

#   83| x > 2
#-----|  -> call to raise

#   84| elsif ...
#-----|  -> if ...

#   84| ... < ...
#-----| false -> elsif ...
#-----| true -> x < 0

#   84| x
#-----|  -> 0

#   84| 0
#-----|  -> ... < ...

#   85| return
#-----| return -> [ensure: return] ensure ...

#   85| x < 0
#-----|  -> return

#   87| call to puts
#-----|  -> ensure ...

#   87| puts
#-----|  -> 0 <= x <= 2

#   87| 0 <= x <= 2
#-----|  -> call to puts

#   88| ensure ...
#-----|  -> puts

#   88| [ensure: return] ensure ...
#-----|  -> [ensure: return] puts

#   88| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] puts

#   89| call to puts
#-----|  -> puts

#   89| [ensure: return] call to puts
#-----| return -> exit m8 (normal)

#   89| [ensure: raise] call to puts
#-----| raise -> exit m8 (abnormal)

#   89| puts
#-----|  -> ensure

#   89| [ensure: return] puts
#-----|  -> [ensure: return] ensure

#   89| [ensure: raise] puts
#-----|  -> [ensure: raise] ensure

#   89| ensure
#-----|  -> call to puts

#   89| [ensure: return] ensure
#-----|  -> [ensure: return] call to puts

#   89| [ensure: raise] ensure
#-----|  -> [ensure: raise] call to puts

#   91| call to puts
#-----|  -> exit m8 (normal)

#   91| puts
#-----|  -> End m8

#   91| End m8
#-----|  -> call to puts

#   94| m9
#-----|  -> m10

#   94| m9
#-----|  -> m9

#   94| x
#-----|  -> b1

#   94| b1
#-----|  -> b2

#   94| b2
#-----|  -> puts

#   95| call to puts
#-----|  -> x

#   95| puts
#-----|  -> Begin m9

#   95| Begin m9
#-----|  -> call to puts

#   97| if ...
#-----|  -> puts

#   97| ... > ...
#-----| true -> raise
#-----| false -> x

#   97| x
#-----|  -> 2

#   97| 2
#-----|  -> ... > ...

#   98| call to raise
#-----| raise -> [ensure: raise] ensure ...

#   98| raise
#-----|  -> x > 2

#   98| x > 2
#-----|  -> call to raise

#   99| elsif ...
#-----|  -> if ...

#   99| ... < ...
#-----| false -> elsif ...
#-----| true -> x < 0

#   99| x
#-----|  -> 0

#   99| 0
#-----|  -> ... < ...

#  100| return
#-----| return -> [ensure: return] ensure ...

#  100| x < 0
#-----|  -> return

#  102| call to puts
#-----|  -> ensure ...

#  102| puts
#-----|  -> 0 <= x <= 2

#  102| 0 <= x <= 2
#-----|  -> call to puts

#  103| ensure ...
#-----|  -> puts

#  103| [ensure: return] ensure ...
#-----|  -> [ensure: return] puts

#  103| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] puts

#  104| call to puts
#-----|  -> b1

#  104| [ensure: return] call to puts
#-----|  -> [ensure: return] b1

#  104| [ensure: raise] call to puts
#-----|  -> [ensure: raise] b1

#  104| puts
#-----|  -> outer ensure

#  104| [ensure: return] puts
#-----|  -> [ensure: return] outer ensure

#  104| [ensure: raise] puts
#-----|  -> [ensure: raise] outer ensure

#  104| outer ensure
#-----|  -> call to puts

#  104| [ensure: return] outer ensure
#-----|  -> [ensure: return] call to puts

#  104| [ensure: raise] outer ensure
#-----|  -> [ensure: raise] call to puts

#  106| if ...
#-----|  -> ensure ...

#  106| [ensure: return] if ...
#-----|  -> [ensure: return] ensure ...

#  106| [ensure: raise] if ...
#-----|  -> [ensure: raise] ensure ...

#  106| b1
#-----| false -> if ...
#-----| true -> raise

#  106| [ensure: return] b1
#-----| false -> [ensure: return] if ...
#-----| true -> [ensure: return] raise

#  106| [ensure: raise] b1
#-----| false -> [ensure: raise] if ...
#-----| true -> [ensure: raise] raise

#  107| call to raise
#-----| raise -> [ensure(1): raise] ensure ...

#  107| [ensure: return] call to raise
#-----| raise -> [ensure: return, ensure(1): raise] ensure ...

#  107| [ensure: raise] call to raise
#-----| raise -> [ensure: raise, ensure(1): raise] ensure ...

#  107| raise
#-----|  -> b1 is true

#  107| [ensure: return] raise
#-----|  -> [ensure: return] b1 is true

#  107| [ensure: raise] raise
#-----|  -> [ensure: raise] b1 is true

#  107| b1 is true
#-----|  -> call to raise

#  107| [ensure: return] b1 is true
#-----|  -> [ensure: return] call to raise

#  107| [ensure: raise] b1 is true
#-----|  -> [ensure: raise] call to raise

#  109| ensure ...
#-----|  -> puts

#  109| [ensure(1): raise] ensure ...
#-----|  -> [ensure(1): raise] puts

#  109| [ensure: return] ensure ...
#-----|  -> [ensure: return] puts

#  109| [ensure: return, ensure(1): raise] ensure ...
#-----|  -> [ensure: return, ensure(1): raise] puts

#  109| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] puts

#  109| [ensure: raise, ensure(1): raise] ensure ...
#-----|  -> [ensure: raise, ensure(1): raise] puts

#  110| call to puts
#-----|  -> puts

#  110| [ensure(1): raise] call to puts
#-----| raise -> [ensure: raise] ensure ...

#  110| [ensure: return] call to puts
#-----| return -> [ensure: return] ensure ...

#  110| [ensure: return, ensure(1): raise] call to puts
#-----| raise -> [ensure: raise] ensure ...

#  110| [ensure: raise] call to puts
#-----| raise -> [ensure: raise] ensure ...

#  110| [ensure: raise, ensure(1): raise] call to puts
#-----| raise -> [ensure: raise] ensure ...

#  110| puts
#-----|  -> inner ensure

#  110| [ensure(1): raise] puts
#-----|  -> [ensure(1): raise] inner ensure

#  110| [ensure: return] puts
#-----|  -> [ensure: return] inner ensure

#  110| [ensure: return, ensure(1): raise] puts
#-----|  -> [ensure: return, ensure(1): raise] inner ensure

#  110| [ensure: raise] puts
#-----|  -> [ensure: raise] inner ensure

#  110| [ensure: raise, ensure(1): raise] puts
#-----|  -> [ensure: raise, ensure(1): raise] inner ensure

#  110| inner ensure
#-----|  -> call to puts

#  110| [ensure(1): raise] inner ensure
#-----|  -> [ensure(1): raise] call to puts

#  110| [ensure: return] inner ensure
#-----|  -> [ensure: return] call to puts

#  110| [ensure: return, ensure(1): raise] inner ensure
#-----|  -> [ensure: return, ensure(1): raise] call to puts

#  110| [ensure: raise] inner ensure
#-----|  -> [ensure: raise] call to puts

#  110| [ensure: raise, ensure(1): raise] inner ensure
#-----|  -> [ensure: raise, ensure(1): raise] call to puts

#  113| call to puts
#-----|  -> ensure ...

#  113| puts
#-----|  -> End m9

#  113| End m9
#-----|  -> call to puts

#  114| ensure ...
#-----|  -> puts

#  114| [ensure: return] ensure ...
#-----|  -> [ensure: return] puts

#  114| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] puts

#  115| call to puts
#-----|  -> b2

#  115| [ensure: return] call to puts
#-----|  -> [ensure: return] b2

#  115| [ensure: raise] call to puts
#-----|  -> [ensure: raise] b2

#  115| puts
#-----|  -> method ensure

#  115| [ensure: return] puts
#-----|  -> [ensure: return] method ensure

#  115| [ensure: raise] puts
#-----|  -> [ensure: raise] method ensure

#  115| method ensure
#-----|  -> call to puts

#  115| [ensure: return] method ensure
#-----|  -> [ensure: return] call to puts

#  115| [ensure: raise] method ensure
#-----|  -> [ensure: raise] call to puts

#  116| if ...
#-----|  -> exit m9 (normal)

#  116| [ensure: return] if ...
#-----| return -> exit m9 (normal)

#  116| [ensure: raise] if ...
#-----| raise -> exit m9 (abnormal)

#  116| b2
#-----| false -> if ...
#-----| true -> raise

#  116| [ensure: return] b2
#-----| false -> [ensure: return] if ...
#-----| true -> [ensure: return] raise

#  116| [ensure: raise] b2
#-----| false -> [ensure: raise] if ...
#-----| true -> [ensure: raise] raise

#  117| call to raise
#-----| raise -> exit m9 (abnormal)

#  117| [ensure: return] call to raise
#-----| raise -> exit m9 (abnormal)

#  117| [ensure: raise] call to raise
#-----| raise -> exit m9 (abnormal)

#  117| raise
#-----|  -> b2 is true

#  117| [ensure: return] raise
#-----|  -> [ensure: return] b2 is true

#  117| [ensure: raise] raise
#-----|  -> [ensure: raise] b2 is true

#  117| b2 is true
#-----|  -> call to raise

#  117| [ensure: return] b2 is true
#-----|  -> [ensure: return] call to raise

#  117| [ensure: raise] b2 is true
#-----|  -> [ensure: raise] call to raise

#  121| m10
#-----|  -> m11

#  121| m10
#-----|  -> m10

#  121| p
#-----| no-match -> raise
#-----| match -> ensure ...

#  121| call to raise
#-----| raise -> exit m10 (abnormal)

#  121| raise
#-----|  -> Exception

#  121| Exception
#-----|  -> call to raise

#  124| ensure ...
#-----|  -> puts

#  125| call to puts
#-----|  -> exit m10 (normal)

#  125| puts
#-----|  -> Will not get executed if p is not supplied

#  125| Will not get executed if p is not supplied
#-----|  -> call to puts

#  128| m11
#-----|  -> m12

#  128| m11
#-----|  -> m11

#  128| b
#-----|  -> b

#  130| if ...
#-----|  -> ensure ...

#  130| b
#-----| false -> if ...
#-----| true -> raise

#  131| call to raise
#-----| raise -> rescue ...

#  131| raise
#-----|  -> ExceptionA

#  131| ExceptionA
#-----|  -> call to raise

#  133| rescue ...
#-----|  -> ExceptionA

#  133| ExceptionA
#-----| no-match -> rescue ...
#-----| match -> ensure ...

#  134| rescue ...
#-----|  -> ExceptionB

#  134| ExceptionB
#-----| match -> puts
#-----| raise -> [ensure: raise] ensure ...

#  135| call to puts
#-----|  -> ensure ...

#  135| puts
#-----|  -> ExceptionB

#  135| ExceptionB
#-----|  -> call to puts

#  136| ensure ...
#-----|  -> puts

#  136| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] puts

#  137| call to puts
#-----|  -> puts

#  137| [ensure: raise] call to puts
#-----| raise -> exit m11 (abnormal)

#  137| puts
#-----|  -> Ensure

#  137| [ensure: raise] puts
#-----|  -> [ensure: raise] Ensure

#  137| Ensure
#-----|  -> call to puts

#  137| [ensure: raise] Ensure
#-----|  -> [ensure: raise] call to puts

#  139| call to puts
#-----|  -> exit m11 (normal)

#  139| puts
#-----|  -> End m11

#  139| End m11
#-----|  -> call to puts

#  142| m12
#-----|  -> m13

#  142| m12
#-----|  -> m12

#  142| b
#-----|  -> b

#  143| if ...
#-----|  -> ensure ...

#  143| b
#-----| false -> if ...
#-----| true -> raise

#  144| call to raise
#-----| raise -> [ensure: raise] ensure ...

#  144| raise
#-----|  -> 

#  144| 
#-----|  -> call to raise

#  146| ensure ...
#-----|  -> 3

#  146| [ensure: raise] ensure ...
#-----|  -> [ensure: raise] 3

#  147| return
#-----| return -> exit m12 (normal)

#  147| [ensure: raise] return
#-----| return -> exit m12 (normal)

#  147| 3
#-----|  -> return

#  147| [ensure: raise] 3
#-----|  -> [ensure: raise] return

#  150| m13
#-----|  -> m14

#  150| m13
#-----|  -> m13

#  151| ensure ...
#-----|  -> exit m13 (normal)

#  154| m14
#-----|  -> exit raise.rb (normal)

#  154| m14
#-----|  -> m14

#  154| element
#-----|  -> element

#  155| call to each
#-----|  -> exit m14 (normal)

#  155| element
#-----|  -> each

#  155| each
#-----|  -> { ... }

#  155| { ... }
#-----|  -> call to each

#  155| elem
#-----|  -> element

#  155| ... if ...
#-----|  -> exit { ... } (normal)

#  155| call to raise
#-----| raise -> exit { ... } (abnormal)

#  155| raise
#-----|  -> 

#  155| 
#-----|  -> call to raise

#  155| call to nil?
#-----| false -> ... if ...
#-----| true -> raise

#  155| element
#-----|  -> nil?

#  155| nil?
#-----|  -> call to nil?

break_ensure.rb:
#    1| exit break_ensure.rb

#    1| exit m1

#   13| exit m2

#   27| exit m3

#   44| exit m4

case.rb:
#    1| exit case.rb

#    1| exit if_in_case

cfg.rb:
#    1| exit cfg.rb

#   15| exit BEGIN { ... }

#   19| exit END { ... }

#   25| exit { ... }

#   29| exit { ... }

#   63| exit pattern

#   69| exit print

#  101| exit parameters

#  120| exit -> { ... }

#  142| exit print

#  149| exit method

#  153| exit two_parameters

#  191| exit { ... }

exit.rb:
#    1| exit exit.rb

#    1| exit m1

#    8| exit m2

heredoc.rb:
#    1| exit heredoc.rb

#    1| exit double_heredoc

ifs.rb:
#    1| exit ifs.rb

#    1| exit m1

#   11| exit m2

#   18| exit m3

#   28| exit m4

#   32| exit m5

#   36| exit conditional_method_def

#   40| exit constant_condition

loops.rb:
#    1| exit loops.rb

#    1| exit m1

#    8| exit m2

#   24| exit m3

#   25| exit do ... end

raise.rb:
#    1| exit raise.rb

#    7| exit m1

#   14| exit m2

#   25| exit m3

#   36| exit m4

#   47| exit m5

#   57| exit m6

#   68| exit m7

#   79| exit m8

#   94| exit m9

#  121| exit m10

#  128| exit m11

#  142| exit m12

#  150| exit m13

#  154| exit m14

#  155| exit { ... }

break_ensure.rb:
#    1| exit break_ensure.rb (normal)
#-----|  -> exit break_ensure.rb

#    1| exit m1 (normal)
#-----|  -> exit m1

#   13| exit m2 (normal)
#-----|  -> exit m2

#   27| exit m3 (normal)
#-----|  -> exit m3

#   44| exit m4 (normal)
#-----|  -> exit m4

case.rb:
#    1| exit case.rb (normal)
#-----|  -> exit case.rb

#    1| exit if_in_case (normal)
#-----|  -> exit if_in_case

cfg.rb:
#    1| exit cfg.rb (normal)
#-----|  -> exit cfg.rb

#   15| exit BEGIN { ... } (normal)
#-----|  -> exit BEGIN { ... }

#   19| exit END { ... } (normal)
#-----|  -> exit END { ... }

#   25| exit { ... } (normal)
#-----|  -> exit { ... }

#   29| exit { ... } (normal)
#-----|  -> exit { ... }

#   63| exit pattern (normal)
#-----|  -> exit pattern

#   69| exit print (normal)
#-----|  -> exit print

#  101| exit parameters (normal)
#-----|  -> exit parameters

#  120| exit -> { ... } (normal)
#-----|  -> exit -> { ... }

#  142| exit print (normal)
#-----|  -> exit print

#  149| exit method (normal)
#-----|  -> exit method

#  153| exit two_parameters (normal)
#-----|  -> exit two_parameters

#  191| exit { ... } (normal)
#-----|  -> exit { ... }

exit.rb:
#    1| exit exit.rb (normal)
#-----|  -> exit exit.rb

#    1| exit m1 (abnormal)
#-----|  -> exit m1

#    1| exit m1 (normal)
#-----|  -> exit m1

#    8| exit m2 (abnormal)
#-----|  -> exit m2

#    8| exit m2 (normal)
#-----|  -> exit m2

heredoc.rb:
#    1| exit heredoc.rb (normal)
#-----|  -> exit heredoc.rb

#    1| exit double_heredoc (normal)
#-----|  -> exit double_heredoc

ifs.rb:
#    1| exit ifs.rb (normal)
#-----|  -> exit ifs.rb

#    1| exit m1 (normal)
#-----|  -> exit m1

#   11| exit m2 (normal)
#-----|  -> exit m2

#   18| exit m3 (normal)
#-----|  -> exit m3

#   28| exit m4 (normal)
#-----|  -> exit m4

#   32| exit m5 (normal)
#-----|  -> exit m5

#   36| exit conditional_method_def (normal)
#-----|  -> exit conditional_method_def

#   40| exit constant_condition (normal)
#-----|  -> exit constant_condition

loops.rb:
#    1| exit loops.rb (normal)
#-----|  -> exit loops.rb

#    1| exit m1 (normal)
#-----|  -> exit m1

#    8| exit m2 (normal)
#-----|  -> exit m2

#   24| exit m3 (normal)
#-----|  -> exit m3

#   25| exit do ... end (normal)
#-----|  -> exit do ... end

raise.rb:
#    1| exit raise.rb (normal)
#-----|  -> exit raise.rb

#    7| exit m1 (abnormal)
#-----|  -> exit m1

#    7| exit m1 (normal)
#-----|  -> exit m1

#   14| exit m2 (abnormal)
#-----|  -> exit m2

#   14| exit m2 (normal)
#-----|  -> exit m2

#   25| exit m3 (normal)
#-----|  -> exit m3

#   36| exit m4 (normal)
#-----|  -> exit m4

#   47| exit m5 (normal)
#-----|  -> exit m5

#   57| exit m6 (abnormal)
#-----|  -> exit m6

#   57| exit m6 (normal)
#-----|  -> exit m6

#   68| exit m7 (abnormal)
#-----|  -> exit m7

#   68| exit m7 (normal)
#-----|  -> exit m7

#   79| exit m8 (abnormal)
#-----|  -> exit m8

#   79| exit m8 (normal)
#-----|  -> exit m8

#   94| exit m9 (abnormal)
#-----|  -> exit m9

#   94| exit m9 (normal)
#-----|  -> exit m9

#  121| exit m10 (abnormal)
#-----|  -> exit m10

#  121| exit m10 (normal)
#-----|  -> exit m10

#  128| exit m11 (abnormal)
#-----|  -> exit m11

#  128| exit m11 (normal)
#-----|  -> exit m11

#  142| exit m12 (normal)
#-----|  -> exit m12

#  150| exit m13 (normal)
#-----|  -> exit m13

#  154| exit m14 (normal)
#-----|  -> exit m14

#  155| exit { ... } (abnormal)
#-----|  -> exit { ... }

#  155| exit { ... } (normal)
#-----|  -> exit { ... }
