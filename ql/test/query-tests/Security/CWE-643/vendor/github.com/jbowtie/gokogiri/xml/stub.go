// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/jbowtie/gokogiri/xml, strictly for use in testing.

// Source: github.com/jbowtie/gokogiri/xml (exports: Node; functions: )

// Package xml is a stub of github.com/jbowtie/gokogiri/xml, generated by depstubber.
package xml

import ()

type AttributeNode struct {
	XmlNode *XmlNode
}

func (_ AttributeNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) AddUnlinkedNode(_ interface{}) {}

func (_ AttributeNode) Attr(_ string) string {
	return ""
}

func (_ AttributeNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ AttributeNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ AttributeNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ AttributeNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ AttributeNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ AttributeNode) Content() string {
	return ""
}

func (_ AttributeNode) CountChildren() int {
	return 0
}

func (_ AttributeNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ AttributeNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ AttributeNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ AttributeNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ AttributeNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ AttributeNode) DeclareNamespace(_ string, _ string) {}

func (_ AttributeNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ AttributeNode) DocPtr() interface{} {
	return nil
}

func (_ AttributeNode) DocRef() Document {
	return nil
}

func (_ AttributeNode) DocType() NodeType {
	return 0
}

func (_ AttributeNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ AttributeNode) Duplicate(_ int) Node {
	return nil
}

func (_ AttributeNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ AttributeNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ AttributeNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ AttributeNode) FirstChild() Node {
	return nil
}

func (_ AttributeNode) Free() {}

func (_ AttributeNode) InnerHtml() string {
	return ""
}

func (_ AttributeNode) InputEncoding() []uint8 {
	return nil
}

func (_ AttributeNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) IsValid() bool {
	return false
}

func (_ AttributeNode) LastChild() Node {
	return nil
}

func (_ AttributeNode) LineNumber() int {
	return 0
}

func (_ AttributeNode) MyDocument() Document {
	return nil
}

func (_ AttributeNode) Name() string {
	return ""
}

func (_ AttributeNode) Namespace() string {
	return ""
}

func (_ AttributeNode) NextSibling() Node {
	return nil
}

func (_ AttributeNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ AttributeNode) NodePtr() interface{} {
	return nil
}

func (_ AttributeNode) NodeType() NodeType {
	return 0
}

func (_ AttributeNode) OutputEncoding() []uint8 {
	return nil
}

func (_ AttributeNode) Parent() Node {
	return nil
}

func (_ AttributeNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ AttributeNode) Path() string {
	return ""
}

func (_ AttributeNode) PreviousSibling() Node {
	return nil
}

func (_ AttributeNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) Remove() {}

func (_ AttributeNode) RemoveDefaultNamespace() {}

func (_ AttributeNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ AttributeNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) ResetChildren() {}

func (_ AttributeNode) ResetNodePtr() {}

func (_ AttributeNode) Root() *ElementNode {
	return nil
}

func (_ AttributeNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ AttributeNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ AttributeNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ AttributeNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ AttributeNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ AttributeNode) SetName(_ string) {}

func (_ AttributeNode) SetNamespace(_ string, _ string) {}

func (_ AttributeNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ AttributeNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ AttributeNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ AttributeNode) ToUnformattedXml() string {
	return ""
}

func (_ AttributeNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ AttributeNode) Unlink() {}

func (_ AttributeNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ AttributeNode) Uri() string {
	return ""
}

func (_ AttributeNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

func (_ *AttributeNode) SetValue(_ interface{}) {}

func (_ *AttributeNode) String() string {
	return ""
}

func (_ *AttributeNode) Value() string {
	return ""
}

type CDataNode struct {
	XmlNode *XmlNode
}

func (_ CDataNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) AddUnlinkedNode(_ interface{}) {}

func (_ CDataNode) Attr(_ string) string {
	return ""
}

func (_ CDataNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ CDataNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ CDataNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ CDataNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ CDataNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CDataNode) Content() string {
	return ""
}

func (_ CDataNode) CountChildren() int {
	return 0
}

func (_ CDataNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ CDataNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ CDataNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ CDataNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ CDataNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ CDataNode) DeclareNamespace(_ string, _ string) {}

func (_ CDataNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ CDataNode) DocPtr() interface{} {
	return nil
}

func (_ CDataNode) DocRef() Document {
	return nil
}

func (_ CDataNode) DocType() NodeType {
	return 0
}

func (_ CDataNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ CDataNode) Duplicate(_ int) Node {
	return nil
}

func (_ CDataNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ CDataNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CDataNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ CDataNode) FirstChild() Node {
	return nil
}

func (_ CDataNode) Free() {}

func (_ CDataNode) InnerHtml() string {
	return ""
}

func (_ CDataNode) InputEncoding() []uint8 {
	return nil
}

func (_ CDataNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) IsValid() bool {
	return false
}

func (_ CDataNode) LastChild() Node {
	return nil
}

func (_ CDataNode) LineNumber() int {
	return 0
}

func (_ CDataNode) MyDocument() Document {
	return nil
}

func (_ CDataNode) Name() string {
	return ""
}

func (_ CDataNode) Namespace() string {
	return ""
}

func (_ CDataNode) NextSibling() Node {
	return nil
}

func (_ CDataNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ CDataNode) NodePtr() interface{} {
	return nil
}

func (_ CDataNode) NodeType() NodeType {
	return 0
}

func (_ CDataNode) OutputEncoding() []uint8 {
	return nil
}

func (_ CDataNode) Parent() Node {
	return nil
}

func (_ CDataNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CDataNode) Path() string {
	return ""
}

func (_ CDataNode) PreviousSibling() Node {
	return nil
}

func (_ CDataNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) Remove() {}

func (_ CDataNode) RemoveDefaultNamespace() {}

func (_ CDataNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ CDataNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) ResetChildren() {}

func (_ CDataNode) ResetNodePtr() {}

func (_ CDataNode) Root() *ElementNode {
	return nil
}

func (_ CDataNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CDataNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CDataNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ CDataNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ CDataNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CDataNode) SetName(_ string) {}

func (_ CDataNode) SetNamespace(_ string, _ string) {}

func (_ CDataNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ CDataNode) String() string {
	return ""
}

func (_ CDataNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ CDataNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ CDataNode) ToUnformattedXml() string {
	return ""
}

func (_ CDataNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ CDataNode) Unlink() {}

func (_ CDataNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ CDataNode) Uri() string {
	return ""
}

func (_ CDataNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

type CommentNode struct {
	XmlNode *XmlNode
}

func (_ CommentNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) AddUnlinkedNode(_ interface{}) {}

func (_ CommentNode) Attr(_ string) string {
	return ""
}

func (_ CommentNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ CommentNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ CommentNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ CommentNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ CommentNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CommentNode) Content() string {
	return ""
}

func (_ CommentNode) CountChildren() int {
	return 0
}

func (_ CommentNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ CommentNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ CommentNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ CommentNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ CommentNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ CommentNode) DeclareNamespace(_ string, _ string) {}

func (_ CommentNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ CommentNode) DocPtr() interface{} {
	return nil
}

func (_ CommentNode) DocRef() Document {
	return nil
}

func (_ CommentNode) DocType() NodeType {
	return 0
}

func (_ CommentNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ CommentNode) Duplicate(_ int) Node {
	return nil
}

func (_ CommentNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ CommentNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CommentNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ CommentNode) FirstChild() Node {
	return nil
}

func (_ CommentNode) Free() {}

func (_ CommentNode) InnerHtml() string {
	return ""
}

func (_ CommentNode) InputEncoding() []uint8 {
	return nil
}

func (_ CommentNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) IsValid() bool {
	return false
}

func (_ CommentNode) LastChild() Node {
	return nil
}

func (_ CommentNode) LineNumber() int {
	return 0
}

func (_ CommentNode) MyDocument() Document {
	return nil
}

func (_ CommentNode) Name() string {
	return ""
}

func (_ CommentNode) Namespace() string {
	return ""
}

func (_ CommentNode) NextSibling() Node {
	return nil
}

func (_ CommentNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ CommentNode) NodePtr() interface{} {
	return nil
}

func (_ CommentNode) NodeType() NodeType {
	return 0
}

func (_ CommentNode) OutputEncoding() []uint8 {
	return nil
}

func (_ CommentNode) Parent() Node {
	return nil
}

func (_ CommentNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CommentNode) Path() string {
	return ""
}

func (_ CommentNode) PreviousSibling() Node {
	return nil
}

func (_ CommentNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) Remove() {}

func (_ CommentNode) RemoveDefaultNamespace() {}

func (_ CommentNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ CommentNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) ResetChildren() {}

func (_ CommentNode) ResetNodePtr() {}

func (_ CommentNode) Root() *ElementNode {
	return nil
}

func (_ CommentNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CommentNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ CommentNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ CommentNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ CommentNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ CommentNode) SetName(_ string) {}

func (_ CommentNode) SetNamespace(_ string, _ string) {}

func (_ CommentNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ CommentNode) String() string {
	return ""
}

func (_ CommentNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ CommentNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ CommentNode) ToUnformattedXml() string {
	return ""
}

func (_ CommentNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ CommentNode) Unlink() {}

func (_ CommentNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ CommentNode) Uri() string {
	return ""
}

func (_ CommentNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

type Document interface {
	AddUnlinkedNode(_ interface{})
	BookkeepFragment(_ *DocumentFragment)
	CreateCDataNode(_ string) *CDataNode
	CreateCommentNode(_ string) *CommentNode
	CreateElementNode(_ string) *ElementNode
	CreatePINode(_ string, _ string) *ProcessingInstructionNode
	CreateTextNode(_ string) *TextNode
	DocPtr() interface{}
	DocRef() Document
	DocType() NodeType
	DocXPathCtx() *interface{}
	Free()
	InputEncoding() []uint8
	NodeById(_ string) *ElementNode
	OutputEncoding() []uint8
	ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
		Error() string
	})
	RecursivelyRemoveNamespaces() interface {
		Error() string
	}
	RemoveUnlinkedNode(_ interface{}) bool
	Root() *ElementNode
	String() string
	UnparsedEntityURI(_ string) string
	Uri() string
}

type DocumentFragment struct {
	Node        Node
	InEncoding  []uint8
	OutEncoding []uint8
}

func (_ DocumentFragment) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) Attr(_ string) string {
	return ""
}

func (_ DocumentFragment) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ DocumentFragment) AttributeList() []*AttributeNode {
	return nil
}

func (_ DocumentFragment) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ DocumentFragment) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ DocumentFragment) Content() string {
	return ""
}

func (_ DocumentFragment) CountChildren() int {
	return 0
}

func (_ DocumentFragment) DeclareNamespace(_ string, _ string) {}

func (_ DocumentFragment) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ DocumentFragment) Duplicate(_ int) Node {
	return nil
}

func (_ DocumentFragment) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ DocumentFragment) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ DocumentFragment) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ DocumentFragment) FirstChild() Node {
	return nil
}

func (_ DocumentFragment) InnerHtml() string {
	return ""
}

func (_ DocumentFragment) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) IsValid() bool {
	return false
}

func (_ DocumentFragment) LastChild() Node {
	return nil
}

func (_ DocumentFragment) LineNumber() int {
	return 0
}

func (_ DocumentFragment) MyDocument() Document {
	return nil
}

func (_ DocumentFragment) Name() string {
	return ""
}

func (_ DocumentFragment) Namespace() string {
	return ""
}

func (_ DocumentFragment) NextSibling() Node {
	return nil
}

func (_ DocumentFragment) NodePtr() interface{} {
	return nil
}

func (_ DocumentFragment) NodeType() NodeType {
	return 0
}

func (_ DocumentFragment) Parent() Node {
	return nil
}

func (_ DocumentFragment) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ DocumentFragment) Path() string {
	return ""
}

func (_ DocumentFragment) PreviousSibling() Node {
	return nil
}

func (_ DocumentFragment) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) RemoveDefaultNamespace() {}

func (_ DocumentFragment) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) ResetChildren() {}

func (_ DocumentFragment) ResetNodePtr() {}

func (_ DocumentFragment) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ DocumentFragment) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ DocumentFragment) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ DocumentFragment) SetAttr(_ string, _ string) string {
	return ""
}

func (_ DocumentFragment) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ DocumentFragment) SetName(_ string) {}

func (_ DocumentFragment) SetNamespace(_ string, _ string) {}

func (_ DocumentFragment) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ DocumentFragment) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ DocumentFragment) ToUnformattedXml() string {
	return ""
}

func (_ DocumentFragment) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ DocumentFragment) Unlink() {}

func (_ DocumentFragment) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

func (_ *DocumentFragment) Children() []Node {
	return nil
}

func (_ *DocumentFragment) Remove() {}

func (_ *DocumentFragment) String() string {
	return ""
}

func (_ *DocumentFragment) ToBuffer(_ []uint8) []uint8 {
	return nil
}

type ElementNode struct {
	XmlNode *XmlNode
}

func (_ ElementNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) AddUnlinkedNode(_ interface{}) {}

func (_ ElementNode) Attr(_ string) string {
	return ""
}

func (_ ElementNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ ElementNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ ElementNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ ElementNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ ElementNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ElementNode) Content() string {
	return ""
}

func (_ ElementNode) CountChildren() int {
	return 0
}

func (_ ElementNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ ElementNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ ElementNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ ElementNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ ElementNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ ElementNode) DeclareNamespace(_ string, _ string) {}

func (_ ElementNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ ElementNode) DocPtr() interface{} {
	return nil
}

func (_ ElementNode) DocRef() Document {
	return nil
}

func (_ ElementNode) DocType() NodeType {
	return 0
}

func (_ ElementNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ ElementNode) Duplicate(_ int) Node {
	return nil
}

func (_ ElementNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ ElementNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ElementNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ ElementNode) FirstChild() Node {
	return nil
}

func (_ ElementNode) Free() {}

func (_ ElementNode) InnerHtml() string {
	return ""
}

func (_ ElementNode) InputEncoding() []uint8 {
	return nil
}

func (_ ElementNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) IsValid() bool {
	return false
}

func (_ ElementNode) LastChild() Node {
	return nil
}

func (_ ElementNode) LineNumber() int {
	return 0
}

func (_ ElementNode) MyDocument() Document {
	return nil
}

func (_ ElementNode) Name() string {
	return ""
}

func (_ ElementNode) Namespace() string {
	return ""
}

func (_ ElementNode) NextSibling() Node {
	return nil
}

func (_ ElementNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ ElementNode) NodePtr() interface{} {
	return nil
}

func (_ ElementNode) NodeType() NodeType {
	return 0
}

func (_ ElementNode) OutputEncoding() []uint8 {
	return nil
}

func (_ ElementNode) Parent() Node {
	return nil
}

func (_ ElementNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ElementNode) Path() string {
	return ""
}

func (_ ElementNode) PreviousSibling() Node {
	return nil
}

func (_ ElementNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) Remove() {}

func (_ ElementNode) RemoveDefaultNamespace() {}

func (_ ElementNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ ElementNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) ResetChildren() {}

func (_ ElementNode) ResetNodePtr() {}

func (_ ElementNode) Root() *ElementNode {
	return nil
}

func (_ ElementNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ElementNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ElementNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ ElementNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ ElementNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ElementNode) SetName(_ string) {}

func (_ ElementNode) SetNamespace(_ string, _ string) {}

func (_ ElementNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ ElementNode) String() string {
	return ""
}

func (_ ElementNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ ElementNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ ElementNode) ToUnformattedXml() string {
	return ""
}

func (_ ElementNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ ElementNode) Unlink() {}

func (_ ElementNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ ElementNode) Uri() string {
	return ""
}

func (_ ElementNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

type NamespaceDeclaration struct {
	Prefix string
	Uri    string
}

type Node interface {
	AddChild(_ interface{}) interface {
		Error() string
	}
	AddNextSibling(_ interface{}) interface {
		Error() string
	}
	AddPreviousSibling(_ interface{}) interface {
		Error() string
	}
	Attr(_ string) string
	Attribute(_ string) *AttributeNode
	AttributeList() []*AttributeNode
	Attributes() map[string]*AttributeNode
	Coerce(_ interface{}) ([]Node, interface {
		Error() string
	})
	Content() string
	CountChildren() int
	DeclareNamespace(_ string, _ string)
	DeclaredNamespaces() []NamespaceDeclaration
	Duplicate(_ int) Node
	DuplicateTo(_ Document, _ int) Node
	EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
		Error() string
	})
	EvalXPathAsBoolean(_ interface{}, _ interface{}) bool
	FirstChild() Node
	InnerHtml() string
	InsertAfter(_ interface{}) interface {
		Error() string
	}
	InsertBefore(_ interface{}) interface {
		Error() string
	}
	InsertBegin(_ interface{}) interface {
		Error() string
	}
	InsertEnd(_ interface{}) interface {
		Error() string
	}
	IsValid() bool
	LastChild() Node
	LineNumber() int
	MyDocument() Document
	Name() string
	Namespace() string
	NextSibling() Node
	NodePtr() interface{}
	NodeType() NodeType
	Parent() Node
	ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
		Error() string
	})
	Path() string
	PreviousSibling() Node
	RecursivelyRemoveNamespaces() interface {
		Error() string
	}
	Remove()
	RemoveDefaultNamespace()
	Replace(_ interface{}) interface {
		Error() string
	}
	ResetChildren()
	ResetNodePtr()
	Search(_ interface{}) ([]Node, interface {
		Error() string
	})
	SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
		Error() string
	})
	SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int)
	SetAttr(_ string, _ string) string
	SetChildren(_ interface{}) interface {
		Error() string
	}
	SetContent(_ interface{}) interface {
		Error() string
	}
	SetInnerHtml(_ interface{}) interface {
		Error() string
	}
	SetName(_ string)
	SetNamespace(_ string, _ string)
	SetNsAttr(_ string, _ string, _ string) string
	String() string
	ToBuffer(_ []uint8) []uint8
	ToHtml(_ []uint8, _ []uint8) ([]uint8, int)
	ToUnformattedXml() string
	ToXml(_ []uint8, _ []uint8) ([]uint8, int)
	Unlink()
	Wrap(_ string) interface {
		Error() string
	}
}

type NodeType int

type ParseOption int

type ProcessingInstructionNode struct {
	XmlNode *XmlNode
}

func (_ ProcessingInstructionNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) AddUnlinkedNode(_ interface{}) {}

func (_ ProcessingInstructionNode) Attr(_ string) string {
	return ""
}

func (_ ProcessingInstructionNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ ProcessingInstructionNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ ProcessingInstructionNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ ProcessingInstructionNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ ProcessingInstructionNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ProcessingInstructionNode) Content() string {
	return ""
}

func (_ ProcessingInstructionNode) CountChildren() int {
	return 0
}

func (_ ProcessingInstructionNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ ProcessingInstructionNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ ProcessingInstructionNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ ProcessingInstructionNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ ProcessingInstructionNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ ProcessingInstructionNode) DeclareNamespace(_ string, _ string) {}

func (_ ProcessingInstructionNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ ProcessingInstructionNode) DocPtr() interface{} {
	return nil
}

func (_ ProcessingInstructionNode) DocRef() Document {
	return nil
}

func (_ ProcessingInstructionNode) DocType() NodeType {
	return 0
}

func (_ ProcessingInstructionNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ ProcessingInstructionNode) Duplicate(_ int) Node {
	return nil
}

func (_ ProcessingInstructionNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ ProcessingInstructionNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ProcessingInstructionNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ ProcessingInstructionNode) FirstChild() Node {
	return nil
}

func (_ ProcessingInstructionNode) Free() {}

func (_ ProcessingInstructionNode) InnerHtml() string {
	return ""
}

func (_ ProcessingInstructionNode) InputEncoding() []uint8 {
	return nil
}

func (_ ProcessingInstructionNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) IsValid() bool {
	return false
}

func (_ ProcessingInstructionNode) LastChild() Node {
	return nil
}

func (_ ProcessingInstructionNode) LineNumber() int {
	return 0
}

func (_ ProcessingInstructionNode) MyDocument() Document {
	return nil
}

func (_ ProcessingInstructionNode) Name() string {
	return ""
}

func (_ ProcessingInstructionNode) Namespace() string {
	return ""
}

func (_ ProcessingInstructionNode) NextSibling() Node {
	return nil
}

func (_ ProcessingInstructionNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ ProcessingInstructionNode) NodePtr() interface{} {
	return nil
}

func (_ ProcessingInstructionNode) NodeType() NodeType {
	return 0
}

func (_ ProcessingInstructionNode) OutputEncoding() []uint8 {
	return nil
}

func (_ ProcessingInstructionNode) Parent() Node {
	return nil
}

func (_ ProcessingInstructionNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ProcessingInstructionNode) Path() string {
	return ""
}

func (_ ProcessingInstructionNode) PreviousSibling() Node {
	return nil
}

func (_ ProcessingInstructionNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) Remove() {}

func (_ ProcessingInstructionNode) RemoveDefaultNamespace() {}

func (_ ProcessingInstructionNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ ProcessingInstructionNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) ResetChildren() {}

func (_ ProcessingInstructionNode) ResetNodePtr() {}

func (_ ProcessingInstructionNode) Root() *ElementNode {
	return nil
}

func (_ ProcessingInstructionNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ProcessingInstructionNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ ProcessingInstructionNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ ProcessingInstructionNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ ProcessingInstructionNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ ProcessingInstructionNode) SetName(_ string) {}

func (_ ProcessingInstructionNode) SetNamespace(_ string, _ string) {}

func (_ ProcessingInstructionNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ ProcessingInstructionNode) String() string {
	return ""
}

func (_ ProcessingInstructionNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ ProcessingInstructionNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ ProcessingInstructionNode) ToUnformattedXml() string {
	return ""
}

func (_ ProcessingInstructionNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ ProcessingInstructionNode) Unlink() {}

func (_ ProcessingInstructionNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ ProcessingInstructionNode) Uri() string {
	return ""
}

func (_ ProcessingInstructionNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

type SerializationOption int

type TextNode struct {
	XmlNode *XmlNode
}

func (_ TextNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) AddUnlinkedNode(_ interface{}) {}

func (_ TextNode) Attr(_ string) string {
	return ""
}

func (_ TextNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ TextNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ TextNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ TextNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ TextNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ TextNode) Content() string {
	return ""
}

func (_ TextNode) CountChildren() int {
	return 0
}

func (_ TextNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ TextNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ TextNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ TextNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ TextNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ TextNode) DeclareNamespace(_ string, _ string) {}

func (_ TextNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ TextNode) DocPtr() interface{} {
	return nil
}

func (_ TextNode) DocRef() Document {
	return nil
}

func (_ TextNode) DocType() NodeType {
	return 0
}

func (_ TextNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ TextNode) Duplicate(_ int) Node {
	return nil
}

func (_ TextNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ TextNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ TextNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ TextNode) FirstChild() Node {
	return nil
}

func (_ TextNode) Free() {}

func (_ TextNode) InnerHtml() string {
	return ""
}

func (_ TextNode) InputEncoding() []uint8 {
	return nil
}

func (_ TextNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) IsValid() bool {
	return false
}

func (_ TextNode) LastChild() Node {
	return nil
}

func (_ TextNode) LineNumber() int {
	return 0
}

func (_ TextNode) MyDocument() Document {
	return nil
}

func (_ TextNode) Name() string {
	return ""
}

func (_ TextNode) Namespace() string {
	return ""
}

func (_ TextNode) NextSibling() Node {
	return nil
}

func (_ TextNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ TextNode) NodePtr() interface{} {
	return nil
}

func (_ TextNode) NodeType() NodeType {
	return 0
}

func (_ TextNode) OutputEncoding() []uint8 {
	return nil
}

func (_ TextNode) Parent() Node {
	return nil
}

func (_ TextNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ TextNode) Path() string {
	return ""
}

func (_ TextNode) PreviousSibling() Node {
	return nil
}

func (_ TextNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ TextNode) Remove() {}

func (_ TextNode) RemoveDefaultNamespace() {}

func (_ TextNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ TextNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) ResetChildren() {}

func (_ TextNode) ResetNodePtr() {}

func (_ TextNode) Root() *ElementNode {
	return nil
}

func (_ TextNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ TextNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ TextNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ TextNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ TextNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ TextNode) SetName(_ string) {}

func (_ TextNode) SetNamespace(_ string, _ string) {}

func (_ TextNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ TextNode) String() string {
	return ""
}

func (_ TextNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ TextNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ TextNode) ToUnformattedXml() string {
	return ""
}

func (_ TextNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ TextNode) Unlink() {}

func (_ TextNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ TextNode) Uri() string {
	return ""
}

func (_ TextNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}

func (_ *TextNode) DisableOutputEscaping() {}

type XmlNode struct {
	Ptr      *interface{}
	Document Document
}

func (_ XmlNode) AddUnlinkedNode(_ interface{}) {}

func (_ XmlNode) BookkeepFragment(_ *DocumentFragment) {}

func (_ XmlNode) CreateCDataNode(_ string) *CDataNode {
	return nil
}

func (_ XmlNode) CreateCommentNode(_ string) *CommentNode {
	return nil
}

func (_ XmlNode) CreateElementNode(_ string) *ElementNode {
	return nil
}

func (_ XmlNode) CreatePINode(_ string, _ string) *ProcessingInstructionNode {
	return nil
}

func (_ XmlNode) CreateTextNode(_ string) *TextNode {
	return nil
}

func (_ XmlNode) DocPtr() interface{} {
	return nil
}

func (_ XmlNode) DocRef() Document {
	return nil
}

func (_ XmlNode) DocType() NodeType {
	return 0
}

func (_ XmlNode) DocXPathCtx() *interface{} {
	return nil
}

func (_ XmlNode) Free() {}

func (_ XmlNode) InputEncoding() []uint8 {
	return nil
}

func (_ XmlNode) NodeById(_ string) *ElementNode {
	return nil
}

func (_ XmlNode) OutputEncoding() []uint8 {
	return nil
}

func (_ XmlNode) RemoveUnlinkedNode(_ interface{}) bool {
	return false
}

func (_ XmlNode) Root() *ElementNode {
	return nil
}

func (_ XmlNode) UnparsedEntityURI(_ string) string {
	return ""
}

func (_ XmlNode) Uri() string {
	return ""
}

func (_ *XmlNode) AddChild(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) AddNextSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) AddPreviousSibling(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) Attr(_ string) string {
	return ""
}

func (_ *XmlNode) Attribute(_ string) *AttributeNode {
	return nil
}

func (_ *XmlNode) AttributeList() []*AttributeNode {
	return nil
}

func (_ *XmlNode) Attributes() map[string]*AttributeNode {
	return nil
}

func (_ *XmlNode) Coerce(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ *XmlNode) Content() string {
	return ""
}

func (_ *XmlNode) CountChildren() int {
	return 0
}

func (_ *XmlNode) DeclareNamespace(_ string, _ string) {}

func (_ *XmlNode) DeclaredNamespaces() []NamespaceDeclaration {
	return nil
}

func (_ *XmlNode) Duplicate(_ int) Node {
	return nil
}

func (_ *XmlNode) DuplicateTo(_ Document, _ int) Node {
	return nil
}

func (_ *XmlNode) EvalXPath(_ interface{}, _ interface{}) (interface{}, interface {
	Error() string
}) {
	return nil, nil
}

func (_ *XmlNode) EvalXPathAsBoolean(_ interface{}, _ interface{}) bool {
	return false
}

func (_ *XmlNode) FirstChild() Node {
	return nil
}

func (_ *XmlNode) InnerHtml() string {
	return ""
}

func (_ *XmlNode) InsertAfter(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) InsertBefore(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) InsertBegin(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) InsertEnd(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) IsValid() bool {
	return false
}

func (_ *XmlNode) LastChild() Node {
	return nil
}

func (_ *XmlNode) LineNumber() int {
	return 0
}

func (_ *XmlNode) MyDocument() Document {
	return nil
}

func (_ *XmlNode) Name() string {
	return ""
}

func (_ *XmlNode) Namespace() string {
	return ""
}

func (_ *XmlNode) NextSibling() Node {
	return nil
}

func (_ *XmlNode) NodePtr() interface{} {
	return nil
}

func (_ *XmlNode) NodeType() NodeType {
	return 0
}

func (_ *XmlNode) Parent() Node {
	return nil
}

func (_ *XmlNode) ParseFragment(_ []uint8, _ []uint8, _ ParseOption) (*DocumentFragment, interface {
	Error() string
}) {
	return nil, nil
}

func (_ *XmlNode) Path() string {
	return ""
}

func (_ *XmlNode) PreviousSibling() Node {
	return nil
}

func (_ *XmlNode) RecursivelyRemoveNamespaces() interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) Remove() {}

func (_ *XmlNode) RemoveDefaultNamespace() {}

func (_ *XmlNode) Replace(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) ResetChildren() {}

func (_ *XmlNode) ResetNodePtr() {}

func (_ *XmlNode) Search(_ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ *XmlNode) SearchWithVariables(_ interface{}, _ interface{}) ([]Node, interface {
	Error() string
}) {
	return nil, nil
}

func (_ *XmlNode) SerializeWithFormat(_ SerializationOption, _ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ *XmlNode) SetAttr(_ string, _ string) string {
	return ""
}

func (_ *XmlNode) SetChildren(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) SetContent(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) SetInnerHtml(_ interface{}) interface {
	Error() string
} {
	return nil
}

func (_ *XmlNode) SetName(_ string) {}

func (_ *XmlNode) SetNamespace(_ string, _ string) {}

func (_ *XmlNode) SetNsAttr(_ string, _ string, _ string) string {
	return ""
}

func (_ *XmlNode) String() string {
	return ""
}

func (_ *XmlNode) ToBuffer(_ []uint8) []uint8 {
	return nil
}

func (_ *XmlNode) ToHtml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ *XmlNode) ToUnformattedXml() string {
	return ""
}

func (_ *XmlNode) ToXml(_ []uint8, _ []uint8) ([]uint8, int) {
	return nil, 0
}

func (_ *XmlNode) Unlink() {}

func (_ *XmlNode) Wrap(_ string) interface {
	Error() string
} {
	return nil
}
